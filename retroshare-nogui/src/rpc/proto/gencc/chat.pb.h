// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "core.pb.h"
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class ChatLobbyInfo;
class ChatId;
class ChatMessage;
class ResponseChatLobbies;
class RequestChatLobbies;
class RequestCreateLobby;
class RequestJoinOrLeaveLobby;
class RequestSetLobbyNickname;
class ResponseSetLobbyNickname;
class RequestRegisterEvents;
class ResponseRegisterEvents;
class EventLobbyInvite;
class EventChatMessage;
class RequestSendMessage;
class ResponseSendMessage;
class RequestChatHistory;
class ResponseChatHistory;

enum ChatLobbyInfo_LobbyState {
  ChatLobbyInfo_LobbyState_LOBBYSTATE_JOINED = 1,
  ChatLobbyInfo_LobbyState_LOBBYSTATE_INVITED = 2,
  ChatLobbyInfo_LobbyState_LOBBYSTATE_VISIBLE = 3
};
bool ChatLobbyInfo_LobbyState_IsValid(int value);
const ChatLobbyInfo_LobbyState ChatLobbyInfo_LobbyState_LobbyState_MIN = ChatLobbyInfo_LobbyState_LOBBYSTATE_JOINED;
const ChatLobbyInfo_LobbyState ChatLobbyInfo_LobbyState_LobbyState_MAX = ChatLobbyInfo_LobbyState_LOBBYSTATE_VISIBLE;
const int ChatLobbyInfo_LobbyState_LobbyState_ARRAYSIZE = ChatLobbyInfo_LobbyState_LobbyState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatLobbyInfo_LobbyState_descriptor();
inline const ::std::string& ChatLobbyInfo_LobbyState_Name(ChatLobbyInfo_LobbyState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatLobbyInfo_LobbyState_descriptor(), value);
}
inline bool ChatLobbyInfo_LobbyState_Parse(
    const ::std::string& name, ChatLobbyInfo_LobbyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatLobbyInfo_LobbyState>(
    ChatLobbyInfo_LobbyState_descriptor(), name, value);
}
enum RequestChatLobbies_LobbySet {
  RequestChatLobbies_LobbySet_LOBBYSET_ALL = 1,
  RequestChatLobbies_LobbySet_LOBBYSET_JOINED = 2,
  RequestChatLobbies_LobbySet_LOBBYSET_INVITED = 3,
  RequestChatLobbies_LobbySet_LOBBYSET_VISIBLE = 4
};
bool RequestChatLobbies_LobbySet_IsValid(int value);
const RequestChatLobbies_LobbySet RequestChatLobbies_LobbySet_LobbySet_MIN = RequestChatLobbies_LobbySet_LOBBYSET_ALL;
const RequestChatLobbies_LobbySet RequestChatLobbies_LobbySet_LobbySet_MAX = RequestChatLobbies_LobbySet_LOBBYSET_VISIBLE;
const int RequestChatLobbies_LobbySet_LobbySet_ARRAYSIZE = RequestChatLobbies_LobbySet_LobbySet_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestChatLobbies_LobbySet_descriptor();
inline const ::std::string& RequestChatLobbies_LobbySet_Name(RequestChatLobbies_LobbySet value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestChatLobbies_LobbySet_descriptor(), value);
}
inline bool RequestChatLobbies_LobbySet_Parse(
    const ::std::string& name, RequestChatLobbies_LobbySet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestChatLobbies_LobbySet>(
    RequestChatLobbies_LobbySet_descriptor(), name, value);
}
enum RequestJoinOrLeaveLobby_LobbyAction {
  RequestJoinOrLeaveLobby_LobbyAction_JOIN_OR_ACCEPT = 1,
  RequestJoinOrLeaveLobby_LobbyAction_LEAVE_OR_DENY = 2
};
bool RequestJoinOrLeaveLobby_LobbyAction_IsValid(int value);
const RequestJoinOrLeaveLobby_LobbyAction RequestJoinOrLeaveLobby_LobbyAction_LobbyAction_MIN = RequestJoinOrLeaveLobby_LobbyAction_JOIN_OR_ACCEPT;
const RequestJoinOrLeaveLobby_LobbyAction RequestJoinOrLeaveLobby_LobbyAction_LobbyAction_MAX = RequestJoinOrLeaveLobby_LobbyAction_LEAVE_OR_DENY;
const int RequestJoinOrLeaveLobby_LobbyAction_LobbyAction_ARRAYSIZE = RequestJoinOrLeaveLobby_LobbyAction_LobbyAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestJoinOrLeaveLobby_LobbyAction_descriptor();
inline const ::std::string& RequestJoinOrLeaveLobby_LobbyAction_Name(RequestJoinOrLeaveLobby_LobbyAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestJoinOrLeaveLobby_LobbyAction_descriptor(), value);
}
inline bool RequestJoinOrLeaveLobby_LobbyAction_Parse(
    const ::std::string& name, RequestJoinOrLeaveLobby_LobbyAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestJoinOrLeaveLobby_LobbyAction>(
    RequestJoinOrLeaveLobby_LobbyAction_descriptor(), name, value);
}
enum RequestRegisterEvents_RegisterAction {
  RequestRegisterEvents_RegisterAction_REGISTER = 1,
  RequestRegisterEvents_RegisterAction_DEREGISTER = 2
};
bool RequestRegisterEvents_RegisterAction_IsValid(int value);
const RequestRegisterEvents_RegisterAction RequestRegisterEvents_RegisterAction_RegisterAction_MIN = RequestRegisterEvents_RegisterAction_REGISTER;
const RequestRegisterEvents_RegisterAction RequestRegisterEvents_RegisterAction_RegisterAction_MAX = RequestRegisterEvents_RegisterAction_DEREGISTER;
const int RequestRegisterEvents_RegisterAction_RegisterAction_ARRAYSIZE = RequestRegisterEvents_RegisterAction_RegisterAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestRegisterEvents_RegisterAction_descriptor();
inline const ::std::string& RequestRegisterEvents_RegisterAction_Name(RequestRegisterEvents_RegisterAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestRegisterEvents_RegisterAction_descriptor(), value);
}
inline bool RequestRegisterEvents_RegisterAction_Parse(
    const ::std::string& name, RequestRegisterEvents_RegisterAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestRegisterEvents_RegisterAction>(
    RequestRegisterEvents_RegisterAction_descriptor(), name, value);
}
enum RequestMsgIds {
  MsgId_RequestChatLobbies = 1,
  MsgId_RequestCreateLobby = 2,
  MsgId_RequestJoinOrLeaveLobby = 3,
  MsgId_RequestSetLobbyNickname = 4,
  MsgId_RequestRegisterEvents = 5,
  MsgId_RequestSendMessage = 6,
  MsgId_RequestChatHistory = 7
};
bool RequestMsgIds_IsValid(int value);
const RequestMsgIds RequestMsgIds_MIN = MsgId_RequestChatLobbies;
const RequestMsgIds RequestMsgIds_MAX = MsgId_RequestChatHistory;
const int RequestMsgIds_ARRAYSIZE = RequestMsgIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor();
inline const ::std::string& RequestMsgIds_Name(RequestMsgIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestMsgIds_descriptor(), value);
}
inline bool RequestMsgIds_Parse(
    const ::std::string& name, RequestMsgIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestMsgIds>(
    RequestMsgIds_descriptor(), name, value);
}
enum ResponseMsgIds {
  MsgId_ResponseChatLobbies = 1,
  MsgId_ResponseSetLobbyNickname = 4,
  MsgId_ResponseRegisterEvents = 5,
  MsgId_ResponseSendMessage = 6,
  MsgId_ResponseChatHistory = 7,
  MsgId_EventLobbyInvite = 101,
  MsgId_EventChatMessage = 102
};
bool ResponseMsgIds_IsValid(int value);
const ResponseMsgIds ResponseMsgIds_MIN = MsgId_ResponseChatLobbies;
const ResponseMsgIds ResponseMsgIds_MAX = MsgId_EventChatMessage;
const int ResponseMsgIds_ARRAYSIZE = ResponseMsgIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor();
inline const ::std::string& ResponseMsgIds_Name(ResponseMsgIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseMsgIds_descriptor(), value);
}
inline bool ResponseMsgIds_Parse(
    const ::std::string& name, ResponseMsgIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseMsgIds>(
    ResponseMsgIds_descriptor(), name, value);
}
enum LobbyPrivacyLevel {
  PRIVACY_PRIVATE = 1,
  PRIVACY_PUBLIC = 2
};
bool LobbyPrivacyLevel_IsValid(int value);
const LobbyPrivacyLevel LobbyPrivacyLevel_MIN = PRIVACY_PRIVATE;
const LobbyPrivacyLevel LobbyPrivacyLevel_MAX = PRIVACY_PUBLIC;
const int LobbyPrivacyLevel_ARRAYSIZE = LobbyPrivacyLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyPrivacyLevel_descriptor();
inline const ::std::string& LobbyPrivacyLevel_Name(LobbyPrivacyLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyPrivacyLevel_descriptor(), value);
}
inline bool LobbyPrivacyLevel_Parse(
    const ::std::string& name, LobbyPrivacyLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyPrivacyLevel>(
    LobbyPrivacyLevel_descriptor(), name, value);
}
enum ChatType {
  TYPE_PRIVATE = 1,
  TYPE_LOBBY = 2,
  TYPE_GROUP = 3
};
bool ChatType_IsValid(int value);
const ChatType ChatType_MIN = TYPE_PRIVATE;
const ChatType ChatType_MAX = TYPE_GROUP;
const int ChatType_ARRAYSIZE = ChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatType_descriptor();
inline const ::std::string& ChatType_Name(ChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatType_descriptor(), value);
}
inline bool ChatType_Parse(
    const ::std::string& name, ChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatType>(
    ChatType_descriptor(), name, value);
}
// ===================================================================

class ChatLobbyInfo : public ::google::protobuf::Message {
 public:
  ChatLobbyInfo();
  virtual ~ChatLobbyInfo();
  
  ChatLobbyInfo(const ChatLobbyInfo& from);
  
  inline ChatLobbyInfo& operator=(const ChatLobbyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatLobbyInfo& default_instance();
  
  void Swap(ChatLobbyInfo* other);
  
  // implements Message ----------------------------------------------
  
  ChatLobbyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatLobbyInfo& from);
  void MergeFrom(const ChatLobbyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ChatLobbyInfo_LobbyState LobbyState;
  static const LobbyState LOBBYSTATE_JOINED = ChatLobbyInfo_LobbyState_LOBBYSTATE_JOINED;
  static const LobbyState LOBBYSTATE_INVITED = ChatLobbyInfo_LobbyState_LOBBYSTATE_INVITED;
  static const LobbyState LOBBYSTATE_VISIBLE = ChatLobbyInfo_LobbyState_LOBBYSTATE_VISIBLE;
  static inline bool LobbyState_IsValid(int value) {
    return ChatLobbyInfo_LobbyState_IsValid(value);
  }
  static const LobbyState LobbyState_MIN =
    ChatLobbyInfo_LobbyState_LobbyState_MIN;
  static const LobbyState LobbyState_MAX =
    ChatLobbyInfo_LobbyState_LobbyState_MAX;
  static const int LobbyState_ARRAYSIZE =
    ChatLobbyInfo_LobbyState_LobbyState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LobbyState_descriptor() {
    return ChatLobbyInfo_LobbyState_descriptor();
  }
  static inline const ::std::string& LobbyState_Name(LobbyState value) {
    return ChatLobbyInfo_LobbyState_Name(value);
  }
  static inline bool LobbyState_Parse(const ::std::string& name,
      LobbyState* value) {
    return ChatLobbyInfo_LobbyState_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline const ::std::string& lobby_id() const;
  inline void set_lobby_id(const ::std::string& value);
  inline void set_lobby_id(const char* value);
  inline void set_lobby_id(const char* value, size_t size);
  inline ::std::string* mutable_lobby_id();
  inline ::std::string* release_lobby_id();
  
  // required string lobby_topic = 2;
  inline bool has_lobby_topic() const;
  inline void clear_lobby_topic();
  static const int kLobbyTopicFieldNumber = 2;
  inline const ::std::string& lobby_topic() const;
  inline void set_lobby_topic(const ::std::string& value);
  inline void set_lobby_topic(const char* value);
  inline void set_lobby_topic(const char* value, size_t size);
  inline ::std::string* mutable_lobby_topic();
  inline ::std::string* release_lobby_topic();
  
  // required string lobby_name = 3;
  inline bool has_lobby_name() const;
  inline void clear_lobby_name();
  static const int kLobbyNameFieldNumber = 3;
  inline const ::std::string& lobby_name() const;
  inline void set_lobby_name(const ::std::string& value);
  inline void set_lobby_name(const char* value);
  inline void set_lobby_name(const char* value, size_t size);
  inline ::std::string* mutable_lobby_name();
  inline ::std::string* release_lobby_name();
  
  // required string lobby_nickname = 4;
  inline bool has_lobby_nickname() const;
  inline void clear_lobby_nickname();
  static const int kLobbyNicknameFieldNumber = 4;
  inline const ::std::string& lobby_nickname() const;
  inline void set_lobby_nickname(const ::std::string& value);
  inline void set_lobby_nickname(const char* value);
  inline void set_lobby_nickname(const char* value, size_t size);
  inline ::std::string* mutable_lobby_nickname();
  inline ::std::string* release_lobby_nickname();
  
  // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 5;
  inline bool has_privacy_level() const;
  inline void clear_privacy_level();
  static const int kPrivacyLevelFieldNumber = 5;
  inline rsctrl::chat::LobbyPrivacyLevel privacy_level() const;
  inline void set_privacy_level(rsctrl::chat::LobbyPrivacyLevel value);
  
  // required .rsctrl.chat.ChatLobbyInfo.LobbyState lobby_state = 6;
  inline bool has_lobby_state() const;
  inline void clear_lobby_state();
  static const int kLobbyStateFieldNumber = 6;
  inline ::rsctrl::chat::ChatLobbyInfo_LobbyState lobby_state() const;
  inline void set_lobby_state(::rsctrl::chat::ChatLobbyInfo_LobbyState value);
  
  // required uint32 no_peers = 7;
  inline bool has_no_peers() const;
  inline void clear_no_peers();
  static const int kNoPeersFieldNumber = 7;
  inline ::google::protobuf::uint32 no_peers() const;
  inline void set_no_peers(::google::protobuf::uint32 value);
  
  // required uint32 last_report_time = 8;
  inline bool has_last_report_time() const;
  inline void clear_last_report_time();
  static const int kLastReportTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 last_report_time() const;
  inline void set_last_report_time(::google::protobuf::uint32 value);
  
  // required uint32 last_activity = 9;
  inline bool has_last_activity() const;
  inline void clear_last_activity();
  static const int kLastActivityFieldNumber = 9;
  inline ::google::protobuf::uint32 last_activity() const;
  inline void set_last_activity(::google::protobuf::uint32 value);
  
  // repeated string participating_friends = 10;
  inline int participating_friends_size() const;
  inline void clear_participating_friends();
  static const int kParticipatingFriendsFieldNumber = 10;
  inline const ::std::string& participating_friends(int index) const;
  inline ::std::string* mutable_participating_friends(int index);
  inline void set_participating_friends(int index, const ::std::string& value);
  inline void set_participating_friends(int index, const char* value);
  inline void set_participating_friends(int index, const char* value, size_t size);
  inline ::std::string* add_participating_friends();
  inline void add_participating_friends(const ::std::string& value);
  inline void add_participating_friends(const char* value);
  inline void add_participating_friends(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& participating_friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_participating_friends();
  
  // repeated string nicknames = 11;
  inline int nicknames_size() const;
  inline void clear_nicknames();
  static const int kNicknamesFieldNumber = 11;
  inline const ::std::string& nicknames(int index) const;
  inline ::std::string* mutable_nicknames(int index);
  inline void set_nicknames(int index, const ::std::string& value);
  inline void set_nicknames(int index, const char* value);
  inline void set_nicknames(int index, const char* value, size_t size);
  inline ::std::string* add_nicknames();
  inline void add_nicknames(const ::std::string& value);
  inline void add_nicknames(const char* value);
  inline void add_nicknames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicknames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicknames();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.ChatLobbyInfo)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_lobby_topic();
  inline void clear_has_lobby_topic();
  inline void set_has_lobby_name();
  inline void clear_has_lobby_name();
  inline void set_has_lobby_nickname();
  inline void clear_has_lobby_nickname();
  inline void set_has_privacy_level();
  inline void clear_has_privacy_level();
  inline void set_has_lobby_state();
  inline void clear_has_lobby_state();
  inline void set_has_no_peers();
  inline void clear_has_no_peers();
  inline void set_has_last_report_time();
  inline void clear_has_last_report_time();
  inline void set_has_last_activity();
  inline void clear_has_last_activity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lobby_id_;
  ::std::string* lobby_topic_;
  ::std::string* lobby_name_;
  ::std::string* lobby_nickname_;
  int privacy_level_;
  int lobby_state_;
  ::google::protobuf::uint32 no_peers_;
  ::google::protobuf::uint32 last_report_time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> participating_friends_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicknames_;
  ::google::protobuf::uint32 last_activity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ChatLobbyInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChatId : public ::google::protobuf::Message {
 public:
  ChatId();
  virtual ~ChatId();
  
  ChatId(const ChatId& from);
  
  inline ChatId& operator=(const ChatId& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatId& default_instance();
  
  void Swap(ChatId* other);
  
  // implements Message ----------------------------------------------
  
  ChatId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatId& from);
  void MergeFrom(const ChatId& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.chat.ChatType chat_type = 1;
  inline bool has_chat_type() const;
  inline void clear_chat_type();
  static const int kChatTypeFieldNumber = 1;
  inline rsctrl::chat::ChatType chat_type() const;
  inline void set_chat_type(rsctrl::chat::ChatType value);
  
  // required string chat_id = 2;
  inline bool has_chat_id() const;
  inline void clear_chat_id();
  static const int kChatIdFieldNumber = 2;
  inline const ::std::string& chat_id() const;
  inline void set_chat_id(const ::std::string& value);
  inline void set_chat_id(const char* value);
  inline void set_chat_id(const char* value, size_t size);
  inline ::std::string* mutable_chat_id();
  inline ::std::string* release_chat_id();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.ChatId)
 private:
  inline void set_has_chat_type();
  inline void clear_has_chat_type();
  inline void set_has_chat_id();
  inline void clear_has_chat_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* chat_id_;
  int chat_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ChatId* default_instance_;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();
  
  ChatMessage(const ChatMessage& from);
  
  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();
  
  void Swap(ChatMessage* other);
  
  // implements Message ----------------------------------------------
  
  ChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.chat.ChatId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::rsctrl::chat::ChatId& id() const;
  inline ::rsctrl::chat::ChatId* mutable_id();
  inline ::rsctrl::chat::ChatId* release_id();
  
  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional string peer_nickname = 3;
  inline bool has_peer_nickname() const;
  inline void clear_peer_nickname();
  static const int kPeerNicknameFieldNumber = 3;
  inline const ::std::string& peer_nickname() const;
  inline void set_peer_nickname(const ::std::string& value);
  inline void set_peer_nickname(const char* value);
  inline void set_peer_nickname(const char* value, size_t size);
  inline ::std::string* mutable_peer_nickname();
  inline ::std::string* release_peer_nickname();
  
  // optional uint32 chat_flags = 4;
  inline bool has_chat_flags() const;
  inline void clear_chat_flags();
  static const int kChatFlagsFieldNumber = 4;
  inline ::google::protobuf::uint32 chat_flags() const;
  inline void set_chat_flags(::google::protobuf::uint32 value);
  
  // optional uint32 send_time = 5;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 send_time() const;
  inline void set_send_time(::google::protobuf::uint32 value);
  
  // optional uint32 recv_time = 6;
  inline bool has_recv_time() const;
  inline void clear_recv_time();
  static const int kRecvTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 recv_time() const;
  inline void set_recv_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.ChatMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_peer_nickname();
  inline void clear_has_peer_nickname();
  inline void set_has_chat_flags();
  inline void clear_has_chat_flags();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_recv_time();
  inline void clear_has_recv_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::chat::ChatId* id_;
  ::std::string* msg_;
  ::std::string* peer_nickname_;
  ::google::protobuf::uint32 chat_flags_;
  ::google::protobuf::uint32 send_time_;
  ::google::protobuf::uint32 recv_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResponseChatLobbies : public ::google::protobuf::Message {
 public:
  ResponseChatLobbies();
  virtual ~ResponseChatLobbies();
  
  ResponseChatLobbies(const ResponseChatLobbies& from);
  
  inline ResponseChatLobbies& operator=(const ResponseChatLobbies& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseChatLobbies& default_instance();
  
  void Swap(ResponseChatLobbies* other);
  
  // implements Message ----------------------------------------------
  
  ResponseChatLobbies* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseChatLobbies& from);
  void MergeFrom(const ResponseChatLobbies& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // repeated .rsctrl.chat.ChatLobbyInfo lobbies = 2;
  inline int lobbies_size() const;
  inline void clear_lobbies();
  static const int kLobbiesFieldNumber = 2;
  inline const ::rsctrl::chat::ChatLobbyInfo& lobbies(int index) const;
  inline ::rsctrl::chat::ChatLobbyInfo* mutable_lobbies(int index);
  inline ::rsctrl::chat::ChatLobbyInfo* add_lobbies();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatLobbyInfo >&
      lobbies() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatLobbyInfo >*
      mutable_lobbies();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.ResponseChatLobbies)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatLobbyInfo > lobbies_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseChatLobbies* default_instance_;
};
// -------------------------------------------------------------------

class RequestChatLobbies : public ::google::protobuf::Message {
 public:
  RequestChatLobbies();
  virtual ~RequestChatLobbies();
  
  RequestChatLobbies(const RequestChatLobbies& from);
  
  inline RequestChatLobbies& operator=(const RequestChatLobbies& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestChatLobbies& default_instance();
  
  void Swap(RequestChatLobbies* other);
  
  // implements Message ----------------------------------------------
  
  RequestChatLobbies* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestChatLobbies& from);
  void MergeFrom(const RequestChatLobbies& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RequestChatLobbies_LobbySet LobbySet;
  static const LobbySet LOBBYSET_ALL = RequestChatLobbies_LobbySet_LOBBYSET_ALL;
  static const LobbySet LOBBYSET_JOINED = RequestChatLobbies_LobbySet_LOBBYSET_JOINED;
  static const LobbySet LOBBYSET_INVITED = RequestChatLobbies_LobbySet_LOBBYSET_INVITED;
  static const LobbySet LOBBYSET_VISIBLE = RequestChatLobbies_LobbySet_LOBBYSET_VISIBLE;
  static inline bool LobbySet_IsValid(int value) {
    return RequestChatLobbies_LobbySet_IsValid(value);
  }
  static const LobbySet LobbySet_MIN =
    RequestChatLobbies_LobbySet_LobbySet_MIN;
  static const LobbySet LobbySet_MAX =
    RequestChatLobbies_LobbySet_LobbySet_MAX;
  static const int LobbySet_ARRAYSIZE =
    RequestChatLobbies_LobbySet_LobbySet_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LobbySet_descriptor() {
    return RequestChatLobbies_LobbySet_descriptor();
  }
  static inline const ::std::string& LobbySet_Name(LobbySet value) {
    return RequestChatLobbies_LobbySet_Name(value);
  }
  static inline bool LobbySet_Parse(const ::std::string& name,
      LobbySet* value) {
    return RequestChatLobbies_LobbySet_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.chat.RequestChatLobbies.LobbySet lobby_set = 1;
  inline bool has_lobby_set() const;
  inline void clear_lobby_set();
  static const int kLobbySetFieldNumber = 1;
  inline ::rsctrl::chat::RequestChatLobbies_LobbySet lobby_set() const;
  inline void set_lobby_set(::rsctrl::chat::RequestChatLobbies_LobbySet value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.RequestChatLobbies)
 private:
  inline void set_has_lobby_set();
  inline void clear_has_lobby_set();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int lobby_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static RequestChatLobbies* default_instance_;
};
// -------------------------------------------------------------------

class RequestCreateLobby : public ::google::protobuf::Message {
 public:
  RequestCreateLobby();
  virtual ~RequestCreateLobby();
  
  RequestCreateLobby(const RequestCreateLobby& from);
  
  inline RequestCreateLobby& operator=(const RequestCreateLobby& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestCreateLobby& default_instance();
  
  void Swap(RequestCreateLobby* other);
  
  // implements Message ----------------------------------------------
  
  RequestCreateLobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestCreateLobby& from);
  void MergeFrom(const RequestCreateLobby& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string lobby_name = 1;
  inline bool has_lobby_name() const;
  inline void clear_lobby_name();
  static const int kLobbyNameFieldNumber = 1;
  inline const ::std::string& lobby_name() const;
  inline void set_lobby_name(const ::std::string& value);
  inline void set_lobby_name(const char* value);
  inline void set_lobby_name(const char* value, size_t size);
  inline ::std::string* mutable_lobby_name();
  inline ::std::string* release_lobby_name();
  
  // required string lobby_topic = 2;
  inline bool has_lobby_topic() const;
  inline void clear_lobby_topic();
  static const int kLobbyTopicFieldNumber = 2;
  inline const ::std::string& lobby_topic() const;
  inline void set_lobby_topic(const ::std::string& value);
  inline void set_lobby_topic(const char* value);
  inline void set_lobby_topic(const char* value, size_t size);
  inline ::std::string* mutable_lobby_topic();
  inline ::std::string* release_lobby_topic();
  
  // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 4;
  inline bool has_privacy_level() const;
  inline void clear_privacy_level();
  static const int kPrivacyLevelFieldNumber = 4;
  inline rsctrl::chat::LobbyPrivacyLevel privacy_level() const;
  inline void set_privacy_level(rsctrl::chat::LobbyPrivacyLevel value);
  
  // repeated string invited_friends = 3;
  inline int invited_friends_size() const;
  inline void clear_invited_friends();
  static const int kInvitedFriendsFieldNumber = 3;
  inline const ::std::string& invited_friends(int index) const;
  inline ::std::string* mutable_invited_friends(int index);
  inline void set_invited_friends(int index, const ::std::string& value);
  inline void set_invited_friends(int index, const char* value);
  inline void set_invited_friends(int index, const char* value, size_t size);
  inline ::std::string* add_invited_friends();
  inline void add_invited_friends(const ::std::string& value);
  inline void add_invited_friends(const char* value);
  inline void add_invited_friends(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& invited_friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_invited_friends();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.RequestCreateLobby)
 private:
  inline void set_has_lobby_name();
  inline void clear_has_lobby_name();
  inline void set_has_lobby_topic();
  inline void clear_has_lobby_topic();
  inline void set_has_privacy_level();
  inline void clear_has_privacy_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lobby_name_;
  ::std::string* lobby_topic_;
  ::google::protobuf::RepeatedPtrField< ::std::string> invited_friends_;
  int privacy_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static RequestCreateLobby* default_instance_;
};
// -------------------------------------------------------------------

class RequestJoinOrLeaveLobby : public ::google::protobuf::Message {
 public:
  RequestJoinOrLeaveLobby();
  virtual ~RequestJoinOrLeaveLobby();
  
  RequestJoinOrLeaveLobby(const RequestJoinOrLeaveLobby& from);
  
  inline RequestJoinOrLeaveLobby& operator=(const RequestJoinOrLeaveLobby& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestJoinOrLeaveLobby& default_instance();
  
  void Swap(RequestJoinOrLeaveLobby* other);
  
  // implements Message ----------------------------------------------
  
  RequestJoinOrLeaveLobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestJoinOrLeaveLobby& from);
  void MergeFrom(const RequestJoinOrLeaveLobby& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RequestJoinOrLeaveLobby_LobbyAction LobbyAction;
  static const LobbyAction JOIN_OR_ACCEPT = RequestJoinOrLeaveLobby_LobbyAction_JOIN_OR_ACCEPT;
  static const LobbyAction LEAVE_OR_DENY = RequestJoinOrLeaveLobby_LobbyAction_LEAVE_OR_DENY;
  static inline bool LobbyAction_IsValid(int value) {
    return RequestJoinOrLeaveLobby_LobbyAction_IsValid(value);
  }
  static const LobbyAction LobbyAction_MIN =
    RequestJoinOrLeaveLobby_LobbyAction_LobbyAction_MIN;
  static const LobbyAction LobbyAction_MAX =
    RequestJoinOrLeaveLobby_LobbyAction_LobbyAction_MAX;
  static const int LobbyAction_ARRAYSIZE =
    RequestJoinOrLeaveLobby_LobbyAction_LobbyAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LobbyAction_descriptor() {
    return RequestJoinOrLeaveLobby_LobbyAction_descriptor();
  }
  static inline const ::std::string& LobbyAction_Name(LobbyAction value) {
    return RequestJoinOrLeaveLobby_LobbyAction_Name(value);
  }
  static inline bool LobbyAction_Parse(const ::std::string& name,
      LobbyAction* value) {
    return RequestJoinOrLeaveLobby_LobbyAction_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline const ::std::string& lobby_id() const;
  inline void set_lobby_id(const ::std::string& value);
  inline void set_lobby_id(const char* value);
  inline void set_lobby_id(const char* value, size_t size);
  inline ::std::string* mutable_lobby_id();
  inline ::std::string* release_lobby_id();
  
  // required .rsctrl.chat.RequestJoinOrLeaveLobby.LobbyAction action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction action() const;
  inline void set_action(::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.RequestJoinOrLeaveLobby)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_action();
  inline void clear_has_action();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lobby_id_;
  int action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static RequestJoinOrLeaveLobby* default_instance_;
};
// -------------------------------------------------------------------

class RequestSetLobbyNickname : public ::google::protobuf::Message {
 public:
  RequestSetLobbyNickname();
  virtual ~RequestSetLobbyNickname();
  
  RequestSetLobbyNickname(const RequestSetLobbyNickname& from);
  
  inline RequestSetLobbyNickname& operator=(const RequestSetLobbyNickname& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSetLobbyNickname& default_instance();
  
  void Swap(RequestSetLobbyNickname* other);
  
  // implements Message ----------------------------------------------
  
  RequestSetLobbyNickname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSetLobbyNickname& from);
  void MergeFrom(const RequestSetLobbyNickname& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  
  // repeated string lobby_ids = 2;
  inline int lobby_ids_size() const;
  inline void clear_lobby_ids();
  static const int kLobbyIdsFieldNumber = 2;
  inline const ::std::string& lobby_ids(int index) const;
  inline ::std::string* mutable_lobby_ids(int index);
  inline void set_lobby_ids(int index, const ::std::string& value);
  inline void set_lobby_ids(int index, const char* value);
  inline void set_lobby_ids(int index, const char* value, size_t size);
  inline ::std::string* add_lobby_ids();
  inline void add_lobby_ids(const ::std::string& value);
  inline void add_lobby_ids(const char* value);
  inline void add_lobby_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& lobby_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lobby_ids();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.RequestSetLobbyNickname)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* nickname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lobby_ids_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static RequestSetLobbyNickname* default_instance_;
};
// -------------------------------------------------------------------

class ResponseSetLobbyNickname : public ::google::protobuf::Message {
 public:
  ResponseSetLobbyNickname();
  virtual ~ResponseSetLobbyNickname();
  
  ResponseSetLobbyNickname(const ResponseSetLobbyNickname& from);
  
  inline ResponseSetLobbyNickname& operator=(const ResponseSetLobbyNickname& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseSetLobbyNickname& default_instance();
  
  void Swap(ResponseSetLobbyNickname* other);
  
  // implements Message ----------------------------------------------
  
  ResponseSetLobbyNickname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseSetLobbyNickname& from);
  void MergeFrom(const ResponseSetLobbyNickname& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.ResponseSetLobbyNickname)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseSetLobbyNickname* default_instance_;
};
// -------------------------------------------------------------------

class RequestRegisterEvents : public ::google::protobuf::Message {
 public:
  RequestRegisterEvents();
  virtual ~RequestRegisterEvents();
  
  RequestRegisterEvents(const RequestRegisterEvents& from);
  
  inline RequestRegisterEvents& operator=(const RequestRegisterEvents& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestRegisterEvents& default_instance();
  
  void Swap(RequestRegisterEvents* other);
  
  // implements Message ----------------------------------------------
  
  RequestRegisterEvents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestRegisterEvents& from);
  void MergeFrom(const RequestRegisterEvents& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RequestRegisterEvents_RegisterAction RegisterAction;
  static const RegisterAction REGISTER = RequestRegisterEvents_RegisterAction_REGISTER;
  static const RegisterAction DEREGISTER = RequestRegisterEvents_RegisterAction_DEREGISTER;
  static inline bool RegisterAction_IsValid(int value) {
    return RequestRegisterEvents_RegisterAction_IsValid(value);
  }
  static const RegisterAction RegisterAction_MIN =
    RequestRegisterEvents_RegisterAction_RegisterAction_MIN;
  static const RegisterAction RegisterAction_MAX =
    RequestRegisterEvents_RegisterAction_RegisterAction_MAX;
  static const int RegisterAction_ARRAYSIZE =
    RequestRegisterEvents_RegisterAction_RegisterAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RegisterAction_descriptor() {
    return RequestRegisterEvents_RegisterAction_descriptor();
  }
  static inline const ::std::string& RegisterAction_Name(RegisterAction value) {
    return RequestRegisterEvents_RegisterAction_Name(value);
  }
  static inline bool RegisterAction_Parse(const ::std::string& name,
      RegisterAction* value) {
    return RequestRegisterEvents_RegisterAction_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.chat.RequestRegisterEvents.RegisterAction action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::rsctrl::chat::RequestRegisterEvents_RegisterAction action() const;
  inline void set_action(::rsctrl::chat::RequestRegisterEvents_RegisterAction value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.RequestRegisterEvents)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static RequestRegisterEvents* default_instance_;
};
// -------------------------------------------------------------------

class ResponseRegisterEvents : public ::google::protobuf::Message {
 public:
  ResponseRegisterEvents();
  virtual ~ResponseRegisterEvents();
  
  ResponseRegisterEvents(const ResponseRegisterEvents& from);
  
  inline ResponseRegisterEvents& operator=(const ResponseRegisterEvents& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseRegisterEvents& default_instance();
  
  void Swap(ResponseRegisterEvents* other);
  
  // implements Message ----------------------------------------------
  
  ResponseRegisterEvents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseRegisterEvents& from);
  void MergeFrom(const ResponseRegisterEvents& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.ResponseRegisterEvents)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseRegisterEvents* default_instance_;
};
// -------------------------------------------------------------------

class EventLobbyInvite : public ::google::protobuf::Message {
 public:
  EventLobbyInvite();
  virtual ~EventLobbyInvite();
  
  EventLobbyInvite(const EventLobbyInvite& from);
  
  inline EventLobbyInvite& operator=(const EventLobbyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventLobbyInvite& default_instance();
  
  void Swap(EventLobbyInvite* other);
  
  // implements Message ----------------------------------------------
  
  EventLobbyInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventLobbyInvite& from);
  void MergeFrom(const EventLobbyInvite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.chat.ChatLobbyInfo lobby = 1;
  inline bool has_lobby() const;
  inline void clear_lobby();
  static const int kLobbyFieldNumber = 1;
  inline const ::rsctrl::chat::ChatLobbyInfo& lobby() const;
  inline ::rsctrl::chat::ChatLobbyInfo* mutable_lobby();
  inline ::rsctrl::chat::ChatLobbyInfo* release_lobby();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.EventLobbyInvite)
 private:
  inline void set_has_lobby();
  inline void clear_has_lobby();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::chat::ChatLobbyInfo* lobby_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static EventLobbyInvite* default_instance_;
};
// -------------------------------------------------------------------

class EventChatMessage : public ::google::protobuf::Message {
 public:
  EventChatMessage();
  virtual ~EventChatMessage();
  
  EventChatMessage(const EventChatMessage& from);
  
  inline EventChatMessage& operator=(const EventChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventChatMessage& default_instance();
  
  void Swap(EventChatMessage* other);
  
  // implements Message ----------------------------------------------
  
  EventChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventChatMessage& from);
  void MergeFrom(const EventChatMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.chat.ChatMessage msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::rsctrl::chat::ChatMessage& msg() const;
  inline ::rsctrl::chat::ChatMessage* mutable_msg();
  inline ::rsctrl::chat::ChatMessage* release_msg();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.EventChatMessage)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::chat::ChatMessage* msg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static EventChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class RequestSendMessage : public ::google::protobuf::Message {
 public:
  RequestSendMessage();
  virtual ~RequestSendMessage();
  
  RequestSendMessage(const RequestSendMessage& from);
  
  inline RequestSendMessage& operator=(const RequestSendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSendMessage& default_instance();
  
  void Swap(RequestSendMessage* other);
  
  // implements Message ----------------------------------------------
  
  RequestSendMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSendMessage& from);
  void MergeFrom(const RequestSendMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.chat.ChatMessage msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::rsctrl::chat::ChatMessage& msg() const;
  inline ::rsctrl::chat::ChatMessage* mutable_msg();
  inline ::rsctrl::chat::ChatMessage* release_msg();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.RequestSendMessage)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::chat::ChatMessage* msg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static RequestSendMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResponseSendMessage : public ::google::protobuf::Message {
 public:
  ResponseSendMessage();
  virtual ~ResponseSendMessage();
  
  ResponseSendMessage(const ResponseSendMessage& from);
  
  inline ResponseSendMessage& operator=(const ResponseSendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseSendMessage& default_instance();
  
  void Swap(ResponseSendMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResponseSendMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseSendMessage& from);
  void MergeFrom(const ResponseSendMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.ResponseSendMessage)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseSendMessage* default_instance_;
};
// -------------------------------------------------------------------

class RequestChatHistory : public ::google::protobuf::Message {
 public:
  RequestChatHistory();
  virtual ~RequestChatHistory();
  
  RequestChatHistory(const RequestChatHistory& from);
  
  inline RequestChatHistory& operator=(const RequestChatHistory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestChatHistory& default_instance();
  
  void Swap(RequestChatHistory* other);
  
  // implements Message ----------------------------------------------
  
  RequestChatHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestChatHistory& from);
  void MergeFrom(const RequestChatHistory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.chat.ChatId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::rsctrl::chat::ChatId& id() const;
  inline ::rsctrl::chat::ChatId* mutable_id();
  inline ::rsctrl::chat::ChatId* release_id();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.RequestChatHistory)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::chat::ChatId* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static RequestChatHistory* default_instance_;
};
// -------------------------------------------------------------------

class ResponseChatHistory : public ::google::protobuf::Message {
 public:
  ResponseChatHistory();
  virtual ~ResponseChatHistory();
  
  ResponseChatHistory(const ResponseChatHistory& from);
  
  inline ResponseChatHistory& operator=(const ResponseChatHistory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseChatHistory& default_instance();
  
  void Swap(ResponseChatHistory* other);
  
  // implements Message ----------------------------------------------
  
  ResponseChatHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseChatHistory& from);
  void MergeFrom(const ResponseChatHistory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // required .rsctrl.chat.ChatId id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::rsctrl::chat::ChatId& id() const;
  inline ::rsctrl::chat::ChatId* mutable_id();
  inline ::rsctrl::chat::ChatId* release_id();
  
  // repeated .rsctrl.chat.ChatMessage msgs = 3;
  inline int msgs_size() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 3;
  inline const ::rsctrl::chat::ChatMessage& msgs(int index) const;
  inline ::rsctrl::chat::ChatMessage* mutable_msgs(int index);
  inline ::rsctrl::chat::ChatMessage* add_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatMessage >&
      msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatMessage >*
      mutable_msgs();
  
  // @@protoc_insertion_point(class_scope:rsctrl.chat.ResponseChatHistory)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::rsctrl::chat::ChatId* id_;
  ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatMessage > msgs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseChatHistory* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatLobbyInfo

// required string lobby_id = 1;
inline bool ChatLobbyInfo::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatLobbyInfo::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatLobbyInfo::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatLobbyInfo::clear_lobby_id() {
  if (lobby_id_ != &::google::protobuf::internal::kEmptyString) {
    lobby_id_->clear();
  }
  clear_has_lobby_id();
}
inline const ::std::string& ChatLobbyInfo::lobby_id() const {
  return *lobby_id_;
}
inline void ChatLobbyInfo::set_lobby_id(const ::std::string& value) {
  set_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    lobby_id_ = new ::std::string;
  }
  lobby_id_->assign(value);
}
inline void ChatLobbyInfo::set_lobby_id(const char* value) {
  set_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    lobby_id_ = new ::std::string;
  }
  lobby_id_->assign(value);
}
inline void ChatLobbyInfo::set_lobby_id(const char* value, size_t size) {
  set_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    lobby_id_ = new ::std::string;
  }
  lobby_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatLobbyInfo::mutable_lobby_id() {
  set_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    lobby_id_ = new ::std::string;
  }
  return lobby_id_;
}
inline ::std::string* ChatLobbyInfo::release_lobby_id() {
  clear_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lobby_id_;
    lobby_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string lobby_topic = 2;
inline bool ChatLobbyInfo::has_lobby_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatLobbyInfo::set_has_lobby_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatLobbyInfo::clear_has_lobby_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatLobbyInfo::clear_lobby_topic() {
  if (lobby_topic_ != &::google::protobuf::internal::kEmptyString) {
    lobby_topic_->clear();
  }
  clear_has_lobby_topic();
}
inline const ::std::string& ChatLobbyInfo::lobby_topic() const {
  return *lobby_topic_;
}
inline void ChatLobbyInfo::set_lobby_topic(const ::std::string& value) {
  set_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    lobby_topic_ = new ::std::string;
  }
  lobby_topic_->assign(value);
}
inline void ChatLobbyInfo::set_lobby_topic(const char* value) {
  set_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    lobby_topic_ = new ::std::string;
  }
  lobby_topic_->assign(value);
}
inline void ChatLobbyInfo::set_lobby_topic(const char* value, size_t size) {
  set_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    lobby_topic_ = new ::std::string;
  }
  lobby_topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatLobbyInfo::mutable_lobby_topic() {
  set_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    lobby_topic_ = new ::std::string;
  }
  return lobby_topic_;
}
inline ::std::string* ChatLobbyInfo::release_lobby_topic() {
  clear_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lobby_topic_;
    lobby_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string lobby_name = 3;
inline bool ChatLobbyInfo::has_lobby_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatLobbyInfo::set_has_lobby_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatLobbyInfo::clear_has_lobby_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatLobbyInfo::clear_lobby_name() {
  if (lobby_name_ != &::google::protobuf::internal::kEmptyString) {
    lobby_name_->clear();
  }
  clear_has_lobby_name();
}
inline const ::std::string& ChatLobbyInfo::lobby_name() const {
  return *lobby_name_;
}
inline void ChatLobbyInfo::set_lobby_name(const ::std::string& value) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(value);
}
inline void ChatLobbyInfo::set_lobby_name(const char* value) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(value);
}
inline void ChatLobbyInfo::set_lobby_name(const char* value, size_t size) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatLobbyInfo::mutable_lobby_name() {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    lobby_name_ = new ::std::string;
  }
  return lobby_name_;
}
inline ::std::string* ChatLobbyInfo::release_lobby_name() {
  clear_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lobby_name_;
    lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string lobby_nickname = 4;
inline bool ChatLobbyInfo::has_lobby_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatLobbyInfo::set_has_lobby_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatLobbyInfo::clear_has_lobby_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatLobbyInfo::clear_lobby_nickname() {
  if (lobby_nickname_ != &::google::protobuf::internal::kEmptyString) {
    lobby_nickname_->clear();
  }
  clear_has_lobby_nickname();
}
inline const ::std::string& ChatLobbyInfo::lobby_nickname() const {
  return *lobby_nickname_;
}
inline void ChatLobbyInfo::set_lobby_nickname(const ::std::string& value) {
  set_has_lobby_nickname();
  if (lobby_nickname_ == &::google::protobuf::internal::kEmptyString) {
    lobby_nickname_ = new ::std::string;
  }
  lobby_nickname_->assign(value);
}
inline void ChatLobbyInfo::set_lobby_nickname(const char* value) {
  set_has_lobby_nickname();
  if (lobby_nickname_ == &::google::protobuf::internal::kEmptyString) {
    lobby_nickname_ = new ::std::string;
  }
  lobby_nickname_->assign(value);
}
inline void ChatLobbyInfo::set_lobby_nickname(const char* value, size_t size) {
  set_has_lobby_nickname();
  if (lobby_nickname_ == &::google::protobuf::internal::kEmptyString) {
    lobby_nickname_ = new ::std::string;
  }
  lobby_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatLobbyInfo::mutable_lobby_nickname() {
  set_has_lobby_nickname();
  if (lobby_nickname_ == &::google::protobuf::internal::kEmptyString) {
    lobby_nickname_ = new ::std::string;
  }
  return lobby_nickname_;
}
inline ::std::string* ChatLobbyInfo::release_lobby_nickname() {
  clear_has_lobby_nickname();
  if (lobby_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lobby_nickname_;
    lobby_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 5;
inline bool ChatLobbyInfo::has_privacy_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatLobbyInfo::set_has_privacy_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatLobbyInfo::clear_has_privacy_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatLobbyInfo::clear_privacy_level() {
  privacy_level_ = 1;
  clear_has_privacy_level();
}
inline rsctrl::chat::LobbyPrivacyLevel ChatLobbyInfo::privacy_level() const {
  return static_cast< rsctrl::chat::LobbyPrivacyLevel >(privacy_level_);
}
inline void ChatLobbyInfo::set_privacy_level(rsctrl::chat::LobbyPrivacyLevel value) {
  GOOGLE_DCHECK(rsctrl::chat::LobbyPrivacyLevel_IsValid(value));
  set_has_privacy_level();
  privacy_level_ = value;
}

// required .rsctrl.chat.ChatLobbyInfo.LobbyState lobby_state = 6;
inline bool ChatLobbyInfo::has_lobby_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatLobbyInfo::set_has_lobby_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatLobbyInfo::clear_has_lobby_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatLobbyInfo::clear_lobby_state() {
  lobby_state_ = 1;
  clear_has_lobby_state();
}
inline ::rsctrl::chat::ChatLobbyInfo_LobbyState ChatLobbyInfo::lobby_state() const {
  return static_cast< ::rsctrl::chat::ChatLobbyInfo_LobbyState >(lobby_state_);
}
inline void ChatLobbyInfo::set_lobby_state(::rsctrl::chat::ChatLobbyInfo_LobbyState value) {
  GOOGLE_DCHECK(::rsctrl::chat::ChatLobbyInfo_LobbyState_IsValid(value));
  set_has_lobby_state();
  lobby_state_ = value;
}

// required uint32 no_peers = 7;
inline bool ChatLobbyInfo::has_no_peers() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatLobbyInfo::set_has_no_peers() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatLobbyInfo::clear_has_no_peers() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatLobbyInfo::clear_no_peers() {
  no_peers_ = 0u;
  clear_has_no_peers();
}
inline ::google::protobuf::uint32 ChatLobbyInfo::no_peers() const {
  return no_peers_;
}
inline void ChatLobbyInfo::set_no_peers(::google::protobuf::uint32 value) {
  set_has_no_peers();
  no_peers_ = value;
}

// required uint32 last_report_time = 8;
inline bool ChatLobbyInfo::has_last_report_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatLobbyInfo::set_has_last_report_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatLobbyInfo::clear_has_last_report_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatLobbyInfo::clear_last_report_time() {
  last_report_time_ = 0u;
  clear_has_last_report_time();
}
inline ::google::protobuf::uint32 ChatLobbyInfo::last_report_time() const {
  return last_report_time_;
}
inline void ChatLobbyInfo::set_last_report_time(::google::protobuf::uint32 value) {
  set_has_last_report_time();
  last_report_time_ = value;
}

// required uint32 last_activity = 9;
inline bool ChatLobbyInfo::has_last_activity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatLobbyInfo::set_has_last_activity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatLobbyInfo::clear_has_last_activity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatLobbyInfo::clear_last_activity() {
  last_activity_ = 0u;
  clear_has_last_activity();
}
inline ::google::protobuf::uint32 ChatLobbyInfo::last_activity() const {
  return last_activity_;
}
inline void ChatLobbyInfo::set_last_activity(::google::protobuf::uint32 value) {
  set_has_last_activity();
  last_activity_ = value;
}

// repeated string participating_friends = 10;
inline int ChatLobbyInfo::participating_friends_size() const {
  return participating_friends_.size();
}
inline void ChatLobbyInfo::clear_participating_friends() {
  participating_friends_.Clear();
}
inline const ::std::string& ChatLobbyInfo::participating_friends(int index) const {
  return participating_friends_.Get(index);
}
inline ::std::string* ChatLobbyInfo::mutable_participating_friends(int index) {
  return participating_friends_.Mutable(index);
}
inline void ChatLobbyInfo::set_participating_friends(int index, const ::std::string& value) {
  participating_friends_.Mutable(index)->assign(value);
}
inline void ChatLobbyInfo::set_participating_friends(int index, const char* value) {
  participating_friends_.Mutable(index)->assign(value);
}
inline void ChatLobbyInfo::set_participating_friends(int index, const char* value, size_t size) {
  participating_friends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatLobbyInfo::add_participating_friends() {
  return participating_friends_.Add();
}
inline void ChatLobbyInfo::add_participating_friends(const ::std::string& value) {
  participating_friends_.Add()->assign(value);
}
inline void ChatLobbyInfo::add_participating_friends(const char* value) {
  participating_friends_.Add()->assign(value);
}
inline void ChatLobbyInfo::add_participating_friends(const char* value, size_t size) {
  participating_friends_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatLobbyInfo::participating_friends() const {
  return participating_friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatLobbyInfo::mutable_participating_friends() {
  return &participating_friends_;
}

// repeated string nicknames = 11;
inline int ChatLobbyInfo::nicknames_size() const {
  return nicknames_.size();
}
inline void ChatLobbyInfo::clear_nicknames() {
  nicknames_.Clear();
}
inline const ::std::string& ChatLobbyInfo::nicknames(int index) const {
  return nicknames_.Get(index);
}
inline ::std::string* ChatLobbyInfo::mutable_nicknames(int index) {
  return nicknames_.Mutable(index);
}
inline void ChatLobbyInfo::set_nicknames(int index, const ::std::string& value) {
  nicknames_.Mutable(index)->assign(value);
}
inline void ChatLobbyInfo::set_nicknames(int index, const char* value) {
  nicknames_.Mutable(index)->assign(value);
}
inline void ChatLobbyInfo::set_nicknames(int index, const char* value, size_t size) {
  nicknames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatLobbyInfo::add_nicknames() {
  return nicknames_.Add();
}
inline void ChatLobbyInfo::add_nicknames(const ::std::string& value) {
  nicknames_.Add()->assign(value);
}
inline void ChatLobbyInfo::add_nicknames(const char* value) {
  nicknames_.Add()->assign(value);
}
inline void ChatLobbyInfo::add_nicknames(const char* value, size_t size) {
  nicknames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatLobbyInfo::nicknames() const {
  return nicknames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatLobbyInfo::mutable_nicknames() {
  return &nicknames_;
}

// -------------------------------------------------------------------

// ChatId

// required .rsctrl.chat.ChatType chat_type = 1;
inline bool ChatId::has_chat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatId::set_has_chat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatId::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatId::clear_chat_type() {
  chat_type_ = 1;
  clear_has_chat_type();
}
inline rsctrl::chat::ChatType ChatId::chat_type() const {
  return static_cast< rsctrl::chat::ChatType >(chat_type_);
}
inline void ChatId::set_chat_type(rsctrl::chat::ChatType value) {
  GOOGLE_DCHECK(rsctrl::chat::ChatType_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
}

// required string chat_id = 2;
inline bool ChatId::has_chat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatId::set_has_chat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatId::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatId::clear_chat_id() {
  if (chat_id_ != &::google::protobuf::internal::kEmptyString) {
    chat_id_->clear();
  }
  clear_has_chat_id();
}
inline const ::std::string& ChatId::chat_id() const {
  return *chat_id_;
}
inline void ChatId::set_chat_id(const ::std::string& value) {
  set_has_chat_id();
  if (chat_id_ == &::google::protobuf::internal::kEmptyString) {
    chat_id_ = new ::std::string;
  }
  chat_id_->assign(value);
}
inline void ChatId::set_chat_id(const char* value) {
  set_has_chat_id();
  if (chat_id_ == &::google::protobuf::internal::kEmptyString) {
    chat_id_ = new ::std::string;
  }
  chat_id_->assign(value);
}
inline void ChatId::set_chat_id(const char* value, size_t size) {
  set_has_chat_id();
  if (chat_id_ == &::google::protobuf::internal::kEmptyString) {
    chat_id_ = new ::std::string;
  }
  chat_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatId::mutable_chat_id() {
  set_has_chat_id();
  if (chat_id_ == &::google::protobuf::internal::kEmptyString) {
    chat_id_ = new ::std::string;
  }
  return chat_id_;
}
inline ::std::string* ChatId::release_chat_id() {
  clear_has_chat_id();
  if (chat_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_id_;
    chat_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ChatMessage

// required .rsctrl.chat.ChatId id = 1;
inline bool ChatMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_id() {
  if (id_ != NULL) id_->::rsctrl::chat::ChatId::Clear();
  clear_has_id();
}
inline const ::rsctrl::chat::ChatId& ChatMessage::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::rsctrl::chat::ChatId* ChatMessage::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::rsctrl::chat::ChatId;
  return id_;
}
inline ::rsctrl::chat::ChatId* ChatMessage::release_id() {
  clear_has_id();
  ::rsctrl::chat::ChatId* temp = id_;
  id_ = NULL;
  return temp;
}

// required string msg = 2;
inline bool ChatMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ChatMessage::msg() const {
  return *msg_;
}
inline void ChatMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ChatMessage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ChatMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* ChatMessage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string peer_nickname = 3;
inline bool ChatMessage::has_peer_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_peer_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_peer_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_peer_nickname() {
  if (peer_nickname_ != &::google::protobuf::internal::kEmptyString) {
    peer_nickname_->clear();
  }
  clear_has_peer_nickname();
}
inline const ::std::string& ChatMessage::peer_nickname() const {
  return *peer_nickname_;
}
inline void ChatMessage::set_peer_nickname(const ::std::string& value) {
  set_has_peer_nickname();
  if (peer_nickname_ == &::google::protobuf::internal::kEmptyString) {
    peer_nickname_ = new ::std::string;
  }
  peer_nickname_->assign(value);
}
inline void ChatMessage::set_peer_nickname(const char* value) {
  set_has_peer_nickname();
  if (peer_nickname_ == &::google::protobuf::internal::kEmptyString) {
    peer_nickname_ = new ::std::string;
  }
  peer_nickname_->assign(value);
}
inline void ChatMessage::set_peer_nickname(const char* value, size_t size) {
  set_has_peer_nickname();
  if (peer_nickname_ == &::google::protobuf::internal::kEmptyString) {
    peer_nickname_ = new ::std::string;
  }
  peer_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_peer_nickname() {
  set_has_peer_nickname();
  if (peer_nickname_ == &::google::protobuf::internal::kEmptyString) {
    peer_nickname_ = new ::std::string;
  }
  return peer_nickname_;
}
inline ::std::string* ChatMessage::release_peer_nickname() {
  clear_has_peer_nickname();
  if (peer_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_nickname_;
    peer_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 chat_flags = 4;
inline bool ChatMessage::has_chat_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_chat_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_chat_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_chat_flags() {
  chat_flags_ = 0u;
  clear_has_chat_flags();
}
inline ::google::protobuf::uint32 ChatMessage::chat_flags() const {
  return chat_flags_;
}
inline void ChatMessage::set_chat_flags(::google::protobuf::uint32 value) {
  set_has_chat_flags();
  chat_flags_ = value;
}

// optional uint32 send_time = 5;
inline bool ChatMessage::has_send_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatMessage::set_has_send_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatMessage::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatMessage::clear_send_time() {
  send_time_ = 0u;
  clear_has_send_time();
}
inline ::google::protobuf::uint32 ChatMessage::send_time() const {
  return send_time_;
}
inline void ChatMessage::set_send_time(::google::protobuf::uint32 value) {
  set_has_send_time();
  send_time_ = value;
}

// optional uint32 recv_time = 6;
inline bool ChatMessage::has_recv_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatMessage::set_has_recv_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatMessage::clear_has_recv_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatMessage::clear_recv_time() {
  recv_time_ = 0u;
  clear_has_recv_time();
}
inline ::google::protobuf::uint32 ChatMessage::recv_time() const {
  return recv_time_;
}
inline void ChatMessage::set_recv_time(::google::protobuf::uint32 value) {
  set_has_recv_time();
  recv_time_ = value;
}

// -------------------------------------------------------------------

// ResponseChatLobbies

// required .rsctrl.core.Status status = 1;
inline bool ResponseChatLobbies::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseChatLobbies::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseChatLobbies::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseChatLobbies::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseChatLobbies::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseChatLobbies::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseChatLobbies::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// repeated .rsctrl.chat.ChatLobbyInfo lobbies = 2;
inline int ResponseChatLobbies::lobbies_size() const {
  return lobbies_.size();
}
inline void ResponseChatLobbies::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::rsctrl::chat::ChatLobbyInfo& ResponseChatLobbies::lobbies(int index) const {
  return lobbies_.Get(index);
}
inline ::rsctrl::chat::ChatLobbyInfo* ResponseChatLobbies::mutable_lobbies(int index) {
  return lobbies_.Mutable(index);
}
inline ::rsctrl::chat::ChatLobbyInfo* ResponseChatLobbies::add_lobbies() {
  return lobbies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatLobbyInfo >&
ResponseChatLobbies::lobbies() const {
  return lobbies_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatLobbyInfo >*
ResponseChatLobbies::mutable_lobbies() {
  return &lobbies_;
}

// -------------------------------------------------------------------

// RequestChatLobbies

// required .rsctrl.chat.RequestChatLobbies.LobbySet lobby_set = 1;
inline bool RequestChatLobbies::has_lobby_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestChatLobbies::set_has_lobby_set() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestChatLobbies::clear_has_lobby_set() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestChatLobbies::clear_lobby_set() {
  lobby_set_ = 1;
  clear_has_lobby_set();
}
inline ::rsctrl::chat::RequestChatLobbies_LobbySet RequestChatLobbies::lobby_set() const {
  return static_cast< ::rsctrl::chat::RequestChatLobbies_LobbySet >(lobby_set_);
}
inline void RequestChatLobbies::set_lobby_set(::rsctrl::chat::RequestChatLobbies_LobbySet value) {
  GOOGLE_DCHECK(::rsctrl::chat::RequestChatLobbies_LobbySet_IsValid(value));
  set_has_lobby_set();
  lobby_set_ = value;
}

// -------------------------------------------------------------------

// RequestCreateLobby

// required string lobby_name = 1;
inline bool RequestCreateLobby::has_lobby_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestCreateLobby::set_has_lobby_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestCreateLobby::clear_has_lobby_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestCreateLobby::clear_lobby_name() {
  if (lobby_name_ != &::google::protobuf::internal::kEmptyString) {
    lobby_name_->clear();
  }
  clear_has_lobby_name();
}
inline const ::std::string& RequestCreateLobby::lobby_name() const {
  return *lobby_name_;
}
inline void RequestCreateLobby::set_lobby_name(const ::std::string& value) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(value);
}
inline void RequestCreateLobby::set_lobby_name(const char* value) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(value);
}
inline void RequestCreateLobby::set_lobby_name(const char* value, size_t size) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestCreateLobby::mutable_lobby_name() {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    lobby_name_ = new ::std::string;
  }
  return lobby_name_;
}
inline ::std::string* RequestCreateLobby::release_lobby_name() {
  clear_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lobby_name_;
    lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string lobby_topic = 2;
inline bool RequestCreateLobby::has_lobby_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestCreateLobby::set_has_lobby_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestCreateLobby::clear_has_lobby_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestCreateLobby::clear_lobby_topic() {
  if (lobby_topic_ != &::google::protobuf::internal::kEmptyString) {
    lobby_topic_->clear();
  }
  clear_has_lobby_topic();
}
inline const ::std::string& RequestCreateLobby::lobby_topic() const {
  return *lobby_topic_;
}
inline void RequestCreateLobby::set_lobby_topic(const ::std::string& value) {
  set_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    lobby_topic_ = new ::std::string;
  }
  lobby_topic_->assign(value);
}
inline void RequestCreateLobby::set_lobby_topic(const char* value) {
  set_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    lobby_topic_ = new ::std::string;
  }
  lobby_topic_->assign(value);
}
inline void RequestCreateLobby::set_lobby_topic(const char* value, size_t size) {
  set_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    lobby_topic_ = new ::std::string;
  }
  lobby_topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestCreateLobby::mutable_lobby_topic() {
  set_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    lobby_topic_ = new ::std::string;
  }
  return lobby_topic_;
}
inline ::std::string* RequestCreateLobby::release_lobby_topic() {
  clear_has_lobby_topic();
  if (lobby_topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lobby_topic_;
    lobby_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 4;
inline bool RequestCreateLobby::has_privacy_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestCreateLobby::set_has_privacy_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestCreateLobby::clear_has_privacy_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestCreateLobby::clear_privacy_level() {
  privacy_level_ = 1;
  clear_has_privacy_level();
}
inline rsctrl::chat::LobbyPrivacyLevel RequestCreateLobby::privacy_level() const {
  return static_cast< rsctrl::chat::LobbyPrivacyLevel >(privacy_level_);
}
inline void RequestCreateLobby::set_privacy_level(rsctrl::chat::LobbyPrivacyLevel value) {
  GOOGLE_DCHECK(rsctrl::chat::LobbyPrivacyLevel_IsValid(value));
  set_has_privacy_level();
  privacy_level_ = value;
}

// repeated string invited_friends = 3;
inline int RequestCreateLobby::invited_friends_size() const {
  return invited_friends_.size();
}
inline void RequestCreateLobby::clear_invited_friends() {
  invited_friends_.Clear();
}
inline const ::std::string& RequestCreateLobby::invited_friends(int index) const {
  return invited_friends_.Get(index);
}
inline ::std::string* RequestCreateLobby::mutable_invited_friends(int index) {
  return invited_friends_.Mutable(index);
}
inline void RequestCreateLobby::set_invited_friends(int index, const ::std::string& value) {
  invited_friends_.Mutable(index)->assign(value);
}
inline void RequestCreateLobby::set_invited_friends(int index, const char* value) {
  invited_friends_.Mutable(index)->assign(value);
}
inline void RequestCreateLobby::set_invited_friends(int index, const char* value, size_t size) {
  invited_friends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestCreateLobby::add_invited_friends() {
  return invited_friends_.Add();
}
inline void RequestCreateLobby::add_invited_friends(const ::std::string& value) {
  invited_friends_.Add()->assign(value);
}
inline void RequestCreateLobby::add_invited_friends(const char* value) {
  invited_friends_.Add()->assign(value);
}
inline void RequestCreateLobby::add_invited_friends(const char* value, size_t size) {
  invited_friends_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestCreateLobby::invited_friends() const {
  return invited_friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestCreateLobby::mutable_invited_friends() {
  return &invited_friends_;
}

// -------------------------------------------------------------------

// RequestJoinOrLeaveLobby

// required string lobby_id = 1;
inline bool RequestJoinOrLeaveLobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestJoinOrLeaveLobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestJoinOrLeaveLobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestJoinOrLeaveLobby::clear_lobby_id() {
  if (lobby_id_ != &::google::protobuf::internal::kEmptyString) {
    lobby_id_->clear();
  }
  clear_has_lobby_id();
}
inline const ::std::string& RequestJoinOrLeaveLobby::lobby_id() const {
  return *lobby_id_;
}
inline void RequestJoinOrLeaveLobby::set_lobby_id(const ::std::string& value) {
  set_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    lobby_id_ = new ::std::string;
  }
  lobby_id_->assign(value);
}
inline void RequestJoinOrLeaveLobby::set_lobby_id(const char* value) {
  set_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    lobby_id_ = new ::std::string;
  }
  lobby_id_->assign(value);
}
inline void RequestJoinOrLeaveLobby::set_lobby_id(const char* value, size_t size) {
  set_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    lobby_id_ = new ::std::string;
  }
  lobby_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestJoinOrLeaveLobby::mutable_lobby_id() {
  set_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    lobby_id_ = new ::std::string;
  }
  return lobby_id_;
}
inline ::std::string* RequestJoinOrLeaveLobby::release_lobby_id() {
  clear_has_lobby_id();
  if (lobby_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lobby_id_;
    lobby_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .rsctrl.chat.RequestJoinOrLeaveLobby.LobbyAction action = 2;
inline bool RequestJoinOrLeaveLobby::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestJoinOrLeaveLobby::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestJoinOrLeaveLobby::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestJoinOrLeaveLobby::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction RequestJoinOrLeaveLobby::action() const {
  return static_cast< ::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction >(action_);
}
inline void RequestJoinOrLeaveLobby::set_action(::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction value) {
  GOOGLE_DCHECK(::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction_IsValid(value));
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// RequestSetLobbyNickname

// required string nickname = 1;
inline bool RequestSetLobbyNickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestSetLobbyNickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestSetLobbyNickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestSetLobbyNickname::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RequestSetLobbyNickname::nickname() const {
  return *nickname_;
}
inline void RequestSetLobbyNickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RequestSetLobbyNickname::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RequestSetLobbyNickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestSetLobbyNickname::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* RequestSetLobbyNickname::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string lobby_ids = 2;
inline int RequestSetLobbyNickname::lobby_ids_size() const {
  return lobby_ids_.size();
}
inline void RequestSetLobbyNickname::clear_lobby_ids() {
  lobby_ids_.Clear();
}
inline const ::std::string& RequestSetLobbyNickname::lobby_ids(int index) const {
  return lobby_ids_.Get(index);
}
inline ::std::string* RequestSetLobbyNickname::mutable_lobby_ids(int index) {
  return lobby_ids_.Mutable(index);
}
inline void RequestSetLobbyNickname::set_lobby_ids(int index, const ::std::string& value) {
  lobby_ids_.Mutable(index)->assign(value);
}
inline void RequestSetLobbyNickname::set_lobby_ids(int index, const char* value) {
  lobby_ids_.Mutable(index)->assign(value);
}
inline void RequestSetLobbyNickname::set_lobby_ids(int index, const char* value, size_t size) {
  lobby_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestSetLobbyNickname::add_lobby_ids() {
  return lobby_ids_.Add();
}
inline void RequestSetLobbyNickname::add_lobby_ids(const ::std::string& value) {
  lobby_ids_.Add()->assign(value);
}
inline void RequestSetLobbyNickname::add_lobby_ids(const char* value) {
  lobby_ids_.Add()->assign(value);
}
inline void RequestSetLobbyNickname::add_lobby_ids(const char* value, size_t size) {
  lobby_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestSetLobbyNickname::lobby_ids() const {
  return lobby_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestSetLobbyNickname::mutable_lobby_ids() {
  return &lobby_ids_;
}

// -------------------------------------------------------------------

// ResponseSetLobbyNickname

// required .rsctrl.core.Status status = 1;
inline bool ResponseSetLobbyNickname::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseSetLobbyNickname::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseSetLobbyNickname::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseSetLobbyNickname::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseSetLobbyNickname::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseSetLobbyNickname::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseSetLobbyNickname::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RequestRegisterEvents

// required .rsctrl.chat.RequestRegisterEvents.RegisterAction action = 1;
inline bool RequestRegisterEvents::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestRegisterEvents::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestRegisterEvents::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestRegisterEvents::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::rsctrl::chat::RequestRegisterEvents_RegisterAction RequestRegisterEvents::action() const {
  return static_cast< ::rsctrl::chat::RequestRegisterEvents_RegisterAction >(action_);
}
inline void RequestRegisterEvents::set_action(::rsctrl::chat::RequestRegisterEvents_RegisterAction value) {
  GOOGLE_DCHECK(::rsctrl::chat::RequestRegisterEvents_RegisterAction_IsValid(value));
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// ResponseRegisterEvents

// required .rsctrl.core.Status status = 1;
inline bool ResponseRegisterEvents::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseRegisterEvents::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseRegisterEvents::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseRegisterEvents::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseRegisterEvents::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseRegisterEvents::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseRegisterEvents::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// EventLobbyInvite

// required .rsctrl.chat.ChatLobbyInfo lobby = 1;
inline bool EventLobbyInvite::has_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventLobbyInvite::set_has_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventLobbyInvite::clear_has_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventLobbyInvite::clear_lobby() {
  if (lobby_ != NULL) lobby_->::rsctrl::chat::ChatLobbyInfo::Clear();
  clear_has_lobby();
}
inline const ::rsctrl::chat::ChatLobbyInfo& EventLobbyInvite::lobby() const {
  return lobby_ != NULL ? *lobby_ : *default_instance_->lobby_;
}
inline ::rsctrl::chat::ChatLobbyInfo* EventLobbyInvite::mutable_lobby() {
  set_has_lobby();
  if (lobby_ == NULL) lobby_ = new ::rsctrl::chat::ChatLobbyInfo;
  return lobby_;
}
inline ::rsctrl::chat::ChatLobbyInfo* EventLobbyInvite::release_lobby() {
  clear_has_lobby();
  ::rsctrl::chat::ChatLobbyInfo* temp = lobby_;
  lobby_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// EventChatMessage

// required .rsctrl.chat.ChatMessage msg = 1;
inline bool EventChatMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventChatMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventChatMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventChatMessage::clear_msg() {
  if (msg_ != NULL) msg_->::rsctrl::chat::ChatMessage::Clear();
  clear_has_msg();
}
inline const ::rsctrl::chat::ChatMessage& EventChatMessage::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::rsctrl::chat::ChatMessage* EventChatMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::rsctrl::chat::ChatMessage;
  return msg_;
}
inline ::rsctrl::chat::ChatMessage* EventChatMessage::release_msg() {
  clear_has_msg();
  ::rsctrl::chat::ChatMessage* temp = msg_;
  msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RequestSendMessage

// required .rsctrl.chat.ChatMessage msg = 1;
inline bool RequestSendMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestSendMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestSendMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestSendMessage::clear_msg() {
  if (msg_ != NULL) msg_->::rsctrl::chat::ChatMessage::Clear();
  clear_has_msg();
}
inline const ::rsctrl::chat::ChatMessage& RequestSendMessage::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::rsctrl::chat::ChatMessage* RequestSendMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::rsctrl::chat::ChatMessage;
  return msg_;
}
inline ::rsctrl::chat::ChatMessage* RequestSendMessage::release_msg() {
  clear_has_msg();
  ::rsctrl::chat::ChatMessage* temp = msg_;
  msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ResponseSendMessage

// required .rsctrl.core.Status status = 1;
inline bool ResponseSendMessage::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseSendMessage::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseSendMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseSendMessage::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseSendMessage::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseSendMessage::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseSendMessage::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RequestChatHistory

// required .rsctrl.chat.ChatId id = 1;
inline bool RequestChatHistory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestChatHistory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestChatHistory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestChatHistory::clear_id() {
  if (id_ != NULL) id_->::rsctrl::chat::ChatId::Clear();
  clear_has_id();
}
inline const ::rsctrl::chat::ChatId& RequestChatHistory::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::rsctrl::chat::ChatId* RequestChatHistory::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::rsctrl::chat::ChatId;
  return id_;
}
inline ::rsctrl::chat::ChatId* RequestChatHistory::release_id() {
  clear_has_id();
  ::rsctrl::chat::ChatId* temp = id_;
  id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ResponseChatHistory

// required .rsctrl.core.Status status = 1;
inline bool ResponseChatHistory::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseChatHistory::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseChatHistory::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseChatHistory::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseChatHistory::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseChatHistory::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseChatHistory::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// required .rsctrl.chat.ChatId id = 2;
inline bool ResponseChatHistory::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseChatHistory::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseChatHistory::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseChatHistory::clear_id() {
  if (id_ != NULL) id_->::rsctrl::chat::ChatId::Clear();
  clear_has_id();
}
inline const ::rsctrl::chat::ChatId& ResponseChatHistory::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::rsctrl::chat::ChatId* ResponseChatHistory::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::rsctrl::chat::ChatId;
  return id_;
}
inline ::rsctrl::chat::ChatId* ResponseChatHistory::release_id() {
  clear_has_id();
  ::rsctrl::chat::ChatId* temp = id_;
  id_ = NULL;
  return temp;
}

// repeated .rsctrl.chat.ChatMessage msgs = 3;
inline int ResponseChatHistory::msgs_size() const {
  return msgs_.size();
}
inline void ResponseChatHistory::clear_msgs() {
  msgs_.Clear();
}
inline const ::rsctrl::chat::ChatMessage& ResponseChatHistory::msgs(int index) const {
  return msgs_.Get(index);
}
inline ::rsctrl::chat::ChatMessage* ResponseChatHistory::mutable_msgs(int index) {
  return msgs_.Mutable(index);
}
inline ::rsctrl::chat::ChatMessage* ResponseChatHistory::add_msgs() {
  return msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatMessage >&
ResponseChatHistory::msgs() const {
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::chat::ChatMessage >*
ResponseChatHistory::mutable_msgs() {
  return &msgs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace rsctrl

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::chat::ChatLobbyInfo_LobbyState>() {
  return ::rsctrl::chat::ChatLobbyInfo_LobbyState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::chat::RequestChatLobbies_LobbySet>() {
  return ::rsctrl::chat::RequestChatLobbies_LobbySet_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction>() {
  return ::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::chat::RequestRegisterEvents_RegisterAction>() {
  return ::rsctrl::chat::RequestRegisterEvents_RegisterAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::chat::RequestMsgIds>() {
  return rsctrl::chat::RequestMsgIds_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::chat::ResponseMsgIds>() {
  return rsctrl::chat::ResponseMsgIds_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::chat::LobbyPrivacyLevel>() {
  return rsctrl::chat::LobbyPrivacyLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::chat::ChatType>() {
  return rsctrl::chat::ChatType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
