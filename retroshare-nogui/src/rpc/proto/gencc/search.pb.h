// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef PROTOBUF_search_2eproto__INCLUDED
#define PROTOBUF_search_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "core.pb.h"
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace search {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_search_2eproto();
void protobuf_AssignDesc_search_2eproto();
void protobuf_ShutdownFile_search_2eproto();

class SearchHit;
class SearchSet;
class RequestBasicSearch;
class RequestAdvSearch;
class ResponseSearchIds;
class RequestCloseSearch;
class RequestListSearches;
class RequestSearchResults;
class ResponseSearchResults;

enum SearchHit_LocFlag {
  SearchHit_LocFlag_LOCAL = 1,
  SearchHit_LocFlag_FRIEND = 2,
  SearchHit_LocFlag_NETWORK = 4
};
bool SearchHit_LocFlag_IsValid(int value);
const SearchHit_LocFlag SearchHit_LocFlag_LocFlag_MIN = SearchHit_LocFlag_LOCAL;
const SearchHit_LocFlag SearchHit_LocFlag_LocFlag_MAX = SearchHit_LocFlag_NETWORK;
const int SearchHit_LocFlag_LocFlag_ARRAYSIZE = SearchHit_LocFlag_LocFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* SearchHit_LocFlag_descriptor();
inline const ::std::string& SearchHit_LocFlag_Name(SearchHit_LocFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    SearchHit_LocFlag_descriptor(), value);
}
inline bool SearchHit_LocFlag_Parse(
    const ::std::string& name, SearchHit_LocFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SearchHit_LocFlag>(
    SearchHit_LocFlag_descriptor(), name, value);
}
enum RequestMsgIds {
  MsgId_RequestBasicSearch = 1,
  MsgId_RequestCloseSearch = 3,
  MsgId_RequestListSearches = 4,
  MsgId_RequestSearchResults = 5
};
bool RequestMsgIds_IsValid(int value);
const RequestMsgIds RequestMsgIds_MIN = MsgId_RequestBasicSearch;
const RequestMsgIds RequestMsgIds_MAX = MsgId_RequestSearchResults;
const int RequestMsgIds_ARRAYSIZE = RequestMsgIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor();
inline const ::std::string& RequestMsgIds_Name(RequestMsgIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestMsgIds_descriptor(), value);
}
inline bool RequestMsgIds_Parse(
    const ::std::string& name, RequestMsgIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestMsgIds>(
    RequestMsgIds_descriptor(), name, value);
}
enum ResponseMsgIds {
  MsgId_ResponseSearchIds = 1,
  MsgId_ResponseSearchResults = 5
};
bool ResponseMsgIds_IsValid(int value);
const ResponseMsgIds ResponseMsgIds_MIN = MsgId_ResponseSearchIds;
const ResponseMsgIds ResponseMsgIds_MAX = MsgId_ResponseSearchResults;
const int ResponseMsgIds_ARRAYSIZE = ResponseMsgIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor();
inline const ::std::string& ResponseMsgIds_Name(ResponseMsgIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseMsgIds_descriptor(), value);
}
inline bool ResponseMsgIds_Parse(
    const ::std::string& name, ResponseMsgIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseMsgIds>(
    ResponseMsgIds_descriptor(), name, value);
}
// ===================================================================

class SearchHit : public ::google::protobuf::Message {
 public:
  SearchHit();
  virtual ~SearchHit();
  
  SearchHit(const SearchHit& from);
  
  inline SearchHit& operator=(const SearchHit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchHit& default_instance();
  
  void Swap(SearchHit* other);
  
  // implements Message ----------------------------------------------
  
  SearchHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchHit& from);
  void MergeFrom(const SearchHit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SearchHit_LocFlag LocFlag;
  static const LocFlag LOCAL = SearchHit_LocFlag_LOCAL;
  static const LocFlag FRIEND = SearchHit_LocFlag_FRIEND;
  static const LocFlag NETWORK = SearchHit_LocFlag_NETWORK;
  static inline bool LocFlag_IsValid(int value) {
    return SearchHit_LocFlag_IsValid(value);
  }
  static const LocFlag LocFlag_MIN =
    SearchHit_LocFlag_LocFlag_MIN;
  static const LocFlag LocFlag_MAX =
    SearchHit_LocFlag_LocFlag_MAX;
  static const int LocFlag_ARRAYSIZE =
    SearchHit_LocFlag_LocFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LocFlag_descriptor() {
    return SearchHit_LocFlag_descriptor();
  }
  static inline const ::std::string& LocFlag_Name(LocFlag value) {
    return SearchHit_LocFlag_Name(value);
  }
  static inline bool LocFlag_Parse(const ::std::string& name,
      LocFlag* value) {
    return SearchHit_LocFlag_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.File file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::rsctrl::core::File& file() const;
  inline ::rsctrl::core::File* mutable_file();
  inline ::rsctrl::core::File* release_file();
  
  // required uint32 loc = 2;
  inline bool has_loc() const;
  inline void clear_loc();
  static const int kLocFieldNumber = 2;
  inline ::google::protobuf::uint32 loc() const;
  inline void set_loc(::google::protobuf::uint32 value);
  
  // required uint32 no_hits = 3;
  inline bool has_no_hits() const;
  inline void clear_no_hits();
  static const int kNoHitsFieldNumber = 3;
  inline ::google::protobuf::uint32 no_hits() const;
  inline void set_no_hits(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.SearchHit)
 private:
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_loc();
  inline void clear_has_loc();
  inline void set_has_no_hits();
  inline void clear_has_no_hits();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::File* file_;
  ::google::protobuf::uint32 loc_;
  ::google::protobuf::uint32 no_hits_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static SearchHit* default_instance_;
};
// -------------------------------------------------------------------

class SearchSet : public ::google::protobuf::Message {
 public:
  SearchSet();
  virtual ~SearchSet();
  
  SearchSet(const SearchSet& from);
  
  inline SearchSet& operator=(const SearchSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchSet& default_instance();
  
  void Swap(SearchSet* other);
  
  // implements Message ----------------------------------------------
  
  SearchSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchSet& from);
  void MergeFrom(const SearchSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 search_id = 1;
  inline bool has_search_id() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 1;
  inline ::google::protobuf::uint32 search_id() const;
  inline void set_search_id(::google::protobuf::uint32 value);
  
  // repeated .rsctrl.search.SearchHit hits = 2;
  inline int hits_size() const;
  inline void clear_hits();
  static const int kHitsFieldNumber = 2;
  inline const ::rsctrl::search::SearchHit& hits(int index) const;
  inline ::rsctrl::search::SearchHit* mutable_hits(int index);
  inline ::rsctrl::search::SearchHit* add_hits();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchHit >&
      hits() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchHit >*
      mutable_hits();
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.SearchSet)
 private:
  inline void set_has_search_id();
  inline void clear_has_search_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchHit > hits_;
  ::google::protobuf::uint32 search_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static SearchSet* default_instance_;
};
// -------------------------------------------------------------------

class RequestBasicSearch : public ::google::protobuf::Message {
 public:
  RequestBasicSearch();
  virtual ~RequestBasicSearch();
  
  RequestBasicSearch(const RequestBasicSearch& from);
  
  inline RequestBasicSearch& operator=(const RequestBasicSearch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestBasicSearch& default_instance();
  
  void Swap(RequestBasicSearch* other);
  
  // implements Message ----------------------------------------------
  
  RequestBasicSearch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestBasicSearch& from);
  void MergeFrom(const RequestBasicSearch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string terms = 1;
  inline int terms_size() const;
  inline void clear_terms();
  static const int kTermsFieldNumber = 1;
  inline const ::std::string& terms(int index) const;
  inline ::std::string* mutable_terms(int index);
  inline void set_terms(int index, const ::std::string& value);
  inline void set_terms(int index, const char* value);
  inline void set_terms(int index, const char* value, size_t size);
  inline ::std::string* add_terms();
  inline void add_terms(const ::std::string& value);
  inline void add_terms(const char* value);
  inline void add_terms(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& terms() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_terms();
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.RequestBasicSearch)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> terms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static RequestBasicSearch* default_instance_;
};
// -------------------------------------------------------------------

class RequestAdvSearch : public ::google::protobuf::Message {
 public:
  RequestAdvSearch();
  virtual ~RequestAdvSearch();
  
  RequestAdvSearch(const RequestAdvSearch& from);
  
  inline RequestAdvSearch& operator=(const RequestAdvSearch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestAdvSearch& default_instance();
  
  void Swap(RequestAdvSearch* other);
  
  // implements Message ----------------------------------------------
  
  RequestAdvSearch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestAdvSearch& from);
  void MergeFrom(const RequestAdvSearch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string terms = 1;
  inline int terms_size() const;
  inline void clear_terms();
  static const int kTermsFieldNumber = 1;
  inline const ::std::string& terms(int index) const;
  inline ::std::string* mutable_terms(int index);
  inline void set_terms(int index, const ::std::string& value);
  inline void set_terms(int index, const char* value);
  inline void set_terms(int index, const char* value, size_t size);
  inline ::std::string* add_terms();
  inline void add_terms(const ::std::string& value);
  inline void add_terms(const char* value);
  inline void add_terms(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& terms() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_terms();
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.RequestAdvSearch)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> terms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static RequestAdvSearch* default_instance_;
};
// -------------------------------------------------------------------

class ResponseSearchIds : public ::google::protobuf::Message {
 public:
  ResponseSearchIds();
  virtual ~ResponseSearchIds();
  
  ResponseSearchIds(const ResponseSearchIds& from);
  
  inline ResponseSearchIds& operator=(const ResponseSearchIds& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseSearchIds& default_instance();
  
  void Swap(ResponseSearchIds* other);
  
  // implements Message ----------------------------------------------
  
  ResponseSearchIds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseSearchIds& from);
  void MergeFrom(const ResponseSearchIds& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // repeated uint32 search_id = 2;
  inline int search_id_size() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 2;
  inline ::google::protobuf::uint32 search_id(int index) const;
  inline void set_search_id(int index, ::google::protobuf::uint32 value);
  inline void add_search_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      search_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_search_id();
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.ResponseSearchIds)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > search_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseSearchIds* default_instance_;
};
// -------------------------------------------------------------------

class RequestCloseSearch : public ::google::protobuf::Message {
 public:
  RequestCloseSearch();
  virtual ~RequestCloseSearch();
  
  RequestCloseSearch(const RequestCloseSearch& from);
  
  inline RequestCloseSearch& operator=(const RequestCloseSearch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestCloseSearch& default_instance();
  
  void Swap(RequestCloseSearch* other);
  
  // implements Message ----------------------------------------------
  
  RequestCloseSearch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestCloseSearch& from);
  void MergeFrom(const RequestCloseSearch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 search_id = 1;
  inline bool has_search_id() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 1;
  inline ::google::protobuf::uint32 search_id() const;
  inline void set_search_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.RequestCloseSearch)
 private:
  inline void set_has_search_id();
  inline void clear_has_search_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 search_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static RequestCloseSearch* default_instance_;
};
// -------------------------------------------------------------------

class RequestListSearches : public ::google::protobuf::Message {
 public:
  RequestListSearches();
  virtual ~RequestListSearches();
  
  RequestListSearches(const RequestListSearches& from);
  
  inline RequestListSearches& operator=(const RequestListSearches& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestListSearches& default_instance();
  
  void Swap(RequestListSearches* other);
  
  // implements Message ----------------------------------------------
  
  RequestListSearches* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestListSearches& from);
  void MergeFrom(const RequestListSearches& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.RequestListSearches)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static RequestListSearches* default_instance_;
};
// -------------------------------------------------------------------

class RequestSearchResults : public ::google::protobuf::Message {
 public:
  RequestSearchResults();
  virtual ~RequestSearchResults();
  
  RequestSearchResults(const RequestSearchResults& from);
  
  inline RequestSearchResults& operator=(const RequestSearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSearchResults& default_instance();
  
  void Swap(RequestSearchResults* other);
  
  // implements Message ----------------------------------------------
  
  RequestSearchResults* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSearchResults& from);
  void MergeFrom(const RequestSearchResults& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 search_ids = 2;
  inline int search_ids_size() const;
  inline void clear_search_ids();
  static const int kSearchIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 search_ids(int index) const;
  inline void set_search_ids(int index, ::google::protobuf::uint32 value);
  inline void add_search_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      search_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_search_ids();
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.RequestSearchResults)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > search_ids_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static RequestSearchResults* default_instance_;
};
// -------------------------------------------------------------------

class ResponseSearchResults : public ::google::protobuf::Message {
 public:
  ResponseSearchResults();
  virtual ~ResponseSearchResults();
  
  ResponseSearchResults(const ResponseSearchResults& from);
  
  inline ResponseSearchResults& operator=(const ResponseSearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseSearchResults& default_instance();
  
  void Swap(ResponseSearchResults* other);
  
  // implements Message ----------------------------------------------
  
  ResponseSearchResults* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseSearchResults& from);
  void MergeFrom(const ResponseSearchResults& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // repeated .rsctrl.search.SearchSet searches = 2;
  inline int searches_size() const;
  inline void clear_searches();
  static const int kSearchesFieldNumber = 2;
  inline const ::rsctrl::search::SearchSet& searches(int index) const;
  inline ::rsctrl::search::SearchSet* mutable_searches(int index);
  inline ::rsctrl::search::SearchSet* add_searches();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchSet >&
      searches() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchSet >*
      mutable_searches();
  
  // @@protoc_insertion_point(class_scope:rsctrl.search.ResponseSearchResults)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchSet > searches_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseSearchResults* default_instance_;
};
// ===================================================================


// ===================================================================

// SearchHit

// required .rsctrl.core.File file = 1;
inline bool SearchHit::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchHit::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchHit::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchHit::clear_file() {
  if (file_ != NULL) file_->::rsctrl::core::File::Clear();
  clear_has_file();
}
inline const ::rsctrl::core::File& SearchHit::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::rsctrl::core::File* SearchHit::mutable_file() {
  set_has_file();
  if (file_ == NULL) file_ = new ::rsctrl::core::File;
  return file_;
}
inline ::rsctrl::core::File* SearchHit::release_file() {
  clear_has_file();
  ::rsctrl::core::File* temp = file_;
  file_ = NULL;
  return temp;
}

// required uint32 loc = 2;
inline bool SearchHit::has_loc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchHit::set_has_loc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchHit::clear_has_loc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchHit::clear_loc() {
  loc_ = 0u;
  clear_has_loc();
}
inline ::google::protobuf::uint32 SearchHit::loc() const {
  return loc_;
}
inline void SearchHit::set_loc(::google::protobuf::uint32 value) {
  set_has_loc();
  loc_ = value;
}

// required uint32 no_hits = 3;
inline bool SearchHit::has_no_hits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchHit::set_has_no_hits() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchHit::clear_has_no_hits() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchHit::clear_no_hits() {
  no_hits_ = 0u;
  clear_has_no_hits();
}
inline ::google::protobuf::uint32 SearchHit::no_hits() const {
  return no_hits_;
}
inline void SearchHit::set_no_hits(::google::protobuf::uint32 value) {
  set_has_no_hits();
  no_hits_ = value;
}

// -------------------------------------------------------------------

// SearchSet

// required uint32 search_id = 1;
inline bool SearchSet::has_search_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchSet::set_has_search_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchSet::clear_has_search_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchSet::clear_search_id() {
  search_id_ = 0u;
  clear_has_search_id();
}
inline ::google::protobuf::uint32 SearchSet::search_id() const {
  return search_id_;
}
inline void SearchSet::set_search_id(::google::protobuf::uint32 value) {
  set_has_search_id();
  search_id_ = value;
}

// repeated .rsctrl.search.SearchHit hits = 2;
inline int SearchSet::hits_size() const {
  return hits_.size();
}
inline void SearchSet::clear_hits() {
  hits_.Clear();
}
inline const ::rsctrl::search::SearchHit& SearchSet::hits(int index) const {
  return hits_.Get(index);
}
inline ::rsctrl::search::SearchHit* SearchSet::mutable_hits(int index) {
  return hits_.Mutable(index);
}
inline ::rsctrl::search::SearchHit* SearchSet::add_hits() {
  return hits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchHit >&
SearchSet::hits() const {
  return hits_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchHit >*
SearchSet::mutable_hits() {
  return &hits_;
}

// -------------------------------------------------------------------

// RequestBasicSearch

// repeated string terms = 1;
inline int RequestBasicSearch::terms_size() const {
  return terms_.size();
}
inline void RequestBasicSearch::clear_terms() {
  terms_.Clear();
}
inline const ::std::string& RequestBasicSearch::terms(int index) const {
  return terms_.Get(index);
}
inline ::std::string* RequestBasicSearch::mutable_terms(int index) {
  return terms_.Mutable(index);
}
inline void RequestBasicSearch::set_terms(int index, const ::std::string& value) {
  terms_.Mutable(index)->assign(value);
}
inline void RequestBasicSearch::set_terms(int index, const char* value) {
  terms_.Mutable(index)->assign(value);
}
inline void RequestBasicSearch::set_terms(int index, const char* value, size_t size) {
  terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestBasicSearch::add_terms() {
  return terms_.Add();
}
inline void RequestBasicSearch::add_terms(const ::std::string& value) {
  terms_.Add()->assign(value);
}
inline void RequestBasicSearch::add_terms(const char* value) {
  terms_.Add()->assign(value);
}
inline void RequestBasicSearch::add_terms(const char* value, size_t size) {
  terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestBasicSearch::terms() const {
  return terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestBasicSearch::mutable_terms() {
  return &terms_;
}

// -------------------------------------------------------------------

// RequestAdvSearch

// repeated string terms = 1;
inline int RequestAdvSearch::terms_size() const {
  return terms_.size();
}
inline void RequestAdvSearch::clear_terms() {
  terms_.Clear();
}
inline const ::std::string& RequestAdvSearch::terms(int index) const {
  return terms_.Get(index);
}
inline ::std::string* RequestAdvSearch::mutable_terms(int index) {
  return terms_.Mutable(index);
}
inline void RequestAdvSearch::set_terms(int index, const ::std::string& value) {
  terms_.Mutable(index)->assign(value);
}
inline void RequestAdvSearch::set_terms(int index, const char* value) {
  terms_.Mutable(index)->assign(value);
}
inline void RequestAdvSearch::set_terms(int index, const char* value, size_t size) {
  terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestAdvSearch::add_terms() {
  return terms_.Add();
}
inline void RequestAdvSearch::add_terms(const ::std::string& value) {
  terms_.Add()->assign(value);
}
inline void RequestAdvSearch::add_terms(const char* value) {
  terms_.Add()->assign(value);
}
inline void RequestAdvSearch::add_terms(const char* value, size_t size) {
  terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestAdvSearch::terms() const {
  return terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestAdvSearch::mutable_terms() {
  return &terms_;
}

// -------------------------------------------------------------------

// ResponseSearchIds

// required .rsctrl.core.Status status = 1;
inline bool ResponseSearchIds::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseSearchIds::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseSearchIds::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseSearchIds::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseSearchIds::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseSearchIds::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseSearchIds::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// repeated uint32 search_id = 2;
inline int ResponseSearchIds::search_id_size() const {
  return search_id_.size();
}
inline void ResponseSearchIds::clear_search_id() {
  search_id_.Clear();
}
inline ::google::protobuf::uint32 ResponseSearchIds::search_id(int index) const {
  return search_id_.Get(index);
}
inline void ResponseSearchIds::set_search_id(int index, ::google::protobuf::uint32 value) {
  search_id_.Set(index, value);
}
inline void ResponseSearchIds::add_search_id(::google::protobuf::uint32 value) {
  search_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ResponseSearchIds::search_id() const {
  return search_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ResponseSearchIds::mutable_search_id() {
  return &search_id_;
}

// -------------------------------------------------------------------

// RequestCloseSearch

// required uint32 search_id = 1;
inline bool RequestCloseSearch::has_search_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestCloseSearch::set_has_search_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestCloseSearch::clear_has_search_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestCloseSearch::clear_search_id() {
  search_id_ = 0u;
  clear_has_search_id();
}
inline ::google::protobuf::uint32 RequestCloseSearch::search_id() const {
  return search_id_;
}
inline void RequestCloseSearch::set_search_id(::google::protobuf::uint32 value) {
  set_has_search_id();
  search_id_ = value;
}

// -------------------------------------------------------------------

// RequestListSearches

// -------------------------------------------------------------------

// RequestSearchResults

// repeated uint32 search_ids = 2;
inline int RequestSearchResults::search_ids_size() const {
  return search_ids_.size();
}
inline void RequestSearchResults::clear_search_ids() {
  search_ids_.Clear();
}
inline ::google::protobuf::uint32 RequestSearchResults::search_ids(int index) const {
  return search_ids_.Get(index);
}
inline void RequestSearchResults::set_search_ids(int index, ::google::protobuf::uint32 value) {
  search_ids_.Set(index, value);
}
inline void RequestSearchResults::add_search_ids(::google::protobuf::uint32 value) {
  search_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RequestSearchResults::search_ids() const {
  return search_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RequestSearchResults::mutable_search_ids() {
  return &search_ids_;
}

// -------------------------------------------------------------------

// ResponseSearchResults

// required .rsctrl.core.Status status = 1;
inline bool ResponseSearchResults::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseSearchResults::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseSearchResults::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseSearchResults::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseSearchResults::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseSearchResults::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseSearchResults::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// repeated .rsctrl.search.SearchSet searches = 2;
inline int ResponseSearchResults::searches_size() const {
  return searches_.size();
}
inline void ResponseSearchResults::clear_searches() {
  searches_.Clear();
}
inline const ::rsctrl::search::SearchSet& ResponseSearchResults::searches(int index) const {
  return searches_.Get(index);
}
inline ::rsctrl::search::SearchSet* ResponseSearchResults::mutable_searches(int index) {
  return searches_.Mutable(index);
}
inline ::rsctrl::search::SearchSet* ResponseSearchResults::add_searches() {
  return searches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchSet >&
ResponseSearchResults::searches() const {
  return searches_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::search::SearchSet >*
ResponseSearchResults::mutable_searches() {
  return &searches_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace search
}  // namespace rsctrl

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::search::SearchHit_LocFlag>() {
  return ::rsctrl::search::SearchHit_LocFlag_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::search::RequestMsgIds>() {
  return rsctrl::search::RequestMsgIds_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::search::ResponseMsgIds>() {
  return rsctrl::search::ResponseMsgIds_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_search_2eproto__INCLUDED
