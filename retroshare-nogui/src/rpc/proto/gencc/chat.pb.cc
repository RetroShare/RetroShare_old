// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace chat {

namespace {

const ::google::protobuf::Descriptor* ChatLobbyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatLobbyInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatLobbyInfo_LobbyState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChatId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseChatLobbies_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseChatLobbies_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestChatLobbies_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestChatLobbies_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestChatLobbies_LobbySet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestCreateLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCreateLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestJoinOrLeaveLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestJoinOrLeaveLobby_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestJoinOrLeaveLobby_LobbyAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestSetLobbyNickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSetLobbyNickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSetLobbyNickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSetLobbyNickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRegisterEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRegisterEvents_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestRegisterEvents_RegisterAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResponseRegisterEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRegisterEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventLobbyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventLobbyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSendMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSendMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSendMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSendMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestChatHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestChatHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseChatHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseChatHistory_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LobbyPrivacyLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChatLobbyInfo_descriptor_ = file->message_type(0);
  static const int ChatLobbyInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, lobby_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, lobby_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, lobby_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, lobby_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, no_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, last_report_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, last_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, participating_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, nicknames_),
  };
  ChatLobbyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatLobbyInfo_descriptor_,
      ChatLobbyInfo::default_instance_,
      ChatLobbyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLobbyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatLobbyInfo));
  ChatLobbyInfo_LobbyState_descriptor_ = ChatLobbyInfo_descriptor_->enum_type(0);
  ChatId_descriptor_ = file->message_type(1);
  static const int ChatId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatId, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatId, chat_id_),
  };
  ChatId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatId_descriptor_,
      ChatId::default_instance_,
      ChatId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatId));
  ChatMessage_descriptor_ = file->message_type(2);
  static const int ChatMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, peer_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, chat_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, recv_time_),
  };
  ChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage));
  ResponseChatLobbies_descriptor_ = file->message_type(3);
  static const int ResponseChatLobbies_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatLobbies, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatLobbies, lobbies_),
  };
  ResponseChatLobbies_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseChatLobbies_descriptor_,
      ResponseChatLobbies::default_instance_,
      ResponseChatLobbies_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatLobbies, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatLobbies, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseChatLobbies));
  RequestChatLobbies_descriptor_ = file->message_type(4);
  static const int RequestChatLobbies_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChatLobbies, lobby_set_),
  };
  RequestChatLobbies_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestChatLobbies_descriptor_,
      RequestChatLobbies::default_instance_,
      RequestChatLobbies_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChatLobbies, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChatLobbies, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestChatLobbies));
  RequestChatLobbies_LobbySet_descriptor_ = RequestChatLobbies_descriptor_->enum_type(0);
  RequestCreateLobby_descriptor_ = file->message_type(5);
  static const int RequestCreateLobby_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateLobby, lobby_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateLobby, lobby_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateLobby, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateLobby, invited_friends_),
  };
  RequestCreateLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCreateLobby_descriptor_,
      RequestCreateLobby::default_instance_,
      RequestCreateLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCreateLobby));
  RequestJoinOrLeaveLobby_descriptor_ = file->message_type(6);
  static const int RequestJoinOrLeaveLobby_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinOrLeaveLobby, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinOrLeaveLobby, action_),
  };
  RequestJoinOrLeaveLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestJoinOrLeaveLobby_descriptor_,
      RequestJoinOrLeaveLobby::default_instance_,
      RequestJoinOrLeaveLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinOrLeaveLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinOrLeaveLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestJoinOrLeaveLobby));
  RequestJoinOrLeaveLobby_LobbyAction_descriptor_ = RequestJoinOrLeaveLobby_descriptor_->enum_type(0);
  RequestSetLobbyNickname_descriptor_ = file->message_type(7);
  static const int RequestSetLobbyNickname_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetLobbyNickname, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetLobbyNickname, lobby_ids_),
  };
  RequestSetLobbyNickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSetLobbyNickname_descriptor_,
      RequestSetLobbyNickname::default_instance_,
      RequestSetLobbyNickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetLobbyNickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetLobbyNickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSetLobbyNickname));
  ResponseSetLobbyNickname_descriptor_ = file->message_type(8);
  static const int ResponseSetLobbyNickname_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetLobbyNickname, status_),
  };
  ResponseSetLobbyNickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSetLobbyNickname_descriptor_,
      ResponseSetLobbyNickname::default_instance_,
      ResponseSetLobbyNickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetLobbyNickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetLobbyNickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSetLobbyNickname));
  RequestRegisterEvents_descriptor_ = file->message_type(9);
  static const int RequestRegisterEvents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterEvents, action_),
  };
  RequestRegisterEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRegisterEvents_descriptor_,
      RequestRegisterEvents::default_instance_,
      RequestRegisterEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRegisterEvents));
  RequestRegisterEvents_RegisterAction_descriptor_ = RequestRegisterEvents_descriptor_->enum_type(0);
  ResponseRegisterEvents_descriptor_ = file->message_type(10);
  static const int ResponseRegisterEvents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterEvents, status_),
  };
  ResponseRegisterEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRegisterEvents_descriptor_,
      ResponseRegisterEvents::default_instance_,
      ResponseRegisterEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRegisterEvents));
  EventLobbyInvite_descriptor_ = file->message_type(11);
  static const int EventLobbyInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLobbyInvite, lobby_),
  };
  EventLobbyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventLobbyInvite_descriptor_,
      EventLobbyInvite::default_instance_,
      EventLobbyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLobbyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLobbyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventLobbyInvite));
  EventChatMessage_descriptor_ = file->message_type(12);
  static const int EventChatMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventChatMessage, msg_),
  };
  EventChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventChatMessage_descriptor_,
      EventChatMessage::default_instance_,
      EventChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventChatMessage));
  RequestSendMessage_descriptor_ = file->message_type(13);
  static const int RequestSendMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMessage, msg_),
  };
  RequestSendMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSendMessage_descriptor_,
      RequestSendMessage::default_instance_,
      RequestSendMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSendMessage));
  ResponseSendMessage_descriptor_ = file->message_type(14);
  static const int ResponseSendMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSendMessage, status_),
  };
  ResponseSendMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSendMessage_descriptor_,
      ResponseSendMessage::default_instance_,
      ResponseSendMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSendMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSendMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSendMessage));
  RequestChatHistory_descriptor_ = file->message_type(15);
  static const int RequestChatHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChatHistory, id_),
  };
  RequestChatHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestChatHistory_descriptor_,
      RequestChatHistory::default_instance_,
      RequestChatHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChatHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChatHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestChatHistory));
  ResponseChatHistory_descriptor_ = file->message_type(16);
  static const int ResponseChatHistory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatHistory, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatHistory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatHistory, msgs_),
  };
  ResponseChatHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseChatHistory_descriptor_,
      ResponseChatHistory::default_instance_,
      ResponseChatHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChatHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseChatHistory));
  RequestMsgIds_descriptor_ = file->enum_type(0);
  ResponseMsgIds_descriptor_ = file->enum_type(1);
  LobbyPrivacyLevel_descriptor_ = file->enum_type(2);
  ChatType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatLobbyInfo_descriptor_, &ChatLobbyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatId_descriptor_, &ChatId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseChatLobbies_descriptor_, &ResponseChatLobbies::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestChatLobbies_descriptor_, &RequestChatLobbies::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCreateLobby_descriptor_, &RequestCreateLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestJoinOrLeaveLobby_descriptor_, &RequestJoinOrLeaveLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSetLobbyNickname_descriptor_, &RequestSetLobbyNickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSetLobbyNickname_descriptor_, &ResponseSetLobbyNickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRegisterEvents_descriptor_, &RequestRegisterEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRegisterEvents_descriptor_, &ResponseRegisterEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventLobbyInvite_descriptor_, &EventLobbyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventChatMessage_descriptor_, &EventChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSendMessage_descriptor_, &RequestSendMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSendMessage_descriptor_, &ResponseSendMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestChatHistory_descriptor_, &RequestChatHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseChatHistory_descriptor_, &ResponseChatHistory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete ChatLobbyInfo::default_instance_;
  delete ChatLobbyInfo_reflection_;
  delete ChatId::default_instance_;
  delete ChatId_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete ResponseChatLobbies::default_instance_;
  delete ResponseChatLobbies_reflection_;
  delete RequestChatLobbies::default_instance_;
  delete RequestChatLobbies_reflection_;
  delete RequestCreateLobby::default_instance_;
  delete RequestCreateLobby_reflection_;
  delete RequestJoinOrLeaveLobby::default_instance_;
  delete RequestJoinOrLeaveLobby_reflection_;
  delete RequestSetLobbyNickname::default_instance_;
  delete RequestSetLobbyNickname_reflection_;
  delete ResponseSetLobbyNickname::default_instance_;
  delete ResponseSetLobbyNickname_reflection_;
  delete RequestRegisterEvents::default_instance_;
  delete RequestRegisterEvents_reflection_;
  delete ResponseRegisterEvents::default_instance_;
  delete ResponseRegisterEvents_reflection_;
  delete EventLobbyInvite::default_instance_;
  delete EventLobbyInvite_reflection_;
  delete EventChatMessage::default_instance_;
  delete EventChatMessage_reflection_;
  delete RequestSendMessage::default_instance_;
  delete RequestSendMessage_reflection_;
  delete ResponseSendMessage::default_instance_;
  delete ResponseSendMessage_reflection_;
  delete RequestChatHistory::default_instance_;
  delete RequestChatHistory_reflection_;
  delete ResponseChatHistory::default_instance_;
  delete ResponseChatHistory_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rsctrl::core::protobuf_AddDesc_core_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\013rsctrl.chat\032\ncore.proto\"\237\003"
    "\n\rChatLobbyInfo\022\020\n\010lobby_id\030\001 \002(\t\022\023\n\013lob"
    "by_topic\030\002 \002(\t\022\022\n\nlobby_name\030\003 \002(\t\022\026\n\016lo"
    "bby_nickname\030\004 \002(\t\0225\n\rprivacy_level\030\005 \002("
    "\0162\036.rsctrl.chat.LobbyPrivacyLevel\022:\n\013lob"
    "by_state\030\006 \002(\0162%.rsctrl.chat.ChatLobbyIn"
    "fo.LobbyState\022\020\n\010no_peers\030\007 \002(\r\022\030\n\020last_"
    "report_time\030\010 \002(\r\022\025\n\rlast_activity\030\t \002(\r"
    "\022\035\n\025participating_friends\030\n \003(\t\022\021\n\tnickn"
    "ames\030\013 \003(\t\"S\n\nLobbyState\022\025\n\021LOBBYSTATE_J"
    "OINED\020\001\022\026\n\022LOBBYSTATE_INVITED\020\002\022\026\n\022LOBBY"
    "STATE_VISIBLE\020\003\"C\n\006ChatId\022(\n\tchat_type\030\001"
    " \002(\0162\025.rsctrl.chat.ChatType\022\017\n\007chat_id\030\002"
    " \002(\t\"\214\001\n\013ChatMessage\022\037\n\002id\030\001 \002(\0132\023.rsctr"
    "l.chat.ChatId\022\013\n\003msg\030\002 \002(\t\022\025\n\rpeer_nickn"
    "ame\030\003 \001(\t\022\022\n\nchat_flags\030\004 \001(\r\022\021\n\tsend_ti"
    "me\030\005 \001(\r\022\021\n\trecv_time\030\006 \001(\r\"g\n\023ResponseC"
    "hatLobbies\022#\n\006status\030\001 \002(\0132\023.rsctrl.core"
    ".Status\022+\n\007lobbies\030\002 \003(\0132\032.rsctrl.chat.C"
    "hatLobbyInfo\"\260\001\n\022RequestChatLobbies\022;\n\tl"
    "obby_set\030\001 \002(\0162(.rsctrl.chat.RequestChat"
    "Lobbies.LobbySet\"]\n\010LobbySet\022\020\n\014LOBBYSET"
    "_ALL\020\001\022\023\n\017LOBBYSET_JOINED\020\002\022\024\n\020LOBBYSET_"
    "INVITED\020\003\022\024\n\020LOBBYSET_VISIBLE\020\004\"\215\001\n\022Requ"
    "estCreateLobby\022\022\n\nlobby_name\030\001 \002(\t\022\023\n\013lo"
    "bby_topic\030\002 \002(\t\0225\n\rprivacy_level\030\004 \002(\0162\036"
    ".rsctrl.chat.LobbyPrivacyLevel\022\027\n\017invite"
    "d_friends\030\003 \003(\t\"\243\001\n\027RequestJoinOrLeaveLo"
    "bby\022\020\n\010lobby_id\030\001 \002(\t\022@\n\006action\030\002 \002(\01620."
    "rsctrl.chat.RequestJoinOrLeaveLobby.Lobb"
    "yAction\"4\n\013LobbyAction\022\022\n\016JOIN_OR_ACCEPT"
    "\020\001\022\021\n\rLEAVE_OR_DENY\020\002\">\n\027RequestSetLobby"
    "Nickname\022\020\n\010nickname\030\001 \002(\t\022\021\n\tlobby_ids\030"
    "\002 \003(\t\"\?\n\030ResponseSetLobbyNickname\022#\n\006sta"
    "tus\030\001 \002(\0132\023.rsctrl.core.Status\"\212\001\n\025Reque"
    "stRegisterEvents\022A\n\006action\030\001 \002(\01621.rsctr"
    "l.chat.RequestRegisterEvents.RegisterAct"
    "ion\".\n\016RegisterAction\022\014\n\010REGISTER\020\001\022\016\n\nD"
    "EREGISTER\020\002\"=\n\026ResponseRegisterEvents\022#\n"
    "\006status\030\001 \002(\0132\023.rsctrl.core.Status\"=\n\020Ev"
    "entLobbyInvite\022)\n\005lobby\030\001 \002(\0132\032.rsctrl.c"
    "hat.ChatLobbyInfo\"9\n\020EventChatMessage\022%\n"
    "\003msg\030\001 \002(\0132\030.rsctrl.chat.ChatMessage\";\n\022"
    "RequestSendMessage\022%\n\003msg\030\001 \002(\0132\030.rsctrl"
    ".chat.ChatMessage\":\n\023ResponseSendMessage"
    "\022#\n\006status\030\001 \002(\0132\023.rsctrl.core.Status\"5\n"
    "\022RequestChatHistory\022\037\n\002id\030\001 \002(\0132\023.rsctrl"
    ".chat.ChatId\"\203\001\n\023ResponseChatHistory\022#\n\006"
    "status\030\001 \002(\0132\023.rsctrl.core.Status\022\037\n\002id\030"
    "\002 \002(\0132\023.rsctrl.chat.ChatId\022&\n\004msgs\030\003 \003(\013"
    "2\030.rsctrl.chat.ChatMessage*\356\001\n\rRequestMs"
    "gIds\022\034\n\030MsgId_RequestChatLobbies\020\001\022\034\n\030Ms"
    "gId_RequestCreateLobby\020\002\022!\n\035MsgId_Reques"
    "tJoinOrLeaveLobby\020\003\022!\n\035MsgId_RequestSetL"
    "obbyNickname\020\004\022\037\n\033MsgId_RequestRegisterE"
    "vents\020\005\022\034\n\030MsgId_RequestSendMessage\020\006\022\034\n"
    "\030MsgId_RequestChatHistory\020\007*\353\001\n\016Response"
    "MsgIds\022\035\n\031MsgId_ResponseChatLobbies\020\001\022\"\n"
    "\036MsgId_ResponseSetLobbyNickname\020\004\022 \n\034Msg"
    "Id_ResponseRegisterEvents\020\005\022\035\n\031MsgId_Res"
    "ponseSendMessage\020\006\022\035\n\031MsgId_ResponseChat"
    "History\020\007\022\032\n\026MsgId_EventLobbyInvite\020e\022\032\n"
    "\026MsgId_EventChatMessage\020f*<\n\021LobbyPrivac"
    "yLevel\022\023\n\017PRIVACY_PRIVATE\020\001\022\022\n\016PRIVACY_P"
    "UBLIC\020\002*<\n\010ChatType\022\020\n\014TYPE_PRIVATE\020\001\022\016\n"
    "\nTYPE_LOBBY\020\002\022\016\n\nTYPE_GROUP\020\003", 2629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  ChatLobbyInfo::default_instance_ = new ChatLobbyInfo();
  ChatId::default_instance_ = new ChatId();
  ChatMessage::default_instance_ = new ChatMessage();
  ResponseChatLobbies::default_instance_ = new ResponseChatLobbies();
  RequestChatLobbies::default_instance_ = new RequestChatLobbies();
  RequestCreateLobby::default_instance_ = new RequestCreateLobby();
  RequestJoinOrLeaveLobby::default_instance_ = new RequestJoinOrLeaveLobby();
  RequestSetLobbyNickname::default_instance_ = new RequestSetLobbyNickname();
  ResponseSetLobbyNickname::default_instance_ = new ResponseSetLobbyNickname();
  RequestRegisterEvents::default_instance_ = new RequestRegisterEvents();
  ResponseRegisterEvents::default_instance_ = new ResponseRegisterEvents();
  EventLobbyInvite::default_instance_ = new EventLobbyInvite();
  EventChatMessage::default_instance_ = new EventChatMessage();
  RequestSendMessage::default_instance_ = new RequestSendMessage();
  ResponseSendMessage::default_instance_ = new ResponseSendMessage();
  RequestChatHistory::default_instance_ = new RequestChatHistory();
  ResponseChatHistory::default_instance_ = new ResponseChatHistory();
  ChatLobbyInfo::default_instance_->InitAsDefaultInstance();
  ChatId::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ResponseChatLobbies::default_instance_->InitAsDefaultInstance();
  RequestChatLobbies::default_instance_->InitAsDefaultInstance();
  RequestCreateLobby::default_instance_->InitAsDefaultInstance();
  RequestJoinOrLeaveLobby::default_instance_->InitAsDefaultInstance();
  RequestSetLobbyNickname::default_instance_->InitAsDefaultInstance();
  ResponseSetLobbyNickname::default_instance_->InitAsDefaultInstance();
  RequestRegisterEvents::default_instance_->InitAsDefaultInstance();
  ResponseRegisterEvents::default_instance_->InitAsDefaultInstance();
  EventLobbyInvite::default_instance_->InitAsDefaultInstance();
  EventChatMessage::default_instance_->InitAsDefaultInstance();
  RequestSendMessage::default_instance_->InitAsDefaultInstance();
  ResponseSendMessage::default_instance_->InitAsDefaultInstance();
  RequestChatHistory::default_instance_->InitAsDefaultInstance();
  ResponseChatHistory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMsgIds_descriptor_;
}
bool RequestMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseMsgIds_descriptor_;
}
bool ResponseMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LobbyPrivacyLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyPrivacyLevel_descriptor_;
}
bool LobbyPrivacyLevel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatType_descriptor_;
}
bool ChatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatLobbyInfo_LobbyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatLobbyInfo_LobbyState_descriptor_;
}
bool ChatLobbyInfo_LobbyState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChatLobbyInfo_LobbyState ChatLobbyInfo::LOBBYSTATE_JOINED;
const ChatLobbyInfo_LobbyState ChatLobbyInfo::LOBBYSTATE_INVITED;
const ChatLobbyInfo_LobbyState ChatLobbyInfo::LOBBYSTATE_VISIBLE;
const ChatLobbyInfo_LobbyState ChatLobbyInfo::LobbyState_MIN;
const ChatLobbyInfo_LobbyState ChatLobbyInfo::LobbyState_MAX;
const int ChatLobbyInfo::LobbyState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChatLobbyInfo::kLobbyIdFieldNumber;
const int ChatLobbyInfo::kLobbyTopicFieldNumber;
const int ChatLobbyInfo::kLobbyNameFieldNumber;
const int ChatLobbyInfo::kLobbyNicknameFieldNumber;
const int ChatLobbyInfo::kPrivacyLevelFieldNumber;
const int ChatLobbyInfo::kLobbyStateFieldNumber;
const int ChatLobbyInfo::kNoPeersFieldNumber;
const int ChatLobbyInfo::kLastReportTimeFieldNumber;
const int ChatLobbyInfo::kLastActivityFieldNumber;
const int ChatLobbyInfo::kParticipatingFriendsFieldNumber;
const int ChatLobbyInfo::kNicknamesFieldNumber;
#endif  // !_MSC_VER

ChatLobbyInfo::ChatLobbyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatLobbyInfo::InitAsDefaultInstance() {
}

ChatLobbyInfo::ChatLobbyInfo(const ChatLobbyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatLobbyInfo::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lobby_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lobby_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privacy_level_ = 1;
  lobby_state_ = 1;
  no_peers_ = 0u;
  last_report_time_ = 0u;
  last_activity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatLobbyInfo::~ChatLobbyInfo() {
  SharedDtor();
}

void ChatLobbyInfo::SharedDtor() {
  if (lobby_id_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_id_;
  }
  if (lobby_topic_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_topic_;
  }
  if (lobby_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_name_;
  }
  if (lobby_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_nickname_;
  }
  if (this != default_instance_) {
  }
}

void ChatLobbyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatLobbyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatLobbyInfo_descriptor_;
}

const ChatLobbyInfo& ChatLobbyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ChatLobbyInfo* ChatLobbyInfo::default_instance_ = NULL;

ChatLobbyInfo* ChatLobbyInfo::New() const {
  return new ChatLobbyInfo;
}

void ChatLobbyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lobby_id()) {
      if (lobby_id_ != &::google::protobuf::internal::kEmptyString) {
        lobby_id_->clear();
      }
    }
    if (has_lobby_topic()) {
      if (lobby_topic_ != &::google::protobuf::internal::kEmptyString) {
        lobby_topic_->clear();
      }
    }
    if (has_lobby_name()) {
      if (lobby_name_ != &::google::protobuf::internal::kEmptyString) {
        lobby_name_->clear();
      }
    }
    if (has_lobby_nickname()) {
      if (lobby_nickname_ != &::google::protobuf::internal::kEmptyString) {
        lobby_nickname_->clear();
      }
    }
    privacy_level_ = 1;
    lobby_state_ = 1;
    no_peers_ = 0u;
    last_report_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_activity_ = 0u;
  }
  participating_friends_.Clear();
  nicknames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatLobbyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lobby_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lobby_id().data(), this->lobby_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lobby_topic;
        break;
      }
      
      // required string lobby_topic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobby_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lobby_topic().data(), this->lobby_topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lobby_name;
        break;
      }
      
      // required string lobby_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobby_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lobby_name().data(), this->lobby_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lobby_nickname;
        break;
      }
      
      // required string lobby_nickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobby_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lobby_nickname().data(), this->lobby_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_privacy_level;
        break;
      }
      
      // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privacy_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rsctrl::chat::LobbyPrivacyLevel_IsValid(value)) {
            set_privacy_level(static_cast< rsctrl::chat::LobbyPrivacyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lobby_state;
        break;
      }
      
      // required .rsctrl.chat.ChatLobbyInfo.LobbyState lobby_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::chat::ChatLobbyInfo_LobbyState_IsValid(value)) {
            set_lobby_state(static_cast< ::rsctrl::chat::ChatLobbyInfo_LobbyState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_no_peers;
        break;
      }
      
      // required uint32 no_peers = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_peers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_peers_)));
          set_has_no_peers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_report_time;
        break;
      }
      
      // required uint32 last_report_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_report_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_report_time_)));
          set_has_last_report_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_activity;
        break;
      }
      
      // required uint32 last_activity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_activity_)));
          set_has_last_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_participating_friends;
        break;
      }
      
      // repeated string participating_friends = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participating_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_participating_friends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->participating_friends(0).data(), this->participating_friends(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_participating_friends;
        if (input->ExpectTag(90)) goto parse_nicknames;
        break;
      }
      
      // repeated string nicknames = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicknames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicknames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicknames(0).data(), this->nicknames(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_nicknames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatLobbyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_id().data(), this->lobby_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lobby_id(), output);
  }
  
  // required string lobby_topic = 2;
  if (has_lobby_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_topic().data(), this->lobby_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lobby_topic(), output);
  }
  
  // required string lobby_name = 3;
  if (has_lobby_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lobby_name(), output);
  }
  
  // required string lobby_nickname = 4;
  if (has_lobby_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_nickname().data(), this->lobby_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lobby_nickname(), output);
  }
  
  // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 5;
  if (has_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->privacy_level(), output);
  }
  
  // required .rsctrl.chat.ChatLobbyInfo.LobbyState lobby_state = 6;
  if (has_lobby_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->lobby_state(), output);
  }
  
  // required uint32 no_peers = 7;
  if (has_no_peers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->no_peers(), output);
  }
  
  // required uint32 last_report_time = 8;
  if (has_last_report_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_report_time(), output);
  }
  
  // required uint32 last_activity = 9;
  if (has_last_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_activity(), output);
  }
  
  // repeated string participating_friends = 10;
  for (int i = 0; i < this->participating_friends_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->participating_friends(i).data(), this->participating_friends(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->participating_friends(i), output);
  }
  
  // repeated string nicknames = 11;
  for (int i = 0; i < this->nicknames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicknames(i).data(), this->nicknames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->nicknames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatLobbyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_id().data(), this->lobby_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lobby_id(), target);
  }
  
  // required string lobby_topic = 2;
  if (has_lobby_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_topic().data(), this->lobby_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lobby_topic(), target);
  }
  
  // required string lobby_name = 3;
  if (has_lobby_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lobby_name(), target);
  }
  
  // required string lobby_nickname = 4;
  if (has_lobby_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_nickname().data(), this->lobby_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lobby_nickname(), target);
  }
  
  // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 5;
  if (has_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->privacy_level(), target);
  }
  
  // required .rsctrl.chat.ChatLobbyInfo.LobbyState lobby_state = 6;
  if (has_lobby_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->lobby_state(), target);
  }
  
  // required uint32 no_peers = 7;
  if (has_no_peers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->no_peers(), target);
  }
  
  // required uint32 last_report_time = 8;
  if (has_last_report_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_report_time(), target);
  }
  
  // required uint32 last_activity = 9;
  if (has_last_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_activity(), target);
  }
  
  // repeated string participating_friends = 10;
  for (int i = 0; i < this->participating_friends_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->participating_friends(i).data(), this->participating_friends(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->participating_friends(i), target);
  }
  
  // repeated string nicknames = 11;
  for (int i = 0; i < this->nicknames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicknames(i).data(), this->nicknames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->nicknames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatLobbyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_id());
    }
    
    // required string lobby_topic = 2;
    if (has_lobby_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_topic());
    }
    
    // required string lobby_name = 3;
    if (has_lobby_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_name());
    }
    
    // required string lobby_nickname = 4;
    if (has_lobby_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_nickname());
    }
    
    // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 5;
    if (has_privacy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privacy_level());
    }
    
    // required .rsctrl.chat.ChatLobbyInfo.LobbyState lobby_state = 6;
    if (has_lobby_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_state());
    }
    
    // required uint32 no_peers = 7;
    if (has_no_peers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_peers());
    }
    
    // required uint32 last_report_time = 8;
    if (has_last_report_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_report_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 last_activity = 9;
    if (has_last_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_activity());
    }
    
  }
  // repeated string participating_friends = 10;
  total_size += 1 * this->participating_friends_size();
  for (int i = 0; i < this->participating_friends_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->participating_friends(i));
  }
  
  // repeated string nicknames = 11;
  total_size += 1 * this->nicknames_size();
  for (int i = 0; i < this->nicknames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicknames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatLobbyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatLobbyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatLobbyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatLobbyInfo::MergeFrom(const ChatLobbyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  participating_friends_.MergeFrom(from.participating_friends_);
  nicknames_.MergeFrom(from.nicknames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_lobby_topic()) {
      set_lobby_topic(from.lobby_topic());
    }
    if (from.has_lobby_name()) {
      set_lobby_name(from.lobby_name());
    }
    if (from.has_lobby_nickname()) {
      set_lobby_nickname(from.lobby_nickname());
    }
    if (from.has_privacy_level()) {
      set_privacy_level(from.privacy_level());
    }
    if (from.has_lobby_state()) {
      set_lobby_state(from.lobby_state());
    }
    if (from.has_no_peers()) {
      set_no_peers(from.no_peers());
    }
    if (from.has_last_report_time()) {
      set_last_report_time(from.last_report_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_activity()) {
      set_last_activity(from.last_activity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatLobbyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatLobbyInfo::CopyFrom(const ChatLobbyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLobbyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void ChatLobbyInfo::Swap(ChatLobbyInfo* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(lobby_topic_, other->lobby_topic_);
    std::swap(lobby_name_, other->lobby_name_);
    std::swap(lobby_nickname_, other->lobby_nickname_);
    std::swap(privacy_level_, other->privacy_level_);
    std::swap(lobby_state_, other->lobby_state_);
    std::swap(no_peers_, other->no_peers_);
    std::swap(last_report_time_, other->last_report_time_);
    std::swap(last_activity_, other->last_activity_);
    participating_friends_.Swap(&other->participating_friends_);
    nicknames_.Swap(&other->nicknames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatLobbyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatLobbyInfo_descriptor_;
  metadata.reflection = ChatLobbyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatId::kChatTypeFieldNumber;
const int ChatId::kChatIdFieldNumber;
#endif  // !_MSC_VER

ChatId::ChatId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatId::InitAsDefaultInstance() {
}

ChatId::ChatId(const ChatId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatId::SharedCtor() {
  _cached_size_ = 0;
  chat_type_ = 1;
  chat_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatId::~ChatId() {
  SharedDtor();
}

void ChatId::SharedDtor() {
  if (chat_id_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_id_;
  }
  if (this != default_instance_) {
  }
}

void ChatId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatId_descriptor_;
}

const ChatId& ChatId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ChatId* ChatId::default_instance_ = NULL;

ChatId* ChatId::New() const {
  return new ChatId;
}

void ChatId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_type_ = 1;
    if (has_chat_id()) {
      if (chat_id_ != &::google::protobuf::internal::kEmptyString) {
        chat_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.chat.ChatType chat_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rsctrl::chat::ChatType_IsValid(value)) {
            set_chat_type(static_cast< rsctrl::chat::ChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_id;
        break;
      }
      
      // required string chat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_id().data(), this->chat_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.chat.ChatType chat_type = 1;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_type(), output);
  }
  
  // required string chat_id = 2;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_id().data(), this->chat_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chat_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.chat.ChatType chat_type = 1;
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_type(), target);
  }
  
  // required string chat_id = 2;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_id().data(), this->chat_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.chat.ChatType chat_type = 1;
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
    }
    
    // required string chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatId::MergeFrom(const ChatId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_chat_id()) {
      set_chat_id(from.chat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatId::CopyFrom(const ChatId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ChatId::Swap(ChatId* other) {
  if (other != this) {
    std::swap(chat_type_, other->chat_type_);
    std::swap(chat_id_, other->chat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatId_descriptor_;
  metadata.reflection = ChatId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessage::kIdFieldNumber;
const int ChatMessage::kMsgFieldNumber;
const int ChatMessage::kPeerNicknameFieldNumber;
const int ChatMessage::kChatFlagsFieldNumber;
const int ChatMessage::kSendTimeFieldNumber;
const int ChatMessage::kRecvTimeFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMessage::InitAsDefaultInstance() {
  id_ = const_cast< ::rsctrl::chat::ChatId*>(&::rsctrl::chat::ChatId::default_instance());
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_flags_ = 0u;
  send_time_ = 0u;
  recv_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (peer_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_nickname_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::rsctrl::chat::ChatId::Clear();
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_peer_nickname()) {
      if (peer_nickname_ != &::google::protobuf::internal::kEmptyString) {
        peer_nickname_->clear();
      }
    }
    chat_flags_ = 0u;
    send_time_ = 0u;
    recv_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.chat.ChatId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_peer_nickname;
        break;
      }
      
      // optional string peer_nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_nickname().data(), this->peer_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chat_flags;
        break;
      }
      
      // optional uint32 chat_flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_flags_)));
          set_has_chat_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_send_time;
        break;
      }
      
      // optional uint32 send_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_recv_time;
        break;
      }
      
      // optional uint32 recv_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_time_)));
          set_has_recv_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.chat.ChatId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional string peer_nickname = 3;
  if (has_peer_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_nickname().data(), this->peer_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peer_nickname(), output);
  }
  
  // optional uint32 chat_flags = 4;
  if (has_chat_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chat_flags(), output);
  }
  
  // optional uint32 send_time = 5;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->send_time(), output);
  }
  
  // optional uint32 recv_time = 6;
  if (has_recv_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->recv_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.chat.ChatId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional string peer_nickname = 3;
  if (has_peer_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_nickname().data(), this->peer_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_nickname(), target);
  }
  
  // optional uint32 chat_flags = 4;
  if (has_chat_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chat_flags(), target);
  }
  
  // optional uint32 send_time = 5;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->send_time(), target);
  }
  
  // optional uint32 recv_time = 6;
  if (has_recv_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->recv_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.chat.ChatId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional string peer_nickname = 3;
    if (has_peer_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_nickname());
    }
    
    // optional uint32 chat_flags = 4;
    if (has_chat_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_flags());
    }
    
    // optional uint32 send_time = 5;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_time());
    }
    
    // optional uint32 recv_time = 6;
    if (has_recv_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::rsctrl::chat::ChatId::MergeFrom(from.id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_peer_nickname()) {
      set_peer_nickname(from.peer_nickname());
    }
    if (from.has_chat_flags()) {
      set_chat_flags(from.chat_flags());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_recv_time()) {
      set_recv_time(from.recv_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(msg_, other->msg_);
    std::swap(peer_nickname_, other->peer_nickname_);
    std::swap(chat_flags_, other->chat_flags_);
    std::swap(send_time_, other->send_time_);
    std::swap(recv_time_, other->recv_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseChatLobbies::kStatusFieldNumber;
const int ResponseChatLobbies::kLobbiesFieldNumber;
#endif  // !_MSC_VER

ResponseChatLobbies::ResponseChatLobbies()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseChatLobbies::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseChatLobbies::ResponseChatLobbies(const ResponseChatLobbies& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseChatLobbies::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseChatLobbies::~ResponseChatLobbies() {
  SharedDtor();
}

void ResponseChatLobbies::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseChatLobbies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseChatLobbies::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseChatLobbies_descriptor_;
}

const ResponseChatLobbies& ResponseChatLobbies::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ResponseChatLobbies* ResponseChatLobbies::default_instance_ = NULL;

ResponseChatLobbies* ResponseChatLobbies::New() const {
  return new ResponseChatLobbies;
}

void ResponseChatLobbies::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  lobbies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseChatLobbies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lobbies;
        break;
      }
      
      // repeated .rsctrl.chat.ChatLobbyInfo lobbies = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobbies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lobbies;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseChatLobbies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // repeated .rsctrl.chat.ChatLobbyInfo lobbies = 2;
  for (int i = 0; i < this->lobbies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lobbies(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseChatLobbies::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // repeated .rsctrl.chat.ChatLobbyInfo lobbies = 2;
  for (int i = 0; i < this->lobbies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lobbies(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseChatLobbies::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  // repeated .rsctrl.chat.ChatLobbyInfo lobbies = 2;
  total_size += 1 * this->lobbies_size();
  for (int i = 0; i < this->lobbies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lobbies(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseChatLobbies::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseChatLobbies* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseChatLobbies*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseChatLobbies::MergeFrom(const ResponseChatLobbies& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobbies_.MergeFrom(from.lobbies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseChatLobbies::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseChatLobbies::CopyFrom(const ResponseChatLobbies& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseChatLobbies::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < lobbies_size(); i++) {
    if (!this->lobbies(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseChatLobbies::Swap(ResponseChatLobbies* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    lobbies_.Swap(&other->lobbies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseChatLobbies::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseChatLobbies_descriptor_;
  metadata.reflection = ResponseChatLobbies_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestChatLobbies_LobbySet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestChatLobbies_LobbySet_descriptor_;
}
bool RequestChatLobbies_LobbySet_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestChatLobbies_LobbySet RequestChatLobbies::LOBBYSET_ALL;
const RequestChatLobbies_LobbySet RequestChatLobbies::LOBBYSET_JOINED;
const RequestChatLobbies_LobbySet RequestChatLobbies::LOBBYSET_INVITED;
const RequestChatLobbies_LobbySet RequestChatLobbies::LOBBYSET_VISIBLE;
const RequestChatLobbies_LobbySet RequestChatLobbies::LobbySet_MIN;
const RequestChatLobbies_LobbySet RequestChatLobbies::LobbySet_MAX;
const int RequestChatLobbies::LobbySet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestChatLobbies::kLobbySetFieldNumber;
#endif  // !_MSC_VER

RequestChatLobbies::RequestChatLobbies()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestChatLobbies::InitAsDefaultInstance() {
}

RequestChatLobbies::RequestChatLobbies(const RequestChatLobbies& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChatLobbies::SharedCtor() {
  _cached_size_ = 0;
  lobby_set_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChatLobbies::~RequestChatLobbies() {
  SharedDtor();
}

void RequestChatLobbies::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestChatLobbies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestChatLobbies::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestChatLobbies_descriptor_;
}

const RequestChatLobbies& RequestChatLobbies::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

RequestChatLobbies* RequestChatLobbies::default_instance_ = NULL;

RequestChatLobbies* RequestChatLobbies::New() const {
  return new RequestChatLobbies;
}

void RequestChatLobbies::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_set_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestChatLobbies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.chat.RequestChatLobbies.LobbySet lobby_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::chat::RequestChatLobbies_LobbySet_IsValid(value)) {
            set_lobby_set(static_cast< ::rsctrl::chat::RequestChatLobbies_LobbySet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChatLobbies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.chat.RequestChatLobbies.LobbySet lobby_set = 1;
  if (has_lobby_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lobby_set(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestChatLobbies::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.chat.RequestChatLobbies.LobbySet lobby_set = 1;
  if (has_lobby_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lobby_set(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestChatLobbies::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.chat.RequestChatLobbies.LobbySet lobby_set = 1;
    if (has_lobby_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_set());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChatLobbies::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestChatLobbies* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestChatLobbies*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestChatLobbies::MergeFrom(const RequestChatLobbies& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_set()) {
      set_lobby_set(from.lobby_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestChatLobbies::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestChatLobbies::CopyFrom(const RequestChatLobbies& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChatLobbies::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestChatLobbies::Swap(RequestChatLobbies* other) {
  if (other != this) {
    std::swap(lobby_set_, other->lobby_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestChatLobbies::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestChatLobbies_descriptor_;
  metadata.reflection = RequestChatLobbies_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateLobby::kLobbyNameFieldNumber;
const int RequestCreateLobby::kLobbyTopicFieldNumber;
const int RequestCreateLobby::kPrivacyLevelFieldNumber;
const int RequestCreateLobby::kInvitedFriendsFieldNumber;
#endif  // !_MSC_VER

RequestCreateLobby::RequestCreateLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCreateLobby::InitAsDefaultInstance() {
}

RequestCreateLobby::RequestCreateLobby(const RequestCreateLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCreateLobby::SharedCtor() {
  _cached_size_ = 0;
  lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lobby_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privacy_level_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateLobby::~RequestCreateLobby() {
  SharedDtor();
}

void RequestCreateLobby::SharedDtor() {
  if (lobby_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_name_;
  }
  if (lobby_topic_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_topic_;
  }
  if (this != default_instance_) {
  }
}

void RequestCreateLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCreateLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCreateLobby_descriptor_;
}

const RequestCreateLobby& RequestCreateLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

RequestCreateLobby* RequestCreateLobby::default_instance_ = NULL;

RequestCreateLobby* RequestCreateLobby::New() const {
  return new RequestCreateLobby;
}

void RequestCreateLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lobby_name()) {
      if (lobby_name_ != &::google::protobuf::internal::kEmptyString) {
        lobby_name_->clear();
      }
    }
    if (has_lobby_topic()) {
      if (lobby_topic_ != &::google::protobuf::internal::kEmptyString) {
        lobby_topic_->clear();
      }
    }
    privacy_level_ = 1;
  }
  invited_friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCreateLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lobby_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lobby_name().data(), this->lobby_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lobby_topic;
        break;
      }
      
      // required string lobby_topic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobby_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lobby_topic().data(), this->lobby_topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invited_friends;
        break;
      }
      
      // repeated string invited_friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invited_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_invited_friends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invited_friends(0).data(), this->invited_friends(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invited_friends;
        if (input->ExpectTag(32)) goto parse_privacy_level;
        break;
      }
      
      // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privacy_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rsctrl::chat::LobbyPrivacyLevel_IsValid(value)) {
            set_privacy_level(static_cast< rsctrl::chat::LobbyPrivacyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCreateLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string lobby_name = 1;
  if (has_lobby_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lobby_name(), output);
  }
  
  // required string lobby_topic = 2;
  if (has_lobby_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_topic().data(), this->lobby_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lobby_topic(), output);
  }
  
  // repeated string invited_friends = 3;
  for (int i = 0; i < this->invited_friends_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->invited_friends(i).data(), this->invited_friends(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->invited_friends(i), output);
  }
  
  // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 4;
  if (has_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->privacy_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCreateLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string lobby_name = 1;
  if (has_lobby_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lobby_name(), target);
  }
  
  // required string lobby_topic = 2;
  if (has_lobby_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_topic().data(), this->lobby_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lobby_topic(), target);
  }
  
  // repeated string invited_friends = 3;
  for (int i = 0; i < this->invited_friends_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invited_friends(i).data(), this->invited_friends(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->invited_friends(i), target);
  }
  
  // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 4;
  if (has_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->privacy_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCreateLobby::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lobby_name = 1;
    if (has_lobby_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_name());
    }
    
    // required string lobby_topic = 2;
    if (has_lobby_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_topic());
    }
    
    // required .rsctrl.chat.LobbyPrivacyLevel privacy_level = 4;
    if (has_privacy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privacy_level());
    }
    
  }
  // repeated string invited_friends = 3;
  total_size += 1 * this->invited_friends_size();
  for (int i = 0; i < this->invited_friends_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->invited_friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCreateLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCreateLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCreateLobby::MergeFrom(const RequestCreateLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_friends_.MergeFrom(from.invited_friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_name()) {
      set_lobby_name(from.lobby_name());
    }
    if (from.has_lobby_topic()) {
      set_lobby_topic(from.lobby_topic());
    }
    if (from.has_privacy_level()) {
      set_privacy_level(from.privacy_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCreateLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCreateLobby::CopyFrom(const RequestCreateLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateLobby::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RequestCreateLobby::Swap(RequestCreateLobby* other) {
  if (other != this) {
    std::swap(lobby_name_, other->lobby_name_);
    std::swap(lobby_topic_, other->lobby_topic_);
    std::swap(privacy_level_, other->privacy_level_);
    invited_friends_.Swap(&other->invited_friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCreateLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCreateLobby_descriptor_;
  metadata.reflection = RequestCreateLobby_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestJoinOrLeaveLobby_LobbyAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestJoinOrLeaveLobby_LobbyAction_descriptor_;
}
bool RequestJoinOrLeaveLobby_LobbyAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestJoinOrLeaveLobby_LobbyAction RequestJoinOrLeaveLobby::JOIN_OR_ACCEPT;
const RequestJoinOrLeaveLobby_LobbyAction RequestJoinOrLeaveLobby::LEAVE_OR_DENY;
const RequestJoinOrLeaveLobby_LobbyAction RequestJoinOrLeaveLobby::LobbyAction_MIN;
const RequestJoinOrLeaveLobby_LobbyAction RequestJoinOrLeaveLobby::LobbyAction_MAX;
const int RequestJoinOrLeaveLobby::LobbyAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestJoinOrLeaveLobby::kLobbyIdFieldNumber;
const int RequestJoinOrLeaveLobby::kActionFieldNumber;
#endif  // !_MSC_VER

RequestJoinOrLeaveLobby::RequestJoinOrLeaveLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestJoinOrLeaveLobby::InitAsDefaultInstance() {
}

RequestJoinOrLeaveLobby::RequestJoinOrLeaveLobby(const RequestJoinOrLeaveLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestJoinOrLeaveLobby::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestJoinOrLeaveLobby::~RequestJoinOrLeaveLobby() {
  SharedDtor();
}

void RequestJoinOrLeaveLobby::SharedDtor() {
  if (lobby_id_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_id_;
  }
  if (this != default_instance_) {
  }
}

void RequestJoinOrLeaveLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestJoinOrLeaveLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestJoinOrLeaveLobby_descriptor_;
}

const RequestJoinOrLeaveLobby& RequestJoinOrLeaveLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

RequestJoinOrLeaveLobby* RequestJoinOrLeaveLobby::default_instance_ = NULL;

RequestJoinOrLeaveLobby* RequestJoinOrLeaveLobby::New() const {
  return new RequestJoinOrLeaveLobby;
}

void RequestJoinOrLeaveLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lobby_id()) {
      if (lobby_id_ != &::google::protobuf::internal::kEmptyString) {
        lobby_id_->clear();
      }
    }
    action_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestJoinOrLeaveLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lobby_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lobby_id().data(), this->lobby_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }
      
      // required .rsctrl.chat.RequestJoinOrLeaveLobby.LobbyAction action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction_IsValid(value)) {
            set_action(static_cast< ::rsctrl::chat::RequestJoinOrLeaveLobby_LobbyAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestJoinOrLeaveLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_id().data(), this->lobby_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lobby_id(), output);
  }
  
  // required .rsctrl.chat.RequestJoinOrLeaveLobby.LobbyAction action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestJoinOrLeaveLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_id().data(), this->lobby_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lobby_id(), target);
  }
  
  // required .rsctrl.chat.RequestJoinOrLeaveLobby.LobbyAction action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestJoinOrLeaveLobby::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_id());
    }
    
    // required .rsctrl.chat.RequestJoinOrLeaveLobby.LobbyAction action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestJoinOrLeaveLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestJoinOrLeaveLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestJoinOrLeaveLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestJoinOrLeaveLobby::MergeFrom(const RequestJoinOrLeaveLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestJoinOrLeaveLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestJoinOrLeaveLobby::CopyFrom(const RequestJoinOrLeaveLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestJoinOrLeaveLobby::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestJoinOrLeaveLobby::Swap(RequestJoinOrLeaveLobby* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestJoinOrLeaveLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestJoinOrLeaveLobby_descriptor_;
  metadata.reflection = RequestJoinOrLeaveLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSetLobbyNickname::kNicknameFieldNumber;
const int RequestSetLobbyNickname::kLobbyIdsFieldNumber;
#endif  // !_MSC_VER

RequestSetLobbyNickname::RequestSetLobbyNickname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSetLobbyNickname::InitAsDefaultInstance() {
}

RequestSetLobbyNickname::RequestSetLobbyNickname(const RequestSetLobbyNickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSetLobbyNickname::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSetLobbyNickname::~RequestSetLobbyNickname() {
  SharedDtor();
}

void RequestSetLobbyNickname::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void RequestSetLobbyNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSetLobbyNickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSetLobbyNickname_descriptor_;
}

const RequestSetLobbyNickname& RequestSetLobbyNickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

RequestSetLobbyNickname* RequestSetLobbyNickname::default_instance_ = NULL;

RequestSetLobbyNickname* RequestSetLobbyNickname::New() const {
  return new RequestSetLobbyNickname;
}

void RequestSetLobbyNickname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  lobby_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSetLobbyNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lobby_ids;
        break;
      }
      
      // repeated string lobby_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobby_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lobby_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lobby_ids(0).data(), this->lobby_ids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lobby_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSetLobbyNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }
  
  // repeated string lobby_ids = 2;
  for (int i = 0; i < this->lobby_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lobby_ids(i).data(), this->lobby_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lobby_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSetLobbyNickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }
  
  // repeated string lobby_ids = 2;
  for (int i = 0; i < this->lobby_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lobby_ids(i).data(), this->lobby_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->lobby_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSetLobbyNickname::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
  }
  // repeated string lobby_ids = 2;
  total_size += 1 * this->lobby_ids_size();
  for (int i = 0; i < this->lobby_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lobby_ids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSetLobbyNickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSetLobbyNickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSetLobbyNickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSetLobbyNickname::MergeFrom(const RequestSetLobbyNickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobby_ids_.MergeFrom(from.lobby_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSetLobbyNickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSetLobbyNickname::CopyFrom(const RequestSetLobbyNickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetLobbyNickname::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestSetLobbyNickname::Swap(RequestSetLobbyNickname* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    lobby_ids_.Swap(&other->lobby_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSetLobbyNickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSetLobbyNickname_descriptor_;
  metadata.reflection = RequestSetLobbyNickname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSetLobbyNickname::kStatusFieldNumber;
#endif  // !_MSC_VER

ResponseSetLobbyNickname::ResponseSetLobbyNickname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseSetLobbyNickname::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseSetLobbyNickname::ResponseSetLobbyNickname(const ResponseSetLobbyNickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSetLobbyNickname::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSetLobbyNickname::~ResponseSetLobbyNickname() {
  SharedDtor();
}

void ResponseSetLobbyNickname::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseSetLobbyNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSetLobbyNickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSetLobbyNickname_descriptor_;
}

const ResponseSetLobbyNickname& ResponseSetLobbyNickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ResponseSetLobbyNickname* ResponseSetLobbyNickname::default_instance_ = NULL;

ResponseSetLobbyNickname* ResponseSetLobbyNickname::New() const {
  return new ResponseSetLobbyNickname;
}

void ResponseSetLobbyNickname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSetLobbyNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSetLobbyNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseSetLobbyNickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseSetLobbyNickname::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSetLobbyNickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSetLobbyNickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSetLobbyNickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSetLobbyNickname::MergeFrom(const ResponseSetLobbyNickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSetLobbyNickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSetLobbyNickname::CopyFrom(const ResponseSetLobbyNickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSetLobbyNickname::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ResponseSetLobbyNickname::Swap(ResponseSetLobbyNickname* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSetLobbyNickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSetLobbyNickname_descriptor_;
  metadata.reflection = ResponseSetLobbyNickname_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestRegisterEvents_RegisterAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRegisterEvents_RegisterAction_descriptor_;
}
bool RequestRegisterEvents_RegisterAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestRegisterEvents_RegisterAction RequestRegisterEvents::REGISTER;
const RequestRegisterEvents_RegisterAction RequestRegisterEvents::DEREGISTER;
const RequestRegisterEvents_RegisterAction RequestRegisterEvents::RegisterAction_MIN;
const RequestRegisterEvents_RegisterAction RequestRegisterEvents::RegisterAction_MAX;
const int RequestRegisterEvents::RegisterAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestRegisterEvents::kActionFieldNumber;
#endif  // !_MSC_VER

RequestRegisterEvents::RequestRegisterEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRegisterEvents::InitAsDefaultInstance() {
}

RequestRegisterEvents::RequestRegisterEvents(const RequestRegisterEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRegisterEvents::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegisterEvents::~RequestRegisterEvents() {
  SharedDtor();
}

void RequestRegisterEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRegisterEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRegisterEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRegisterEvents_descriptor_;
}

const RequestRegisterEvents& RequestRegisterEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

RequestRegisterEvents* RequestRegisterEvents::default_instance_ = NULL;

RequestRegisterEvents* RequestRegisterEvents::New() const {
  return new RequestRegisterEvents;
}

void RequestRegisterEvents::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRegisterEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.chat.RequestRegisterEvents.RegisterAction action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::chat::RequestRegisterEvents_RegisterAction_IsValid(value)) {
            set_action(static_cast< ::rsctrl::chat::RequestRegisterEvents_RegisterAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRegisterEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.chat.RequestRegisterEvents.RegisterAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRegisterEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.chat.RequestRegisterEvents.RegisterAction action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRegisterEvents::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.chat.RequestRegisterEvents.RegisterAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegisterEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRegisterEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRegisterEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRegisterEvents::MergeFrom(const RequestRegisterEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRegisterEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRegisterEvents::CopyFrom(const RequestRegisterEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegisterEvents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestRegisterEvents::Swap(RequestRegisterEvents* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRegisterEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRegisterEvents_descriptor_;
  metadata.reflection = RequestRegisterEvents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRegisterEvents::kStatusFieldNumber;
#endif  // !_MSC_VER

ResponseRegisterEvents::ResponseRegisterEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRegisterEvents::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseRegisterEvents::ResponseRegisterEvents(const ResponseRegisterEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRegisterEvents::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRegisterEvents::~ResponseRegisterEvents() {
  SharedDtor();
}

void ResponseRegisterEvents::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseRegisterEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRegisterEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRegisterEvents_descriptor_;
}

const ResponseRegisterEvents& ResponseRegisterEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ResponseRegisterEvents* ResponseRegisterEvents::default_instance_ = NULL;

ResponseRegisterEvents* ResponseRegisterEvents::New() const {
  return new ResponseRegisterEvents;
}

void ResponseRegisterEvents::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRegisterEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRegisterEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRegisterEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRegisterEvents::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRegisterEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRegisterEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRegisterEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRegisterEvents::MergeFrom(const ResponseRegisterEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRegisterEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRegisterEvents::CopyFrom(const ResponseRegisterEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRegisterEvents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ResponseRegisterEvents::Swap(ResponseRegisterEvents* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRegisterEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRegisterEvents_descriptor_;
  metadata.reflection = ResponseRegisterEvents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventLobbyInvite::kLobbyFieldNumber;
#endif  // !_MSC_VER

EventLobbyInvite::EventLobbyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventLobbyInvite::InitAsDefaultInstance() {
  lobby_ = const_cast< ::rsctrl::chat::ChatLobbyInfo*>(&::rsctrl::chat::ChatLobbyInfo::default_instance());
}

EventLobbyInvite::EventLobbyInvite(const EventLobbyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventLobbyInvite::SharedCtor() {
  _cached_size_ = 0;
  lobby_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventLobbyInvite::~EventLobbyInvite() {
  SharedDtor();
}

void EventLobbyInvite::SharedDtor() {
  if (this != default_instance_) {
    delete lobby_;
  }
}

void EventLobbyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventLobbyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventLobbyInvite_descriptor_;
}

const EventLobbyInvite& EventLobbyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

EventLobbyInvite* EventLobbyInvite::default_instance_ = NULL;

EventLobbyInvite* EventLobbyInvite::New() const {
  return new EventLobbyInvite;
}

void EventLobbyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lobby()) {
      if (lobby_ != NULL) lobby_->::rsctrl::chat::ChatLobbyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventLobbyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.chat.ChatLobbyInfo lobby = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lobby()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventLobbyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.chat.ChatLobbyInfo lobby = 1;
  if (has_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobby(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventLobbyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.chat.ChatLobbyInfo lobby = 1;
  if (has_lobby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lobby(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventLobbyInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.chat.ChatLobbyInfo lobby = 1;
    if (has_lobby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobby());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLobbyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventLobbyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventLobbyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventLobbyInvite::MergeFrom(const EventLobbyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby()) {
      mutable_lobby()->::rsctrl::chat::ChatLobbyInfo::MergeFrom(from.lobby());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventLobbyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventLobbyInvite::CopyFrom(const EventLobbyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLobbyInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_lobby()) {
    if (!this->lobby().IsInitialized()) return false;
  }
  return true;
}

void EventLobbyInvite::Swap(EventLobbyInvite* other) {
  if (other != this) {
    std::swap(lobby_, other->lobby_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventLobbyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventLobbyInvite_descriptor_;
  metadata.reflection = EventLobbyInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventChatMessage::kMsgFieldNumber;
#endif  // !_MSC_VER

EventChatMessage::EventChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventChatMessage::InitAsDefaultInstance() {
  msg_ = const_cast< ::rsctrl::chat::ChatMessage*>(&::rsctrl::chat::ChatMessage::default_instance());
}

EventChatMessage::EventChatMessage(const EventChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventChatMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventChatMessage::~EventChatMessage() {
  SharedDtor();
}

void EventChatMessage::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void EventChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventChatMessage_descriptor_;
}

const EventChatMessage& EventChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

EventChatMessage* EventChatMessage::default_instance_ = NULL;

EventChatMessage* EventChatMessage::New() const {
  return new EventChatMessage;
}

void EventChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::rsctrl::chat::ChatMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.chat.ChatMessage msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.chat.ChatMessage msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.chat.ChatMessage msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventChatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.chat.ChatMessage msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventChatMessage::MergeFrom(const EventChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::rsctrl::chat::ChatMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventChatMessage::CopyFrom(const EventChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void EventChatMessage::Swap(EventChatMessage* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventChatMessage_descriptor_;
  metadata.reflection = EventChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSendMessage::kMsgFieldNumber;
#endif  // !_MSC_VER

RequestSendMessage::RequestSendMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSendMessage::InitAsDefaultInstance() {
  msg_ = const_cast< ::rsctrl::chat::ChatMessage*>(&::rsctrl::chat::ChatMessage::default_instance());
}

RequestSendMessage::RequestSendMessage(const RequestSendMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSendMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMessage::~RequestSendMessage() {
  SharedDtor();
}

void RequestSendMessage::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void RequestSendMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSendMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSendMessage_descriptor_;
}

const RequestSendMessage& RequestSendMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

RequestSendMessage* RequestSendMessage::default_instance_ = NULL;

RequestSendMessage* RequestSendMessage::New() const {
  return new RequestSendMessage;
}

void RequestSendMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::rsctrl::chat::ChatMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSendMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.chat.ChatMessage msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSendMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.chat.ChatMessage msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSendMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.chat.ChatMessage msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSendMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.chat.ChatMessage msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSendMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSendMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSendMessage::MergeFrom(const RequestSendMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::rsctrl::chat::ChatMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSendMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSendMessage::CopyFrom(const RequestSendMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void RequestSendMessage::Swap(RequestSendMessage* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSendMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSendMessage_descriptor_;
  metadata.reflection = RequestSendMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSendMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

ResponseSendMessage::ResponseSendMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseSendMessage::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseSendMessage::ResponseSendMessage(const ResponseSendMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSendMessage::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSendMessage::~ResponseSendMessage() {
  SharedDtor();
}

void ResponseSendMessage::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseSendMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSendMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSendMessage_descriptor_;
}

const ResponseSendMessage& ResponseSendMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ResponseSendMessage* ResponseSendMessage::default_instance_ = NULL;

ResponseSendMessage* ResponseSendMessage::New() const {
  return new ResponseSendMessage;
}

void ResponseSendMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSendMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSendMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseSendMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseSendMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSendMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSendMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSendMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSendMessage::MergeFrom(const ResponseSendMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSendMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSendMessage::CopyFrom(const ResponseSendMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSendMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ResponseSendMessage::Swap(ResponseSendMessage* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSendMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSendMessage_descriptor_;
  metadata.reflection = ResponseSendMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestChatHistory::kIdFieldNumber;
#endif  // !_MSC_VER

RequestChatHistory::RequestChatHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestChatHistory::InitAsDefaultInstance() {
  id_ = const_cast< ::rsctrl::chat::ChatId*>(&::rsctrl::chat::ChatId::default_instance());
}

RequestChatHistory::RequestChatHistory(const RequestChatHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChatHistory::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChatHistory::~RequestChatHistory() {
  SharedDtor();
}

void RequestChatHistory::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void RequestChatHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestChatHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestChatHistory_descriptor_;
}

const RequestChatHistory& RequestChatHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

RequestChatHistory* RequestChatHistory::default_instance_ = NULL;

RequestChatHistory* RequestChatHistory::New() const {
  return new RequestChatHistory;
}

void RequestChatHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::rsctrl::chat::ChatId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestChatHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.chat.ChatId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChatHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.chat.ChatId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestChatHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.chat.ChatId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestChatHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.chat.ChatId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChatHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestChatHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestChatHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestChatHistory::MergeFrom(const RequestChatHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::rsctrl::chat::ChatId::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestChatHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestChatHistory::CopyFrom(const RequestChatHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChatHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void RequestChatHistory::Swap(RequestChatHistory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestChatHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestChatHistory_descriptor_;
  metadata.reflection = RequestChatHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseChatHistory::kStatusFieldNumber;
const int ResponseChatHistory::kIdFieldNumber;
const int ResponseChatHistory::kMsgsFieldNumber;
#endif  // !_MSC_VER

ResponseChatHistory::ResponseChatHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseChatHistory::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
  id_ = const_cast< ::rsctrl::chat::ChatId*>(&::rsctrl::chat::ChatId::default_instance());
}

ResponseChatHistory::ResponseChatHistory(const ResponseChatHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseChatHistory::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseChatHistory::~ResponseChatHistory() {
  SharedDtor();
}

void ResponseChatHistory::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete id_;
  }
}

void ResponseChatHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseChatHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseChatHistory_descriptor_;
}

const ResponseChatHistory& ResponseChatHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ResponseChatHistory* ResponseChatHistory::default_instance_ = NULL;

ResponseChatHistory* ResponseChatHistory::New() const {
  return new ResponseChatHistory;
}

void ResponseChatHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
    if (has_id()) {
      if (id_ != NULL) id_->::rsctrl::chat::ChatId::Clear();
    }
  }
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseChatHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // required .rsctrl.chat.ChatId id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgs;
        break;
      }
      
      // repeated .rsctrl.chat.ChatMessage msgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseChatHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // required .rsctrl.chat.ChatId id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id(), output);
  }
  
  // repeated .rsctrl.chat.ChatMessage msgs = 3;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseChatHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // required .rsctrl.chat.ChatId id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id(), target);
  }
  
  // repeated .rsctrl.chat.ChatMessage msgs = 3;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseChatHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // required .rsctrl.chat.ChatId id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
  }
  // repeated .rsctrl.chat.ChatMessage msgs = 3;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseChatHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseChatHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseChatHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseChatHistory::MergeFrom(const ResponseChatHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
    if (from.has_id()) {
      mutable_id()->::rsctrl::chat::ChatId::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseChatHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseChatHistory::CopyFrom(const ResponseChatHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseChatHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  for (int i = 0; i < msgs_size(); i++) {
    if (!this->msgs(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseChatHistory::Swap(ResponseChatHistory* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(id_, other->id_);
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseChatHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseChatHistory_descriptor_;
  metadata.reflection = ResponseChatHistory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace rsctrl

// @@protoc_insertion_point(global_scope)
