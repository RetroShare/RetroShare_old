// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace stream {

namespace {

const ::google::protobuf::Descriptor* StreamFileDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamFileDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamVoipDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamVoipDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStartFileStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStartFileStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseStreamDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseStreamDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestControlStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestControlStream_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestControlStream_StreamAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestListStreams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestListStreams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseStreamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseStreamData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_stream_2eproto() {
  protobuf_AddDesc_stream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stream.proto");
  GOOGLE_CHECK(file != NULL);
  StreamFileDetail_descriptor_ = file->message_type(0);
  static const int StreamFileDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFileDetail, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFileDetail, offset_),
  };
  StreamFileDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamFileDetail_descriptor_,
      StreamFileDetail::default_instance_,
      StreamFileDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFileDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFileDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamFileDetail));
  StreamVoipDetail_descriptor_ = file->message_type(1);
  static const int StreamVoipDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVoipDetail, peer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVoipDetail, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVoipDetail, offset_),
  };
  StreamVoipDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamVoipDetail_descriptor_,
      StreamVoipDetail::default_instance_,
      StreamVoipDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVoipDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVoipDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamVoipDetail));
  StreamDesc_descriptor_ = file->message_type(2);
  static const int StreamDesc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDesc, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDesc, stream_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDesc, stream_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDesc, rate_kbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDesc, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDesc, voip_),
  };
  StreamDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamDesc_descriptor_,
      StreamDesc::default_instance_,
      StreamDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamDesc));
  StreamData_descriptor_ = file->message_type(3);
  static const int StreamData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, stream_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, stream_data_),
  };
  StreamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamData_descriptor_,
      StreamData::default_instance_,
      StreamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamData));
  RequestStartFileStream_descriptor_ = file->message_type(4);
  static const int RequestStartFileStream_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartFileStream, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartFileStream, rate_kbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartFileStream, start_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartFileStream, end_byte_),
  };
  RequestStartFileStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStartFileStream_descriptor_,
      RequestStartFileStream::default_instance_,
      RequestStartFileStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartFileStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartFileStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStartFileStream));
  ResponseStreamDetail_descriptor_ = file->message_type(5);
  static const int ResponseStreamDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStreamDetail, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStreamDetail, streams_),
  };
  ResponseStreamDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseStreamDetail_descriptor_,
      ResponseStreamDetail::default_instance_,
      ResponseStreamDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStreamDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStreamDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseStreamDetail));
  RequestControlStream_descriptor_ = file->message_type(6);
  static const int RequestControlStream_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestControlStream, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestControlStream, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestControlStream, rate_kbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestControlStream, seek_byte_),
  };
  RequestControlStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestControlStream_descriptor_,
      RequestControlStream::default_instance_,
      RequestControlStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestControlStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestControlStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestControlStream));
  RequestControlStream_StreamAction_descriptor_ = RequestControlStream_descriptor_->enum_type(0);
  RequestListStreams_descriptor_ = file->message_type(7);
  static const int RequestListStreams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestListStreams, request_type_),
  };
  RequestListStreams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestListStreams_descriptor_,
      RequestListStreams::default_instance_,
      RequestListStreams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestListStreams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestListStreams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestListStreams));
  ResponseStreamData_descriptor_ = file->message_type(8);
  static const int ResponseStreamData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStreamData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStreamData, data_),
  };
  ResponseStreamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseStreamData_descriptor_,
      ResponseStreamData::default_instance_,
      ResponseStreamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStreamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStreamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseStreamData));
  RequestMsgIds_descriptor_ = file->enum_type(0);
  ResponseMsgIds_descriptor_ = file->enum_type(1);
  StreamType_descriptor_ = file->enum_type(2);
  StreamState_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamFileDetail_descriptor_, &StreamFileDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamVoipDetail_descriptor_, &StreamVoipDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamDesc_descriptor_, &StreamDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamData_descriptor_, &StreamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStartFileStream_descriptor_, &RequestStartFileStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseStreamDetail_descriptor_, &ResponseStreamDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestControlStream_descriptor_, &RequestControlStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestListStreams_descriptor_, &RequestListStreams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseStreamData_descriptor_, &ResponseStreamData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stream_2eproto() {
  delete StreamFileDetail::default_instance_;
  delete StreamFileDetail_reflection_;
  delete StreamVoipDetail::default_instance_;
  delete StreamVoipDetail_reflection_;
  delete StreamDesc::default_instance_;
  delete StreamDesc_reflection_;
  delete StreamData::default_instance_;
  delete StreamData_reflection_;
  delete RequestStartFileStream::default_instance_;
  delete RequestStartFileStream_reflection_;
  delete ResponseStreamDetail::default_instance_;
  delete ResponseStreamDetail_reflection_;
  delete RequestControlStream::default_instance_;
  delete RequestControlStream_reflection_;
  delete RequestListStreams::default_instance_;
  delete RequestListStreams_reflection_;
  delete ResponseStreamData::default_instance_;
  delete ResponseStreamData_reflection_;
}

void protobuf_AddDesc_stream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rsctrl::core::protobuf_AddDesc_core_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014stream.proto\022\rrsctrl.stream\032\ncore.prot"
    "o\"C\n\020StreamFileDetail\022\037\n\004file\030\001 \002(\0132\021.rs"
    "ctrl.core.File\022\016\n\006offset\030\005 \002(\004\"E\n\020Stream"
    "VoipDetail\022\017\n\007peer_id\030\001 \002(\t\022\020\n\010duration\030"
    "\002 \002(\004\022\016\n\006offset\030\003 \002(\004\"\361\001\n\nStreamDesc\022\021\n\t"
    "stream_id\030\001 \002(\r\022.\n\013stream_type\030\002 \002(\0162\031.r"
    "sctrl.stream.StreamType\0220\n\014stream_state\030"
    "\003 \002(\0162\032.rsctrl.stream.StreamState\022\020\n\010rat"
    "e_kbs\030\004 \002(\002\022-\n\004file\030\005 \001(\0132\037.rsctrl.strea"
    "m.StreamFileDetail\022-\n\004voip\030\006 \001(\0132\037.rsctr"
    "l.stream.StreamVoipDetail\"\257\001\n\nStreamData"
    "\022\021\n\tstream_id\030\001 \002(\r\0220\n\014stream_state\030\002 \002("
    "\0162\032.rsctrl.stream.StreamState\022)\n\tsend_ti"
    "me\030\003 \002(\0132\026.rsctrl.core.Timestamp\022\016\n\006offs"
    "et\030\004 \002(\004\022\014\n\004size\030\005 \002(\r\022\023\n\013stream_data\030\006 "
    "\002(\014\"q\n\026RequestStartFileStream\022\037\n\004file\030\001 "
    "\002(\0132\021.rsctrl.core.File\022\020\n\010rate_kbs\030\002 \002(\002"
    "\022\022\n\nstart_byte\030\003 \001(\004\022\020\n\010end_byte\030\004 \001(\004\"g"
    "\n\024ResponseStreamDetail\022#\n\006status\030\001 \002(\0132\023"
    ".rsctrl.core.Status\022*\n\007streams\030\002 \003(\0132\031.r"
    "sctrl.stream.StreamDesc\"\376\001\n\024RequestContr"
    "olStream\022\021\n\tstream_id\030\001 \002(\r\022@\n\006action\030\002 "
    "\002(\01620.rsctrl.stream.RequestControlStream"
    ".StreamAction\022\020\n\010rate_kbs\030\003 \001(\002\022\021\n\tseek_"
    "byte\030\004 \001(\004\"l\n\014StreamAction\022\020\n\014STREAM_STA"
    "RT\020\001\022\017\n\013STREAM_STOP\020\002\022\020\n\014STREAM_PAUSE\020\003\022"
    "\026\n\022STREAM_CHANGE_RATE\020\004\022\017\n\013STREAM_SEEK\020\005"
    "\"E\n\022RequestListStreams\022/\n\014request_type\030\001"
    " \002(\0162\031.rsctrl.stream.StreamType\"b\n\022Respo"
    "nseStreamData\022#\n\006status\030\001 \002(\0132\023.rsctrl.c"
    "ore.Status\022\'\n\004data\030\002 \002(\0132\031.rsctrl.stream"
    ".StreamData*o\n\rRequestMsgIds\022 \n\034MsgId_Re"
    "questStartFileStream\020\001\022\036\n\032MsgId_RequestC"
    "ontrolStream\020\002\022\034\n\030MsgId_RequestListStrea"
    "ms\020\003*N\n\016ResponseMsgIds\022\036\n\032MsgId_Response"
    "StreamDetail\020\001\022\034\n\030MsgId_ResponseStreamDa"
    "ta\020e*e\n\nStreamType\022\023\n\017STREAM_TYPE_ALL\020\001\022"
    "\025\n\021STREAM_TYPE_FILES\020\002\022\024\n\020STREAM_TYPE_VO"
    "IP\020\003\022\025\n\021STREAM_TYPE_OTHER\020\004*o\n\013StreamSta"
    "te\022\026\n\022STREAM_STATE_ERROR\020\000\022\024\n\020STREAM_STA"
    "TE_RUN\020\001\022\027\n\023STREAM_STATE_PAUSED\020\002\022\031\n\025STR"
    "EAM_STATE_FINISHED\020\003", 1660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stream.proto", &protobuf_RegisterTypes);
  StreamFileDetail::default_instance_ = new StreamFileDetail();
  StreamVoipDetail::default_instance_ = new StreamVoipDetail();
  StreamDesc::default_instance_ = new StreamDesc();
  StreamData::default_instance_ = new StreamData();
  RequestStartFileStream::default_instance_ = new RequestStartFileStream();
  ResponseStreamDetail::default_instance_ = new ResponseStreamDetail();
  RequestControlStream::default_instance_ = new RequestControlStream();
  RequestListStreams::default_instance_ = new RequestListStreams();
  ResponseStreamData::default_instance_ = new ResponseStreamData();
  StreamFileDetail::default_instance_->InitAsDefaultInstance();
  StreamVoipDetail::default_instance_->InitAsDefaultInstance();
  StreamDesc::default_instance_->InitAsDefaultInstance();
  StreamData::default_instance_->InitAsDefaultInstance();
  RequestStartFileStream::default_instance_->InitAsDefaultInstance();
  ResponseStreamDetail::default_instance_->InitAsDefaultInstance();
  RequestControlStream::default_instance_->InitAsDefaultInstance();
  RequestListStreams::default_instance_->InitAsDefaultInstance();
  ResponseStreamData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stream_2eproto {
  StaticDescriptorInitializer_stream_2eproto() {
    protobuf_AddDesc_stream_2eproto();
  }
} static_descriptor_initializer_stream_2eproto_;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMsgIds_descriptor_;
}
bool RequestMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseMsgIds_descriptor_;
}
bool ResponseMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StreamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamType_descriptor_;
}
bool StreamType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StreamState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamState_descriptor_;
}
bool StreamState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StreamFileDetail::kFileFieldNumber;
const int StreamFileDetail::kOffsetFieldNumber;
#endif  // !_MSC_VER

StreamFileDetail::StreamFileDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamFileDetail::InitAsDefaultInstance() {
  file_ = const_cast< ::rsctrl::core::File*>(&::rsctrl::core::File::default_instance());
}

StreamFileDetail::StreamFileDetail(const StreamFileDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamFileDetail::SharedCtor() {
  _cached_size_ = 0;
  file_ = NULL;
  offset_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamFileDetail::~StreamFileDetail() {
  SharedDtor();
}

void StreamFileDetail::SharedDtor() {
  if (this != default_instance_) {
    delete file_;
  }
}

void StreamFileDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamFileDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamFileDetail_descriptor_;
}

const StreamFileDetail& StreamFileDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

StreamFileDetail* StreamFileDetail::default_instance_ = NULL;

StreamFileDetail* StreamFileDetail::New() const {
  return new StreamFileDetail;
}

void StreamFileDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != NULL) file_->::rsctrl::core::File::Clear();
    }
    offset_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamFileDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.File file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }
      
      // required uint64 offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamFileDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.File file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file(), output);
  }
  
  // required uint64 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamFileDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.File file = 1;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file(), target);
  }
  
  // required uint64 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamFileDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.File file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // required uint64 offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamFileDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamFileDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamFileDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamFileDetail::MergeFrom(const StreamFileDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      mutable_file()->::rsctrl::core::File::MergeFrom(from.file());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamFileDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamFileDetail::CopyFrom(const StreamFileDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamFileDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  return true;
}

void StreamFileDetail::Swap(StreamFileDetail* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamFileDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamFileDetail_descriptor_;
  metadata.reflection = StreamFileDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamVoipDetail::kPeerIdFieldNumber;
const int StreamVoipDetail::kDurationFieldNumber;
const int StreamVoipDetail::kOffsetFieldNumber;
#endif  // !_MSC_VER

StreamVoipDetail::StreamVoipDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamVoipDetail::InitAsDefaultInstance() {
}

StreamVoipDetail::StreamVoipDetail(const StreamVoipDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamVoipDetail::SharedCtor() {
  _cached_size_ = 0;
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamVoipDetail::~StreamVoipDetail() {
  SharedDtor();
}

void StreamVoipDetail::SharedDtor() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void StreamVoipDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamVoipDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamVoipDetail_descriptor_;
}

const StreamVoipDetail& StreamVoipDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

StreamVoipDetail* StreamVoipDetail::default_instance_ = NULL;

StreamVoipDetail* StreamVoipDetail::New() const {
  return new StreamVoipDetail;
}

void StreamVoipDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
        peer_id_->clear();
      }
    }
    duration_ = GOOGLE_ULONGLONG(0);
    offset_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamVoipDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peer_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }
      
      // required uint64 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }
      
      // required uint64 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamVoipDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string peer_id = 1;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peer_id(), output);
  }
  
  // required uint64 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->duration(), output);
  }
  
  // required uint64 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamVoipDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string peer_id = 1;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peer_id(), target);
  }
  
  // required uint64 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->duration(), target);
  }
  
  // required uint64 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamVoipDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string peer_id = 1;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }
    
    // required uint64 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration());
    }
    
    // required uint64 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamVoipDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamVoipDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamVoipDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamVoipDetail::MergeFrom(const StreamVoipDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamVoipDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamVoipDetail::CopyFrom(const StreamVoipDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamVoipDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StreamVoipDetail::Swap(StreamVoipDetail* other) {
  if (other != this) {
    std::swap(peer_id_, other->peer_id_);
    std::swap(duration_, other->duration_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamVoipDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamVoipDetail_descriptor_;
  metadata.reflection = StreamVoipDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamDesc::kStreamIdFieldNumber;
const int StreamDesc::kStreamTypeFieldNumber;
const int StreamDesc::kStreamStateFieldNumber;
const int StreamDesc::kRateKbsFieldNumber;
const int StreamDesc::kFileFieldNumber;
const int StreamDesc::kVoipFieldNumber;
#endif  // !_MSC_VER

StreamDesc::StreamDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamDesc::InitAsDefaultInstance() {
  file_ = const_cast< ::rsctrl::stream::StreamFileDetail*>(&::rsctrl::stream::StreamFileDetail::default_instance());
  voip_ = const_cast< ::rsctrl::stream::StreamVoipDetail*>(&::rsctrl::stream::StreamVoipDetail::default_instance());
}

StreamDesc::StreamDesc(const StreamDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamDesc::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = 0u;
  stream_type_ = 1;
  stream_state_ = 0;
  rate_kbs_ = 0;
  file_ = NULL;
  voip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamDesc::~StreamDesc() {
  SharedDtor();
}

void StreamDesc::SharedDtor() {
  if (this != default_instance_) {
    delete file_;
    delete voip_;
  }
}

void StreamDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamDesc_descriptor_;
}

const StreamDesc& StreamDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

StreamDesc* StreamDesc::default_instance_ = NULL;

StreamDesc* StreamDesc::New() const {
  return new StreamDesc;
}

void StreamDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stream_id_ = 0u;
    stream_type_ = 1;
    stream_state_ = 0;
    rate_kbs_ = 0;
    if (has_file()) {
      if (file_ != NULL) file_->::rsctrl::stream::StreamFileDetail::Clear();
    }
    if (has_voip()) {
      if (voip_ != NULL) voip_->::rsctrl::stream::StreamVoipDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stream_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stream_type;
        break;
      }
      
      // required .rsctrl.stream.StreamType stream_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rsctrl::stream::StreamType_IsValid(value)) {
            set_stream_type(static_cast< rsctrl::stream::StreamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stream_state;
        break;
      }
      
      // required .rsctrl.stream.StreamState stream_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rsctrl::stream::StreamState_IsValid(value)) {
            set_stream_state(static_cast< rsctrl::stream::StreamState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_rate_kbs;
        break;
      }
      
      // required float rate_kbs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate_kbs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_kbs_)));
          set_has_rate_kbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file;
        break;
      }
      
      // optional .rsctrl.stream.StreamFileDetail file = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_voip;
        break;
      }
      
      // optional .rsctrl.stream.StreamVoipDetail voip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stream_id(), output);
  }
  
  // required .rsctrl.stream.StreamType stream_type = 2;
  if (has_stream_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stream_type(), output);
  }
  
  // required .rsctrl.stream.StreamState stream_state = 3;
  if (has_stream_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->stream_state(), output);
  }
  
  // required float rate_kbs = 4;
  if (has_rate_kbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rate_kbs(), output);
  }
  
  // optional .rsctrl.stream.StreamFileDetail file = 5;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->file(), output);
  }
  
  // optional .rsctrl.stream.StreamVoipDetail voip = 6;
  if (has_voip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->voip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stream_id(), target);
  }
  
  // required .rsctrl.stream.StreamType stream_type = 2;
  if (has_stream_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stream_type(), target);
  }
  
  // required .rsctrl.stream.StreamState stream_state = 3;
  if (has_stream_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->stream_state(), target);
  }
  
  // required float rate_kbs = 4;
  if (has_rate_kbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rate_kbs(), target);
  }
  
  // optional .rsctrl.stream.StreamFileDetail file = 5;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->file(), target);
  }
  
  // optional .rsctrl.stream.StreamVoipDetail voip = 6;
  if (has_voip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->voip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_id());
    }
    
    // required .rsctrl.stream.StreamType stream_type = 2;
    if (has_stream_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_type());
    }
    
    // required .rsctrl.stream.StreamState stream_state = 3;
    if (has_stream_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_state());
    }
    
    // required float rate_kbs = 4;
    if (has_rate_kbs()) {
      total_size += 1 + 4;
    }
    
    // optional .rsctrl.stream.StreamFileDetail file = 5;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // optional .rsctrl.stream.StreamVoipDetail voip = 6;
    if (has_voip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamDesc::MergeFrom(const StreamDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_stream_type()) {
      set_stream_type(from.stream_type());
    }
    if (from.has_stream_state()) {
      set_stream_state(from.stream_state());
    }
    if (from.has_rate_kbs()) {
      set_rate_kbs(from.rate_kbs());
    }
    if (from.has_file()) {
      mutable_file()->::rsctrl::stream::StreamFileDetail::MergeFrom(from.file());
    }
    if (from.has_voip()) {
      mutable_voip()->::rsctrl::stream::StreamVoipDetail::MergeFrom(from.voip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamDesc::CopyFrom(const StreamDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  if (has_voip()) {
    if (!this->voip().IsInitialized()) return false;
  }
  return true;
}

void StreamDesc::Swap(StreamDesc* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(stream_type_, other->stream_type_);
    std::swap(stream_state_, other->stream_state_);
    std::swap(rate_kbs_, other->rate_kbs_);
    std::swap(file_, other->file_);
    std::swap(voip_, other->voip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamDesc_descriptor_;
  metadata.reflection = StreamDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamData::kStreamIdFieldNumber;
const int StreamData::kStreamStateFieldNumber;
const int StreamData::kSendTimeFieldNumber;
const int StreamData::kOffsetFieldNumber;
const int StreamData::kSizeFieldNumber;
const int StreamData::kStreamDataFieldNumber;
#endif  // !_MSC_VER

StreamData::StreamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamData::InitAsDefaultInstance() {
  send_time_ = const_cast< ::rsctrl::core::Timestamp*>(&::rsctrl::core::Timestamp::default_instance());
}

StreamData::StreamData(const StreamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamData::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = 0u;
  stream_state_ = 0;
  send_time_ = NULL;
  offset_ = GOOGLE_ULONGLONG(0);
  size_ = 0u;
  stream_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamData::~StreamData() {
  SharedDtor();
}

void StreamData::SharedDtor() {
  if (stream_data_ != &::google::protobuf::internal::kEmptyString) {
    delete stream_data_;
  }
  if (this != default_instance_) {
    delete send_time_;
  }
}

void StreamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamData_descriptor_;
}

const StreamData& StreamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

StreamData* StreamData::default_instance_ = NULL;

StreamData* StreamData::New() const {
  return new StreamData;
}

void StreamData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stream_id_ = 0u;
    stream_state_ = 0;
    if (has_send_time()) {
      if (send_time_ != NULL) send_time_->::rsctrl::core::Timestamp::Clear();
    }
    offset_ = GOOGLE_ULONGLONG(0);
    size_ = 0u;
    if (has_stream_data()) {
      if (stream_data_ != &::google::protobuf::internal::kEmptyString) {
        stream_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stream_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stream_state;
        break;
      }
      
      // required .rsctrl.stream.StreamState stream_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rsctrl::stream::StreamState_IsValid(value)) {
            set_stream_state(static_cast< rsctrl::stream::StreamState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_send_time;
        break;
      }
      
      // required .rsctrl.core.Timestamp send_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }
      
      // required uint64 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_size;
        break;
      }
      
      // required uint32 size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stream_data;
        break;
      }
      
      // required bytes stream_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stream_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stream_id(), output);
  }
  
  // required .rsctrl.stream.StreamState stream_state = 2;
  if (has_stream_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stream_state(), output);
  }
  
  // required .rsctrl.core.Timestamp send_time = 3;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->send_time(), output);
  }
  
  // required uint64 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->offset(), output);
  }
  
  // required uint32 size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->size(), output);
  }
  
  // required bytes stream_data = 6;
  if (has_stream_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->stream_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stream_id(), target);
  }
  
  // required .rsctrl.stream.StreamState stream_state = 2;
  if (has_stream_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stream_state(), target);
  }
  
  // required .rsctrl.core.Timestamp send_time = 3;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->send_time(), target);
  }
  
  // required uint64 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->offset(), target);
  }
  
  // required uint32 size = 5;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->size(), target);
  }
  
  // required bytes stream_data = 6;
  if (has_stream_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->stream_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_id());
    }
    
    // required .rsctrl.stream.StreamState stream_state = 2;
    if (has_stream_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_state());
    }
    
    // required .rsctrl.core.Timestamp send_time = 3;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_time());
    }
    
    // required uint64 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
    // required uint32 size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
    // required bytes stream_data = 6;
    if (has_stream_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stream_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamData::MergeFrom(const StreamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_stream_state()) {
      set_stream_state(from.stream_state());
    }
    if (from.has_send_time()) {
      mutable_send_time()->::rsctrl::core::Timestamp::MergeFrom(from.send_time());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_stream_data()) {
      set_stream_data(from.stream_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamData::CopyFrom(const StreamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_send_time()) {
    if (!this->send_time().IsInitialized()) return false;
  }
  return true;
}

void StreamData::Swap(StreamData* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(stream_state_, other->stream_state_);
    std::swap(send_time_, other->send_time_);
    std::swap(offset_, other->offset_);
    std::swap(size_, other->size_);
    std::swap(stream_data_, other->stream_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamData_descriptor_;
  metadata.reflection = StreamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestStartFileStream::kFileFieldNumber;
const int RequestStartFileStream::kRateKbsFieldNumber;
const int RequestStartFileStream::kStartByteFieldNumber;
const int RequestStartFileStream::kEndByteFieldNumber;
#endif  // !_MSC_VER

RequestStartFileStream::RequestStartFileStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestStartFileStream::InitAsDefaultInstance() {
  file_ = const_cast< ::rsctrl::core::File*>(&::rsctrl::core::File::default_instance());
}

RequestStartFileStream::RequestStartFileStream(const RequestStartFileStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStartFileStream::SharedCtor() {
  _cached_size_ = 0;
  file_ = NULL;
  rate_kbs_ = 0;
  start_byte_ = GOOGLE_ULONGLONG(0);
  end_byte_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStartFileStream::~RequestStartFileStream() {
  SharedDtor();
}

void RequestStartFileStream::SharedDtor() {
  if (this != default_instance_) {
    delete file_;
  }
}

void RequestStartFileStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStartFileStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStartFileStream_descriptor_;
}

const RequestStartFileStream& RequestStartFileStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

RequestStartFileStream* RequestStartFileStream::default_instance_ = NULL;

RequestStartFileStream* RequestStartFileStream::New() const {
  return new RequestStartFileStream;
}

void RequestStartFileStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != NULL) file_->::rsctrl::core::File::Clear();
    }
    rate_kbs_ = 0;
    start_byte_ = GOOGLE_ULONGLONG(0);
    end_byte_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStartFileStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.File file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rate_kbs;
        break;
      }
      
      // required float rate_kbs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate_kbs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_kbs_)));
          set_has_rate_kbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_byte;
        break;
      }
      
      // optional uint64 start_byte = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_byte_)));
          set_has_start_byte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_byte;
        break;
      }
      
      // optional uint64 end_byte = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_byte_)));
          set_has_end_byte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestStartFileStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.File file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file(), output);
  }
  
  // required float rate_kbs = 2;
  if (has_rate_kbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rate_kbs(), output);
  }
  
  // optional uint64 start_byte = 3;
  if (has_start_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start_byte(), output);
  }
  
  // optional uint64 end_byte = 4;
  if (has_end_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_byte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestStartFileStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.File file = 1;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file(), target);
  }
  
  // required float rate_kbs = 2;
  if (has_rate_kbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rate_kbs(), target);
  }
  
  // optional uint64 start_byte = 3;
  if (has_start_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start_byte(), target);
  }
  
  // optional uint64 end_byte = 4;
  if (has_end_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_byte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestStartFileStream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.File file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // required float rate_kbs = 2;
    if (has_rate_kbs()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 start_byte = 3;
    if (has_start_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_byte());
    }
    
    // optional uint64 end_byte = 4;
    if (has_end_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_byte());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStartFileStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStartFileStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStartFileStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStartFileStream::MergeFrom(const RequestStartFileStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      mutable_file()->::rsctrl::core::File::MergeFrom(from.file());
    }
    if (from.has_rate_kbs()) {
      set_rate_kbs(from.rate_kbs());
    }
    if (from.has_start_byte()) {
      set_start_byte(from.start_byte());
    }
    if (from.has_end_byte()) {
      set_end_byte(from.end_byte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStartFileStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStartFileStream::CopyFrom(const RequestStartFileStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStartFileStream::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  return true;
}

void RequestStartFileStream::Swap(RequestStartFileStream* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(rate_kbs_, other->rate_kbs_);
    std::swap(start_byte_, other->start_byte_);
    std::swap(end_byte_, other->end_byte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStartFileStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStartFileStream_descriptor_;
  metadata.reflection = RequestStartFileStream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseStreamDetail::kStatusFieldNumber;
const int ResponseStreamDetail::kStreamsFieldNumber;
#endif  // !_MSC_VER

ResponseStreamDetail::ResponseStreamDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseStreamDetail::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseStreamDetail::ResponseStreamDetail(const ResponseStreamDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseStreamDetail::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseStreamDetail::~ResponseStreamDetail() {
  SharedDtor();
}

void ResponseStreamDetail::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseStreamDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseStreamDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStreamDetail_descriptor_;
}

const ResponseStreamDetail& ResponseStreamDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

ResponseStreamDetail* ResponseStreamDetail::default_instance_ = NULL;

ResponseStreamDetail* ResponseStreamDetail::New() const {
  return new ResponseStreamDetail;
}

void ResponseStreamDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  streams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseStreamDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_streams;
        break;
      }
      
      // repeated .rsctrl.stream.StreamDesc streams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_streams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_streams;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseStreamDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // repeated .rsctrl.stream.StreamDesc streams = 2;
  for (int i = 0; i < this->streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->streams(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseStreamDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // repeated .rsctrl.stream.StreamDesc streams = 2;
  for (int i = 0; i < this->streams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->streams(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseStreamDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  // repeated .rsctrl.stream.StreamDesc streams = 2;
  total_size += 1 * this->streams_size();
  for (int i = 0; i < this->streams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streams(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseStreamDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseStreamDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseStreamDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseStreamDetail::MergeFrom(const ResponseStreamDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  streams_.MergeFrom(from.streams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseStreamDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStreamDetail::CopyFrom(const ResponseStreamDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStreamDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < streams_size(); i++) {
    if (!this->streams(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseStreamDetail::Swap(ResponseStreamDetail* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    streams_.Swap(&other->streams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseStreamDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseStreamDetail_descriptor_;
  metadata.reflection = ResponseStreamDetail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestControlStream_StreamAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestControlStream_StreamAction_descriptor_;
}
bool RequestControlStream_StreamAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestControlStream_StreamAction RequestControlStream::STREAM_START;
const RequestControlStream_StreamAction RequestControlStream::STREAM_STOP;
const RequestControlStream_StreamAction RequestControlStream::STREAM_PAUSE;
const RequestControlStream_StreamAction RequestControlStream::STREAM_CHANGE_RATE;
const RequestControlStream_StreamAction RequestControlStream::STREAM_SEEK;
const RequestControlStream_StreamAction RequestControlStream::StreamAction_MIN;
const RequestControlStream_StreamAction RequestControlStream::StreamAction_MAX;
const int RequestControlStream::StreamAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestControlStream::kStreamIdFieldNumber;
const int RequestControlStream::kActionFieldNumber;
const int RequestControlStream::kRateKbsFieldNumber;
const int RequestControlStream::kSeekByteFieldNumber;
#endif  // !_MSC_VER

RequestControlStream::RequestControlStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestControlStream::InitAsDefaultInstance() {
}

RequestControlStream::RequestControlStream(const RequestControlStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestControlStream::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = 0u;
  action_ = 1;
  rate_kbs_ = 0;
  seek_byte_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestControlStream::~RequestControlStream() {
  SharedDtor();
}

void RequestControlStream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestControlStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestControlStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestControlStream_descriptor_;
}

const RequestControlStream& RequestControlStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

RequestControlStream* RequestControlStream::default_instance_ = NULL;

RequestControlStream* RequestControlStream::New() const {
  return new RequestControlStream;
}

void RequestControlStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stream_id_ = 0u;
    action_ = 1;
    rate_kbs_ = 0;
    seek_byte_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestControlStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stream_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }
      
      // required .rsctrl.stream.RequestControlStream.StreamAction action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::stream::RequestControlStream_StreamAction_IsValid(value)) {
            set_action(static_cast< ::rsctrl::stream::RequestControlStream_StreamAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rate_kbs;
        break;
      }
      
      // optional float rate_kbs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate_kbs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_kbs_)));
          set_has_rate_kbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seek_byte;
        break;
      }
      
      // optional uint64 seek_byte = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seek_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seek_byte_)));
          set_has_seek_byte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestControlStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stream_id(), output);
  }
  
  // required .rsctrl.stream.RequestControlStream.StreamAction action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }
  
  // optional float rate_kbs = 3;
  if (has_rate_kbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rate_kbs(), output);
  }
  
  // optional uint64 seek_byte = 4;
  if (has_seek_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->seek_byte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestControlStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stream_id(), target);
  }
  
  // required .rsctrl.stream.RequestControlStream.StreamAction action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }
  
  // optional float rate_kbs = 3;
  if (has_rate_kbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rate_kbs(), target);
  }
  
  // optional uint64 seek_byte = 4;
  if (has_seek_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->seek_byte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestControlStream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_id());
    }
    
    // required .rsctrl.stream.RequestControlStream.StreamAction action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }
    
    // optional float rate_kbs = 3;
    if (has_rate_kbs()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 seek_byte = 4;
    if (has_seek_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seek_byte());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestControlStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestControlStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestControlStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestControlStream::MergeFrom(const RequestControlStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_rate_kbs()) {
      set_rate_kbs(from.rate_kbs());
    }
    if (from.has_seek_byte()) {
      set_seek_byte(from.seek_byte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestControlStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestControlStream::CopyFrom(const RequestControlStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestControlStream::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestControlStream::Swap(RequestControlStream* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(action_, other->action_);
    std::swap(rate_kbs_, other->rate_kbs_);
    std::swap(seek_byte_, other->seek_byte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestControlStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestControlStream_descriptor_;
  metadata.reflection = RequestControlStream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestListStreams::kRequestTypeFieldNumber;
#endif  // !_MSC_VER

RequestListStreams::RequestListStreams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestListStreams::InitAsDefaultInstance() {
}

RequestListStreams::RequestListStreams(const RequestListStreams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestListStreams::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestListStreams::~RequestListStreams() {
  SharedDtor();
}

void RequestListStreams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestListStreams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestListStreams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestListStreams_descriptor_;
}

const RequestListStreams& RequestListStreams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

RequestListStreams* RequestListStreams::default_instance_ = NULL;

RequestListStreams* RequestListStreams::New() const {
  return new RequestListStreams;
}

void RequestListStreams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestListStreams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.stream.StreamType request_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rsctrl::stream::StreamType_IsValid(value)) {
            set_request_type(static_cast< rsctrl::stream::StreamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestListStreams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.stream.StreamType request_type = 1;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestListStreams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.stream.StreamType request_type = 1;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestListStreams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.stream.StreamType request_type = 1;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestListStreams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestListStreams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestListStreams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestListStreams::MergeFrom(const RequestListStreams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestListStreams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestListStreams::CopyFrom(const RequestListStreams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestListStreams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestListStreams::Swap(RequestListStreams* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestListStreams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestListStreams_descriptor_;
  metadata.reflection = RequestListStreams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseStreamData::kStatusFieldNumber;
const int ResponseStreamData::kDataFieldNumber;
#endif  // !_MSC_VER

ResponseStreamData::ResponseStreamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseStreamData::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
  data_ = const_cast< ::rsctrl::stream::StreamData*>(&::rsctrl::stream::StreamData::default_instance());
}

ResponseStreamData::ResponseStreamData(const ResponseStreamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseStreamData::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseStreamData::~ResponseStreamData() {
  SharedDtor();
}

void ResponseStreamData::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete data_;
  }
}

void ResponseStreamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseStreamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStreamData_descriptor_;
}

const ResponseStreamData& ResponseStreamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

ResponseStreamData* ResponseStreamData::default_instance_ = NULL;

ResponseStreamData* ResponseStreamData::New() const {
  return new ResponseStreamData;
}

void ResponseStreamData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::rsctrl::stream::StreamData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseStreamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required .rsctrl.stream.StreamData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseStreamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // required .rsctrl.stream.StreamData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseStreamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // required .rsctrl.stream.StreamData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseStreamData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // required .rsctrl.stream.StreamData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseStreamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseStreamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseStreamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseStreamData::MergeFrom(const ResponseStreamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
    if (from.has_data()) {
      mutable_data()->::rsctrl::stream::StreamData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseStreamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStreamData::CopyFrom(const ResponseStreamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStreamData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void ResponseStreamData::Swap(ResponseStreamData* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseStreamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseStreamData_descriptor_;
  metadata.reflection = ResponseStreamData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace rsctrl

// @@protoc_insertion_point(global_scope)
