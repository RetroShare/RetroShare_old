// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace system {

namespace {

const ::google::protobuf::Descriptor* RequestSystemStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSystemStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSystemStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSystemStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseSystemStatus_NetCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestSystemQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSystemQuit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestSystemQuit_QuitCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResponseSystemQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSystemQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSystemExternalAccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSystemExternalAccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSystemExternalAccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSystemExternalAccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_system_2eproto() {
  protobuf_AddDesc_system_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "system.proto");
  GOOGLE_CHECK(file != NULL);
  RequestSystemStatus_descriptor_ = file->message_type(0);
  static const int RequestSystemStatus_offsets_[1] = {
  };
  RequestSystemStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSystemStatus_descriptor_,
      RequestSystemStatus::default_instance_,
      RequestSystemStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSystemStatus));
  ResponseSystemStatus_descriptor_ = file->message_type(1);
  static const int ResponseSystemStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemStatus, no_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemStatus, no_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemStatus, net_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemStatus, bw_total_),
  };
  ResponseSystemStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSystemStatus_descriptor_,
      ResponseSystemStatus::default_instance_,
      ResponseSystemStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSystemStatus));
  ResponseSystemStatus_NetCode_descriptor_ = ResponseSystemStatus_descriptor_->enum_type(0);
  RequestSystemQuit_descriptor_ = file->message_type(2);
  static const int RequestSystemQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemQuit, quit_code_),
  };
  RequestSystemQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSystemQuit_descriptor_,
      RequestSystemQuit::default_instance_,
      RequestSystemQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSystemQuit));
  RequestSystemQuit_QuitCode_descriptor_ = RequestSystemQuit_descriptor_->enum_type(0);
  ResponseSystemQuit_descriptor_ = file->message_type(3);
  static const int ResponseSystemQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemQuit, status_),
  };
  ResponseSystemQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSystemQuit_descriptor_,
      ResponseSystemQuit::default_instance_,
      ResponseSystemQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSystemQuit));
  RequestSystemExternalAccess_descriptor_ = file->message_type(4);
  static const int RequestSystemExternalAccess_offsets_[1] = {
  };
  RequestSystemExternalAccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSystemExternalAccess_descriptor_,
      RequestSystemExternalAccess::default_instance_,
      RequestSystemExternalAccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemExternalAccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemExternalAccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSystemExternalAccess));
  ResponseSystemExternalAccess_descriptor_ = file->message_type(5);
  static const int ResponseSystemExternalAccess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemExternalAccess, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemExternalAccess, ext_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemExternalAccess, dht_key_),
  };
  ResponseSystemExternalAccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSystemExternalAccess_descriptor_,
      ResponseSystemExternalAccess::default_instance_,
      ResponseSystemExternalAccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemExternalAccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemExternalAccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSystemExternalAccess));
  RequestMsgIds_descriptor_ = file->enum_type(0);
  ResponseMsgIds_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_system_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSystemStatus_descriptor_, &RequestSystemStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSystemStatus_descriptor_, &ResponseSystemStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSystemQuit_descriptor_, &RequestSystemQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSystemQuit_descriptor_, &ResponseSystemQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSystemExternalAccess_descriptor_, &RequestSystemExternalAccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSystemExternalAccess_descriptor_, &ResponseSystemExternalAccess::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_system_2eproto() {
  delete RequestSystemStatus::default_instance_;
  delete RequestSystemStatus_reflection_;
  delete ResponseSystemStatus::default_instance_;
  delete ResponseSystemStatus_reflection_;
  delete RequestSystemQuit::default_instance_;
  delete RequestSystemQuit_reflection_;
  delete ResponseSystemQuit::default_instance_;
  delete ResponseSystemQuit_reflection_;
  delete RequestSystemExternalAccess::default_instance_;
  delete RequestSystemExternalAccess_reflection_;
  delete ResponseSystemExternalAccess::default_instance_;
  delete ResponseSystemExternalAccess_reflection_;
}

void protobuf_AddDesc_system_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rsctrl::core::protobuf_AddDesc_core_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014system.proto\022\rrsctrl.system\032\ncore.prot"
    "o\"\025\n\023RequestSystemStatus\"\366\002\n\024ResponseSys"
    "temStatus\022#\n\006status\030\001 \002(\0132\023.rsctrl.core."
    "Status\022\020\n\010no_peers\030\002 \002(\r\022\024\n\014no_connected"
    "\030\003 \002(\r\022\?\n\nnet_status\030\004 \002(\0162+.rsctrl.syst"
    "em.ResponseSystemStatus.NetCode\022(\n\010bw_to"
    "tal\030\005 \002(\0132\026.rsctrl.core.Bandwidth\"\245\001\n\007Ne"
    "tCode\022\017\n\013BAD_UNKNOWN\020\000\022\017\n\013BAD_OFFLINE\020\001\022"
    "\016\n\nBAD_NATSYM\020\002\022\021\n\rBAD_NODHT_NAT\020\003\022\023\n\017WA"
    "RNING_RESTART\020\004\022\022\n\016WARNING_NATTED\020\005\022\021\n\rW"
    "ARNING_NODHT\020\006\022\010\n\004GOOD\020\007\022\017\n\013ADV_FORWARD\020"
    "\010\"\201\001\n\021RequestSystemQuit\022<\n\tquit_code\030\001 \002"
    "(\0162).rsctrl.system.RequestSystemQuit.Qui"
    "tCode\".\n\010QuitCode\022\021\n\rCLOSE_CHANNEL\020\001\022\017\n\013"
    "SHUTDOWN_RS\020\002\"9\n\022ResponseSystemQuit\022#\n\006s"
    "tatus\030\001 \002(\0132\023.rsctrl.core.Status\"\035\n\033Requ"
    "estSystemExternalAccess\"f\n\034ResponseSyste"
    "mExternalAccess\022#\n\006status\030\001 \002(\0132\023.rsctrl"
    ".core.Status\022\020\n\010ext_port\030\002 \002(\r\022\017\n\007dht_ke"
    "y\030\003 \002(\t*r\n\rRequestMsgIds\022\035\n\031MsgId_Reques"
    "tSystemStatus\020\001\022\033\n\027MsgId_RequestSystemQu"
    "it\020\002\022%\n!MsgId_RequestSystemExternalAcces"
    "s\020\003*v\n\016ResponseMsgIds\022\036\n\032MsgId_ResponseS"
    "ystemStatus\020\001\022\034\n\030MsgId_ResponseSystemQui"
    "t\020\002\022&\n\"MsgId_ResponseSystemExternalAcces"
    "s\020\003", 1003);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system.proto", &protobuf_RegisterTypes);
  RequestSystemStatus::default_instance_ = new RequestSystemStatus();
  ResponseSystemStatus::default_instance_ = new ResponseSystemStatus();
  RequestSystemQuit::default_instance_ = new RequestSystemQuit();
  ResponseSystemQuit::default_instance_ = new ResponseSystemQuit();
  RequestSystemExternalAccess::default_instance_ = new RequestSystemExternalAccess();
  ResponseSystemExternalAccess::default_instance_ = new ResponseSystemExternalAccess();
  RequestSystemStatus::default_instance_->InitAsDefaultInstance();
  ResponseSystemStatus::default_instance_->InitAsDefaultInstance();
  RequestSystemQuit::default_instance_->InitAsDefaultInstance();
  ResponseSystemQuit::default_instance_->InitAsDefaultInstance();
  RequestSystemExternalAccess::default_instance_->InitAsDefaultInstance();
  ResponseSystemExternalAccess::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_system_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_system_2eproto {
  StaticDescriptorInitializer_system_2eproto() {
    protobuf_AddDesc_system_2eproto();
  }
} static_descriptor_initializer_system_2eproto_;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMsgIds_descriptor_;
}
bool RequestMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseMsgIds_descriptor_;
}
bool ResponseMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSystemStatus::RequestSystemStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSystemStatus::InitAsDefaultInstance() {
}

RequestSystemStatus::RequestSystemStatus(const RequestSystemStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSystemStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSystemStatus::~RequestSystemStatus() {
  SharedDtor();
}

void RequestSystemStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSystemStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSystemStatus_descriptor_;
}

const RequestSystemStatus& RequestSystemStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();  return *default_instance_;
}

RequestSystemStatus* RequestSystemStatus::default_instance_ = NULL;

RequestSystemStatus* RequestSystemStatus::New() const {
  return new RequestSystemStatus;
}

void RequestSystemStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestSystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSystemStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSystemStatus::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSystemStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSystemStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSystemStatus::MergeFrom(const RequestSystemStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSystemStatus::CopyFrom(const RequestSystemStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSystemStatus::IsInitialized() const {
  
  return true;
}

void RequestSystemStatus::Swap(RequestSystemStatus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSystemStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSystemStatus_descriptor_;
  metadata.reflection = RequestSystemStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseSystemStatus_NetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSystemStatus_NetCode_descriptor_;
}
bool ResponseSystemStatus_NetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseSystemStatus_NetCode ResponseSystemStatus::BAD_UNKNOWN;
const ResponseSystemStatus_NetCode ResponseSystemStatus::BAD_OFFLINE;
const ResponseSystemStatus_NetCode ResponseSystemStatus::BAD_NATSYM;
const ResponseSystemStatus_NetCode ResponseSystemStatus::BAD_NODHT_NAT;
const ResponseSystemStatus_NetCode ResponseSystemStatus::WARNING_RESTART;
const ResponseSystemStatus_NetCode ResponseSystemStatus::WARNING_NATTED;
const ResponseSystemStatus_NetCode ResponseSystemStatus::WARNING_NODHT;
const ResponseSystemStatus_NetCode ResponseSystemStatus::GOOD;
const ResponseSystemStatus_NetCode ResponseSystemStatus::ADV_FORWARD;
const ResponseSystemStatus_NetCode ResponseSystemStatus::NetCode_MIN;
const ResponseSystemStatus_NetCode ResponseSystemStatus::NetCode_MAX;
const int ResponseSystemStatus::NetCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResponseSystemStatus::kStatusFieldNumber;
const int ResponseSystemStatus::kNoPeersFieldNumber;
const int ResponseSystemStatus::kNoConnectedFieldNumber;
const int ResponseSystemStatus::kNetStatusFieldNumber;
const int ResponseSystemStatus::kBwTotalFieldNumber;
#endif  // !_MSC_VER

ResponseSystemStatus::ResponseSystemStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseSystemStatus::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
  bw_total_ = const_cast< ::rsctrl::core::Bandwidth*>(&::rsctrl::core::Bandwidth::default_instance());
}

ResponseSystemStatus::ResponseSystemStatus(const ResponseSystemStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSystemStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  no_peers_ = 0u;
  no_connected_ = 0u;
  net_status_ = 0;
  bw_total_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSystemStatus::~ResponseSystemStatus() {
  SharedDtor();
}

void ResponseSystemStatus::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete bw_total_;
  }
}

void ResponseSystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSystemStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSystemStatus_descriptor_;
}

const ResponseSystemStatus& ResponseSystemStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();  return *default_instance_;
}

ResponseSystemStatus* ResponseSystemStatus::default_instance_ = NULL;

ResponseSystemStatus* ResponseSystemStatus::New() const {
  return new ResponseSystemStatus;
}

void ResponseSystemStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
    no_peers_ = 0u;
    no_connected_ = 0u;
    net_status_ = 0;
    if (has_bw_total()) {
      if (bw_total_ != NULL) bw_total_->::rsctrl::core::Bandwidth::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_no_peers;
        break;
      }
      
      // required uint32 no_peers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_peers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_peers_)));
          set_has_no_peers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_no_connected;
        break;
      }
      
      // required uint32 no_connected = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_connected_)));
          set_has_no_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_net_status;
        break;
      }
      
      // required .rsctrl.system.ResponseSystemStatus.NetCode net_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::system::ResponseSystemStatus_NetCode_IsValid(value)) {
            set_net_status(static_cast< ::rsctrl::system::ResponseSystemStatus_NetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bw_total;
        break;
      }
      
      // required .rsctrl.core.Bandwidth bw_total = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bw_total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bw_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // required uint32 no_peers = 2;
  if (has_no_peers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->no_peers(), output);
  }
  
  // required uint32 no_connected = 3;
  if (has_no_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->no_connected(), output);
  }
  
  // required .rsctrl.system.ResponseSystemStatus.NetCode net_status = 4;
  if (has_net_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->net_status(), output);
  }
  
  // required .rsctrl.core.Bandwidth bw_total = 5;
  if (has_bw_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bw_total(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseSystemStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // required uint32 no_peers = 2;
  if (has_no_peers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->no_peers(), target);
  }
  
  // required uint32 no_connected = 3;
  if (has_no_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->no_connected(), target);
  }
  
  // required .rsctrl.system.ResponseSystemStatus.NetCode net_status = 4;
  if (has_net_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->net_status(), target);
  }
  
  // required .rsctrl.core.Bandwidth bw_total = 5;
  if (has_bw_total()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bw_total(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseSystemStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // required uint32 no_peers = 2;
    if (has_no_peers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_peers());
    }
    
    // required uint32 no_connected = 3;
    if (has_no_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_connected());
    }
    
    // required .rsctrl.system.ResponseSystemStatus.NetCode net_status = 4;
    if (has_net_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->net_status());
    }
    
    // required .rsctrl.core.Bandwidth bw_total = 5;
    if (has_bw_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bw_total());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSystemStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSystemStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSystemStatus::MergeFrom(const ResponseSystemStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
    if (from.has_no_peers()) {
      set_no_peers(from.no_peers());
    }
    if (from.has_no_connected()) {
      set_no_connected(from.no_connected());
    }
    if (from.has_net_status()) {
      set_net_status(from.net_status());
    }
    if (from.has_bw_total()) {
      mutable_bw_total()->::rsctrl::core::Bandwidth::MergeFrom(from.bw_total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSystemStatus::CopyFrom(const ResponseSystemStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSystemStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_bw_total()) {
    if (!this->bw_total().IsInitialized()) return false;
  }
  return true;
}

void ResponseSystemStatus::Swap(ResponseSystemStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(no_peers_, other->no_peers_);
    std::swap(no_connected_, other->no_connected_);
    std::swap(net_status_, other->net_status_);
    std::swap(bw_total_, other->bw_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSystemStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSystemStatus_descriptor_;
  metadata.reflection = ResponseSystemStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestSystemQuit_QuitCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSystemQuit_QuitCode_descriptor_;
}
bool RequestSystemQuit_QuitCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestSystemQuit_QuitCode RequestSystemQuit::CLOSE_CHANNEL;
const RequestSystemQuit_QuitCode RequestSystemQuit::SHUTDOWN_RS;
const RequestSystemQuit_QuitCode RequestSystemQuit::QuitCode_MIN;
const RequestSystemQuit_QuitCode RequestSystemQuit::QuitCode_MAX;
const int RequestSystemQuit::QuitCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestSystemQuit::kQuitCodeFieldNumber;
#endif  // !_MSC_VER

RequestSystemQuit::RequestSystemQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSystemQuit::InitAsDefaultInstance() {
}

RequestSystemQuit::RequestSystemQuit(const RequestSystemQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSystemQuit::SharedCtor() {
  _cached_size_ = 0;
  quit_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSystemQuit::~RequestSystemQuit() {
  SharedDtor();
}

void RequestSystemQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSystemQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSystemQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSystemQuit_descriptor_;
}

const RequestSystemQuit& RequestSystemQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();  return *default_instance_;
}

RequestSystemQuit* RequestSystemQuit::default_instance_ = NULL;

RequestSystemQuit* RequestSystemQuit::New() const {
  return new RequestSystemQuit;
}

void RequestSystemQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quit_code_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSystemQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.system.RequestSystemQuit.QuitCode quit_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::system::RequestSystemQuit_QuitCode_IsValid(value)) {
            set_quit_code(static_cast< ::rsctrl::system::RequestSystemQuit_QuitCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSystemQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.system.RequestSystemQuit.QuitCode quit_code = 1;
  if (has_quit_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->quit_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSystemQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.system.RequestSystemQuit.QuitCode quit_code = 1;
  if (has_quit_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->quit_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSystemQuit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.system.RequestSystemQuit.QuitCode quit_code = 1;
    if (has_quit_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quit_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSystemQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSystemQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSystemQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSystemQuit::MergeFrom(const RequestSystemQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quit_code()) {
      set_quit_code(from.quit_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSystemQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSystemQuit::CopyFrom(const RequestSystemQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSystemQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestSystemQuit::Swap(RequestSystemQuit* other) {
  if (other != this) {
    std::swap(quit_code_, other->quit_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSystemQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSystemQuit_descriptor_;
  metadata.reflection = RequestSystemQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSystemQuit::kStatusFieldNumber;
#endif  // !_MSC_VER

ResponseSystemQuit::ResponseSystemQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseSystemQuit::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseSystemQuit::ResponseSystemQuit(const ResponseSystemQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSystemQuit::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSystemQuit::~ResponseSystemQuit() {
  SharedDtor();
}

void ResponseSystemQuit::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseSystemQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSystemQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSystemQuit_descriptor_;
}

const ResponseSystemQuit& ResponseSystemQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();  return *default_instance_;
}

ResponseSystemQuit* ResponseSystemQuit::default_instance_ = NULL;

ResponseSystemQuit* ResponseSystemQuit::New() const {
  return new ResponseSystemQuit;
}

void ResponseSystemQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSystemQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSystemQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseSystemQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseSystemQuit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSystemQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSystemQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSystemQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSystemQuit::MergeFrom(const ResponseSystemQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSystemQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSystemQuit::CopyFrom(const ResponseSystemQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSystemQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ResponseSystemQuit::Swap(ResponseSystemQuit* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSystemQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSystemQuit_descriptor_;
  metadata.reflection = ResponseSystemQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSystemExternalAccess::RequestSystemExternalAccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSystemExternalAccess::InitAsDefaultInstance() {
}

RequestSystemExternalAccess::RequestSystemExternalAccess(const RequestSystemExternalAccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSystemExternalAccess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSystemExternalAccess::~RequestSystemExternalAccess() {
  SharedDtor();
}

void RequestSystemExternalAccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSystemExternalAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSystemExternalAccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSystemExternalAccess_descriptor_;
}

const RequestSystemExternalAccess& RequestSystemExternalAccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();  return *default_instance_;
}

RequestSystemExternalAccess* RequestSystemExternalAccess::default_instance_ = NULL;

RequestSystemExternalAccess* RequestSystemExternalAccess::New() const {
  return new RequestSystemExternalAccess;
}

void RequestSystemExternalAccess::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSystemExternalAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestSystemExternalAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSystemExternalAccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSystemExternalAccess::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSystemExternalAccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSystemExternalAccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSystemExternalAccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSystemExternalAccess::MergeFrom(const RequestSystemExternalAccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSystemExternalAccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSystemExternalAccess::CopyFrom(const RequestSystemExternalAccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSystemExternalAccess::IsInitialized() const {
  
  return true;
}

void RequestSystemExternalAccess::Swap(RequestSystemExternalAccess* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSystemExternalAccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSystemExternalAccess_descriptor_;
  metadata.reflection = RequestSystemExternalAccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSystemExternalAccess::kStatusFieldNumber;
const int ResponseSystemExternalAccess::kExtPortFieldNumber;
const int ResponseSystemExternalAccess::kDhtKeyFieldNumber;
#endif  // !_MSC_VER

ResponseSystemExternalAccess::ResponseSystemExternalAccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseSystemExternalAccess::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseSystemExternalAccess::ResponseSystemExternalAccess(const ResponseSystemExternalAccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSystemExternalAccess::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ext_port_ = 0u;
  dht_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSystemExternalAccess::~ResponseSystemExternalAccess() {
  SharedDtor();
}

void ResponseSystemExternalAccess::SharedDtor() {
  if (dht_key_ != &::google::protobuf::internal::kEmptyString) {
    delete dht_key_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseSystemExternalAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSystemExternalAccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSystemExternalAccess_descriptor_;
}

const ResponseSystemExternalAccess& ResponseSystemExternalAccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();  return *default_instance_;
}

ResponseSystemExternalAccess* ResponseSystemExternalAccess::default_instance_ = NULL;

ResponseSystemExternalAccess* ResponseSystemExternalAccess::New() const {
  return new ResponseSystemExternalAccess;
}

void ResponseSystemExternalAccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
    ext_port_ = 0u;
    if (has_dht_key()) {
      if (dht_key_ != &::google::protobuf::internal::kEmptyString) {
        dht_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSystemExternalAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ext_port;
        break;
      }
      
      // required uint32 ext_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext_port_)));
          set_has_ext_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dht_key;
        break;
      }
      
      // required string dht_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dht_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dht_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dht_key().data(), this->dht_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSystemExternalAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // required uint32 ext_port = 2;
  if (has_ext_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ext_port(), output);
  }
  
  // required string dht_key = 3;
  if (has_dht_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dht_key().data(), this->dht_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dht_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseSystemExternalAccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // required uint32 ext_port = 2;
  if (has_ext_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ext_port(), target);
  }
  
  // required string dht_key = 3;
  if (has_dht_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dht_key().data(), this->dht_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dht_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseSystemExternalAccess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // required uint32 ext_port = 2;
    if (has_ext_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext_port());
    }
    
    // required string dht_key = 3;
    if (has_dht_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dht_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSystemExternalAccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSystemExternalAccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSystemExternalAccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSystemExternalAccess::MergeFrom(const ResponseSystemExternalAccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
    if (from.has_ext_port()) {
      set_ext_port(from.ext_port());
    }
    if (from.has_dht_key()) {
      set_dht_key(from.dht_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSystemExternalAccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSystemExternalAccess::CopyFrom(const ResponseSystemExternalAccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSystemExternalAccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ResponseSystemExternalAccess::Swap(ResponseSystemExternalAccess* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(ext_port_, other->ext_port_);
    std::swap(dht_key_, other->dht_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSystemExternalAccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSystemExternalAccess_descriptor_;
  metadata.reflection = ResponseSystemExternalAccess_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace system
}  // namespace rsctrl

// @@protoc_insertion_point(global_scope)
