// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace search {

namespace {

const ::google::protobuf::Descriptor* SearchHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchHit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchHit_LocFlag_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SearchSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBasicSearch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBasicSearch_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAdvSearch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAdvSearch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSearchIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSearchIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCloseSearch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCloseSearch_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestListSearches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestListSearches_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSearchResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSearchResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSearchResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSearchResults_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_search_2eproto() {
  protobuf_AddDesc_search_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "search.proto");
  GOOGLE_CHECK(file != NULL);
  SearchHit_descriptor_ = file->message_type(0);
  static const int SearchHit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHit, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHit, loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHit, no_hits_),
  };
  SearchHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchHit_descriptor_,
      SearchHit::default_instance_,
      SearchHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchHit));
  SearchHit_LocFlag_descriptor_ = SearchHit_descriptor_->enum_type(0);
  SearchSet_descriptor_ = file->message_type(1);
  static const int SearchSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSet, search_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSet, hits_),
  };
  SearchSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchSet_descriptor_,
      SearchSet::default_instance_,
      SearchSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchSet));
  RequestBasicSearch_descriptor_ = file->message_type(2);
  static const int RequestBasicSearch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBasicSearch, terms_),
  };
  RequestBasicSearch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBasicSearch_descriptor_,
      RequestBasicSearch::default_instance_,
      RequestBasicSearch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBasicSearch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBasicSearch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBasicSearch));
  RequestAdvSearch_descriptor_ = file->message_type(3);
  static const int RequestAdvSearch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAdvSearch, terms_),
  };
  RequestAdvSearch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAdvSearch_descriptor_,
      RequestAdvSearch::default_instance_,
      RequestAdvSearch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAdvSearch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAdvSearch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAdvSearch));
  ResponseSearchIds_descriptor_ = file->message_type(4);
  static const int ResponseSearchIds_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSearchIds, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSearchIds, search_id_),
  };
  ResponseSearchIds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSearchIds_descriptor_,
      ResponseSearchIds::default_instance_,
      ResponseSearchIds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSearchIds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSearchIds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSearchIds));
  RequestCloseSearch_descriptor_ = file->message_type(5);
  static const int RequestCloseSearch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCloseSearch, search_id_),
  };
  RequestCloseSearch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCloseSearch_descriptor_,
      RequestCloseSearch::default_instance_,
      RequestCloseSearch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCloseSearch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCloseSearch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCloseSearch));
  RequestListSearches_descriptor_ = file->message_type(6);
  static const int RequestListSearches_offsets_[1] = {
  };
  RequestListSearches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestListSearches_descriptor_,
      RequestListSearches::default_instance_,
      RequestListSearches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestListSearches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestListSearches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestListSearches));
  RequestSearchResults_descriptor_ = file->message_type(7);
  static const int RequestSearchResults_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSearchResults, search_ids_),
  };
  RequestSearchResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSearchResults_descriptor_,
      RequestSearchResults::default_instance_,
      RequestSearchResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSearchResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSearchResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSearchResults));
  ResponseSearchResults_descriptor_ = file->message_type(8);
  static const int ResponseSearchResults_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSearchResults, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSearchResults, searches_),
  };
  ResponseSearchResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSearchResults_descriptor_,
      ResponseSearchResults::default_instance_,
      ResponseSearchResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSearchResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSearchResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSearchResults));
  RequestMsgIds_descriptor_ = file->enum_type(0);
  ResponseMsgIds_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_search_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchHit_descriptor_, &SearchHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchSet_descriptor_, &SearchSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBasicSearch_descriptor_, &RequestBasicSearch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAdvSearch_descriptor_, &RequestAdvSearch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSearchIds_descriptor_, &ResponseSearchIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCloseSearch_descriptor_, &RequestCloseSearch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestListSearches_descriptor_, &RequestListSearches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSearchResults_descriptor_, &RequestSearchResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSearchResults_descriptor_, &ResponseSearchResults::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_search_2eproto() {
  delete SearchHit::default_instance_;
  delete SearchHit_reflection_;
  delete SearchSet::default_instance_;
  delete SearchSet_reflection_;
  delete RequestBasicSearch::default_instance_;
  delete RequestBasicSearch_reflection_;
  delete RequestAdvSearch::default_instance_;
  delete RequestAdvSearch_reflection_;
  delete ResponseSearchIds::default_instance_;
  delete ResponseSearchIds_reflection_;
  delete RequestCloseSearch::default_instance_;
  delete RequestCloseSearch_reflection_;
  delete RequestListSearches::default_instance_;
  delete RequestListSearches_reflection_;
  delete RequestSearchResults::default_instance_;
  delete RequestSearchResults_reflection_;
  delete ResponseSearchResults::default_instance_;
  delete ResponseSearchResults_reflection_;
}

void protobuf_AddDesc_search_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rsctrl::core::protobuf_AddDesc_core_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014search.proto\022\rrsctrl.search\032\ncore.prot"
    "o\"y\n\tSearchHit\022\037\n\004file\030\001 \002(\0132\021.rsctrl.co"
    "re.File\022\013\n\003loc\030\002 \002(\r\022\017\n\007no_hits\030\003 \002(\r\"-\n"
    "\007LocFlag\022\t\n\005LOCAL\020\001\022\n\n\006FRIEND\020\002\022\013\n\007NETWO"
    "RK\020\004\"F\n\tSearchSet\022\021\n\tsearch_id\030\001 \002(\r\022&\n\004"
    "hits\030\002 \003(\0132\030.rsctrl.search.SearchHit\"#\n\022"
    "RequestBasicSearch\022\r\n\005terms\030\001 \003(\t\"!\n\020Req"
    "uestAdvSearch\022\r\n\005terms\030\001 \003(\t\"K\n\021Response"
    "SearchIds\022#\n\006status\030\001 \002(\0132\023.rsctrl.core."
    "Status\022\021\n\tsearch_id\030\002 \003(\r\"\'\n\022RequestClos"
    "eSearch\022\021\n\tsearch_id\030\001 \002(\r\"\025\n\023RequestLis"
    "tSearches\"*\n\024RequestSearchResults\022\022\n\nsea"
    "rch_ids\030\002 \003(\r\"h\n\025ResponseSearchResults\022#"
    "\n\006status\030\001 \002(\0132\023.rsctrl.core.Status\022*\n\010s"
    "earches\030\002 \003(\0132\030.rsctrl.search.SearchSet*"
    "\212\001\n\rRequestMsgIds\022\034\n\030MsgId_RequestBasicS"
    "earch\020\001\022\034\n\030MsgId_RequestCloseSearch\020\003\022\035\n"
    "\031MsgId_RequestListSearches\020\004\022\036\n\032MsgId_Re"
    "questSearchResults\020\005*N\n\016ResponseMsgIds\022\033"
    "\n\027MsgId_ResponseSearchIds\020\001\022\037\n\033MsgId_Res"
    "ponseSearchResults\020\005", 820);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search.proto", &protobuf_RegisterTypes);
  SearchHit::default_instance_ = new SearchHit();
  SearchSet::default_instance_ = new SearchSet();
  RequestBasicSearch::default_instance_ = new RequestBasicSearch();
  RequestAdvSearch::default_instance_ = new RequestAdvSearch();
  ResponseSearchIds::default_instance_ = new ResponseSearchIds();
  RequestCloseSearch::default_instance_ = new RequestCloseSearch();
  RequestListSearches::default_instance_ = new RequestListSearches();
  RequestSearchResults::default_instance_ = new RequestSearchResults();
  ResponseSearchResults::default_instance_ = new ResponseSearchResults();
  SearchHit::default_instance_->InitAsDefaultInstance();
  SearchSet::default_instance_->InitAsDefaultInstance();
  RequestBasicSearch::default_instance_->InitAsDefaultInstance();
  RequestAdvSearch::default_instance_->InitAsDefaultInstance();
  ResponseSearchIds::default_instance_->InitAsDefaultInstance();
  RequestCloseSearch::default_instance_->InitAsDefaultInstance();
  RequestListSearches::default_instance_->InitAsDefaultInstance();
  RequestSearchResults::default_instance_->InitAsDefaultInstance();
  ResponseSearchResults::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_search_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_search_2eproto {
  StaticDescriptorInitializer_search_2eproto() {
    protobuf_AddDesc_search_2eproto();
  }
} static_descriptor_initializer_search_2eproto_;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMsgIds_descriptor_;
}
bool RequestMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseMsgIds_descriptor_;
}
bool ResponseMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SearchHit_LocFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchHit_LocFlag_descriptor_;
}
bool SearchHit_LocFlag_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SearchHit_LocFlag SearchHit::LOCAL;
const SearchHit_LocFlag SearchHit::FRIEND;
const SearchHit_LocFlag SearchHit::NETWORK;
const SearchHit_LocFlag SearchHit::LocFlag_MIN;
const SearchHit_LocFlag SearchHit::LocFlag_MAX;
const int SearchHit::LocFlag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SearchHit::kFileFieldNumber;
const int SearchHit::kLocFieldNumber;
const int SearchHit::kNoHitsFieldNumber;
#endif  // !_MSC_VER

SearchHit::SearchHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchHit::InitAsDefaultInstance() {
  file_ = const_cast< ::rsctrl::core::File*>(&::rsctrl::core::File::default_instance());
}

SearchHit::SearchHit(const SearchHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchHit::SharedCtor() {
  _cached_size_ = 0;
  file_ = NULL;
  loc_ = 0u;
  no_hits_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchHit::~SearchHit() {
  SharedDtor();
}

void SearchHit::SharedDtor() {
  if (this != default_instance_) {
    delete file_;
  }
}

void SearchHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchHit_descriptor_;
}

const SearchHit& SearchHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

SearchHit* SearchHit::default_instance_ = NULL;

SearchHit* SearchHit::New() const {
  return new SearchHit;
}

void SearchHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != NULL) file_->::rsctrl::core::File::Clear();
    }
    loc_ = 0u;
    no_hits_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.File file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loc;
        break;
      }
      
      // required uint32 loc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loc_)));
          set_has_loc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_no_hits;
        break;
      }
      
      // required uint32 no_hits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_hits_)));
          set_has_no_hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.File file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file(), output);
  }
  
  // required uint32 loc = 2;
  if (has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->loc(), output);
  }
  
  // required uint32 no_hits = 3;
  if (has_no_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->no_hits(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.File file = 1;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file(), target);
  }
  
  // required uint32 loc = 2;
  if (has_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->loc(), target);
  }
  
  // required uint32 no_hits = 3;
  if (has_no_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->no_hits(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchHit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.File file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // required uint32 loc = 2;
    if (has_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loc());
    }
    
    // required uint32 no_hits = 3;
    if (has_no_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_hits());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchHit::MergeFrom(const SearchHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      mutable_file()->::rsctrl::core::File::MergeFrom(from.file());
    }
    if (from.has_loc()) {
      set_loc(from.loc());
    }
    if (from.has_no_hits()) {
      set_no_hits(from.no_hits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchHit::CopyFrom(const SearchHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchHit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  return true;
}

void SearchHit::Swap(SearchHit* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(loc_, other->loc_);
    std::swap(no_hits_, other->no_hits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchHit_descriptor_;
  metadata.reflection = SearchHit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchSet::kSearchIdFieldNumber;
const int SearchSet::kHitsFieldNumber;
#endif  // !_MSC_VER

SearchSet::SearchSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchSet::InitAsDefaultInstance() {
}

SearchSet::SearchSet(const SearchSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchSet::SharedCtor() {
  _cached_size_ = 0;
  search_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchSet::~SearchSet() {
  SharedDtor();
}

void SearchSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchSet_descriptor_;
}

const SearchSet& SearchSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

SearchSet* SearchSet::default_instance_ = NULL;

SearchSet* SearchSet::New() const {
  return new SearchSet;
}

void SearchSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    search_id_ = 0u;
  }
  hits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 search_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_id_)));
          set_has_search_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hits;
        break;
      }
      
      // repeated .rsctrl.search.SearchHit hits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hits;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 search_id = 1;
  if (has_search_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_id(), output);
  }
  
  // repeated .rsctrl.search.SearchHit hits = 2;
  for (int i = 0; i < this->hits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hits(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 search_id = 1;
  if (has_search_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_id(), target);
  }
  
  // repeated .rsctrl.search.SearchHit hits = 2;
  for (int i = 0; i < this->hits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hits(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 search_id = 1;
    if (has_search_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_id());
    }
    
  }
  // repeated .rsctrl.search.SearchHit hits = 2;
  total_size += 1 * this->hits_size();
  for (int i = 0; i < this->hits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hits(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchSet::MergeFrom(const SearchSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  hits_.MergeFrom(from.hits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_id()) {
      set_search_id(from.search_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchSet::CopyFrom(const SearchSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < hits_size(); i++) {
    if (!this->hits(i).IsInitialized()) return false;
  }
  return true;
}

void SearchSet::Swap(SearchSet* other) {
  if (other != this) {
    std::swap(search_id_, other->search_id_);
    hits_.Swap(&other->hits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchSet_descriptor_;
  metadata.reflection = SearchSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBasicSearch::kTermsFieldNumber;
#endif  // !_MSC_VER

RequestBasicSearch::RequestBasicSearch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBasicSearch::InitAsDefaultInstance() {
}

RequestBasicSearch::RequestBasicSearch(const RequestBasicSearch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBasicSearch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBasicSearch::~RequestBasicSearch() {
  SharedDtor();
}

void RequestBasicSearch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestBasicSearch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBasicSearch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBasicSearch_descriptor_;
}

const RequestBasicSearch& RequestBasicSearch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

RequestBasicSearch* RequestBasicSearch::default_instance_ = NULL;

RequestBasicSearch* RequestBasicSearch::New() const {
  return new RequestBasicSearch;
}

void RequestBasicSearch::Clear() {
  terms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBasicSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string terms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_terms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->terms(0).data(), this->terms(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_terms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBasicSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string terms = 1;
  for (int i = 0; i < this->terms_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->terms(i).data(), this->terms(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->terms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBasicSearch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string terms = 1;
  for (int i = 0; i < this->terms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->terms(i).data(), this->terms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->terms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBasicSearch::ByteSize() const {
  int total_size = 0;
  
  // repeated string terms = 1;
  total_size += 1 * this->terms_size();
  for (int i = 0; i < this->terms_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->terms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBasicSearch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBasicSearch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBasicSearch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBasicSearch::MergeFrom(const RequestBasicSearch& from) {
  GOOGLE_CHECK_NE(&from, this);
  terms_.MergeFrom(from.terms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBasicSearch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBasicSearch::CopyFrom(const RequestBasicSearch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBasicSearch::IsInitialized() const {
  
  return true;
}

void RequestBasicSearch::Swap(RequestBasicSearch* other) {
  if (other != this) {
    terms_.Swap(&other->terms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBasicSearch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBasicSearch_descriptor_;
  metadata.reflection = RequestBasicSearch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAdvSearch::kTermsFieldNumber;
#endif  // !_MSC_VER

RequestAdvSearch::RequestAdvSearch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestAdvSearch::InitAsDefaultInstance() {
}

RequestAdvSearch::RequestAdvSearch(const RequestAdvSearch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestAdvSearch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAdvSearch::~RequestAdvSearch() {
  SharedDtor();
}

void RequestAdvSearch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAdvSearch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAdvSearch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAdvSearch_descriptor_;
}

const RequestAdvSearch& RequestAdvSearch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

RequestAdvSearch* RequestAdvSearch::default_instance_ = NULL;

RequestAdvSearch* RequestAdvSearch::New() const {
  return new RequestAdvSearch;
}

void RequestAdvSearch::Clear() {
  terms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAdvSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string terms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_terms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->terms(0).data(), this->terms(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_terms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestAdvSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string terms = 1;
  for (int i = 0; i < this->terms_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->terms(i).data(), this->terms(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->terms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestAdvSearch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string terms = 1;
  for (int i = 0; i < this->terms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->terms(i).data(), this->terms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->terms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestAdvSearch::ByteSize() const {
  int total_size = 0;
  
  // repeated string terms = 1;
  total_size += 1 * this->terms_size();
  for (int i = 0; i < this->terms_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->terms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAdvSearch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAdvSearch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAdvSearch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAdvSearch::MergeFrom(const RequestAdvSearch& from) {
  GOOGLE_CHECK_NE(&from, this);
  terms_.MergeFrom(from.terms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAdvSearch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAdvSearch::CopyFrom(const RequestAdvSearch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAdvSearch::IsInitialized() const {
  
  return true;
}

void RequestAdvSearch::Swap(RequestAdvSearch* other) {
  if (other != this) {
    terms_.Swap(&other->terms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAdvSearch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAdvSearch_descriptor_;
  metadata.reflection = RequestAdvSearch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSearchIds::kStatusFieldNumber;
const int ResponseSearchIds::kSearchIdFieldNumber;
#endif  // !_MSC_VER

ResponseSearchIds::ResponseSearchIds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseSearchIds::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseSearchIds::ResponseSearchIds(const ResponseSearchIds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSearchIds::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSearchIds::~ResponseSearchIds() {
  SharedDtor();
}

void ResponseSearchIds::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseSearchIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSearchIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSearchIds_descriptor_;
}

const ResponseSearchIds& ResponseSearchIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

ResponseSearchIds* ResponseSearchIds::default_instance_ = NULL;

ResponseSearchIds* ResponseSearchIds::New() const {
  return new ResponseSearchIds;
}

void ResponseSearchIds::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  search_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSearchIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_search_id;
        break;
      }
      
      // repeated uint32 search_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_search_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_search_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_search_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSearchIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // repeated uint32 search_id = 2;
  for (int i = 0; i < this->search_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->search_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseSearchIds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // repeated uint32 search_id = 2;
  for (int i = 0; i < this->search_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->search_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseSearchIds::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  // repeated uint32 search_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->search_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->search_id(i));
    }
    total_size += 1 * this->search_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSearchIds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSearchIds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSearchIds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSearchIds::MergeFrom(const ResponseSearchIds& from) {
  GOOGLE_CHECK_NE(&from, this);
  search_id_.MergeFrom(from.search_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSearchIds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSearchIds::CopyFrom(const ResponseSearchIds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSearchIds::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ResponseSearchIds::Swap(ResponseSearchIds* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    search_id_.Swap(&other->search_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSearchIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSearchIds_descriptor_;
  metadata.reflection = ResponseSearchIds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCloseSearch::kSearchIdFieldNumber;
#endif  // !_MSC_VER

RequestCloseSearch::RequestCloseSearch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCloseSearch::InitAsDefaultInstance() {
}

RequestCloseSearch::RequestCloseSearch(const RequestCloseSearch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCloseSearch::SharedCtor() {
  _cached_size_ = 0;
  search_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCloseSearch::~RequestCloseSearch() {
  SharedDtor();
}

void RequestCloseSearch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCloseSearch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCloseSearch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCloseSearch_descriptor_;
}

const RequestCloseSearch& RequestCloseSearch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

RequestCloseSearch* RequestCloseSearch::default_instance_ = NULL;

RequestCloseSearch* RequestCloseSearch::New() const {
  return new RequestCloseSearch;
}

void RequestCloseSearch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    search_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCloseSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 search_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_id_)));
          set_has_search_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCloseSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 search_id = 1;
  if (has_search_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCloseSearch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 search_id = 1;
  if (has_search_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCloseSearch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 search_id = 1;
    if (has_search_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCloseSearch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCloseSearch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCloseSearch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCloseSearch::MergeFrom(const RequestCloseSearch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_id()) {
      set_search_id(from.search_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCloseSearch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCloseSearch::CopyFrom(const RequestCloseSearch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCloseSearch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestCloseSearch::Swap(RequestCloseSearch* other) {
  if (other != this) {
    std::swap(search_id_, other->search_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCloseSearch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCloseSearch_descriptor_;
  metadata.reflection = RequestCloseSearch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestListSearches::RequestListSearches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestListSearches::InitAsDefaultInstance() {
}

RequestListSearches::RequestListSearches(const RequestListSearches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestListSearches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestListSearches::~RequestListSearches() {
  SharedDtor();
}

void RequestListSearches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestListSearches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestListSearches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestListSearches_descriptor_;
}

const RequestListSearches& RequestListSearches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

RequestListSearches* RequestListSearches::default_instance_ = NULL;

RequestListSearches* RequestListSearches::New() const {
  return new RequestListSearches;
}

void RequestListSearches::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestListSearches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestListSearches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestListSearches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestListSearches::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestListSearches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestListSearches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestListSearches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestListSearches::MergeFrom(const RequestListSearches& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestListSearches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestListSearches::CopyFrom(const RequestListSearches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestListSearches::IsInitialized() const {
  
  return true;
}

void RequestListSearches::Swap(RequestListSearches* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestListSearches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestListSearches_descriptor_;
  metadata.reflection = RequestListSearches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSearchResults::kSearchIdsFieldNumber;
#endif  // !_MSC_VER

RequestSearchResults::RequestSearchResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSearchResults::InitAsDefaultInstance() {
}

RequestSearchResults::RequestSearchResults(const RequestSearchResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSearchResults::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSearchResults::~RequestSearchResults() {
  SharedDtor();
}

void RequestSearchResults::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSearchResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSearchResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSearchResults_descriptor_;
}

const RequestSearchResults& RequestSearchResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

RequestSearchResults* RequestSearchResults::default_instance_ = NULL;

RequestSearchResults* RequestSearchResults::New() const {
  return new RequestSearchResults;
}

void RequestSearchResults::Clear() {
  search_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSearchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 search_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_search_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_search_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_search_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSearchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 search_ids = 2;
  for (int i = 0; i < this->search_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->search_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSearchResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 search_ids = 2;
  for (int i = 0; i < this->search_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->search_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSearchResults::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 search_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->search_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->search_ids(i));
    }
    total_size += 1 * this->search_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSearchResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSearchResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSearchResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSearchResults::MergeFrom(const RequestSearchResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  search_ids_.MergeFrom(from.search_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSearchResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSearchResults::CopyFrom(const RequestSearchResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSearchResults::IsInitialized() const {
  
  return true;
}

void RequestSearchResults::Swap(RequestSearchResults* other) {
  if (other != this) {
    search_ids_.Swap(&other->search_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSearchResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSearchResults_descriptor_;
  metadata.reflection = RequestSearchResults_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSearchResults::kStatusFieldNumber;
const int ResponseSearchResults::kSearchesFieldNumber;
#endif  // !_MSC_VER

ResponseSearchResults::ResponseSearchResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseSearchResults::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponseSearchResults::ResponseSearchResults(const ResponseSearchResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSearchResults::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSearchResults::~ResponseSearchResults() {
  SharedDtor();
}

void ResponseSearchResults::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponseSearchResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSearchResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSearchResults_descriptor_;
}

const ResponseSearchResults& ResponseSearchResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();  return *default_instance_;
}

ResponseSearchResults* ResponseSearchResults::default_instance_ = NULL;

ResponseSearchResults* ResponseSearchResults::New() const {
  return new ResponseSearchResults;
}

void ResponseSearchResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  searches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSearchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_searches;
        break;
      }
      
      // repeated .rsctrl.search.SearchSet searches = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_searches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_searches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_searches;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSearchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // repeated .rsctrl.search.SearchSet searches = 2;
  for (int i = 0; i < this->searches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->searches(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseSearchResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // repeated .rsctrl.search.SearchSet searches = 2;
  for (int i = 0; i < this->searches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->searches(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseSearchResults::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  // repeated .rsctrl.search.SearchSet searches = 2;
  total_size += 1 * this->searches_size();
  for (int i = 0; i < this->searches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->searches(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSearchResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSearchResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSearchResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSearchResults::MergeFrom(const ResponseSearchResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  searches_.MergeFrom(from.searches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSearchResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSearchResults::CopyFrom(const ResponseSearchResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSearchResults::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < searches_size(); i++) {
    if (!this->searches(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseSearchResults::Swap(ResponseSearchResults* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    searches_.Swap(&other->searches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSearchResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSearchResults_descriptor_;
  metadata.reflection = ResponseSearchResults_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace search
}  // namespace rsctrl

// @@protoc_insertion_point(global_scope)
