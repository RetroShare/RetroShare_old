// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef PROTOBUF_stream_2eproto__INCLUDED
#define PROTOBUF_stream_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "core.pb.h"
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace stream {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_stream_2eproto();
void protobuf_AssignDesc_stream_2eproto();
void protobuf_ShutdownFile_stream_2eproto();

class StreamFileDetail;
class StreamVoipDetail;
class StreamDesc;
class StreamData;
class RequestStartFileStream;
class ResponseStreamDetail;
class RequestControlStream;
class RequestListStreams;
class ResponseStreamData;

enum RequestControlStream_StreamAction {
  RequestControlStream_StreamAction_STREAM_START = 1,
  RequestControlStream_StreamAction_STREAM_STOP = 2,
  RequestControlStream_StreamAction_STREAM_PAUSE = 3,
  RequestControlStream_StreamAction_STREAM_CHANGE_RATE = 4,
  RequestControlStream_StreamAction_STREAM_SEEK = 5
};
bool RequestControlStream_StreamAction_IsValid(int value);
const RequestControlStream_StreamAction RequestControlStream_StreamAction_StreamAction_MIN = RequestControlStream_StreamAction_STREAM_START;
const RequestControlStream_StreamAction RequestControlStream_StreamAction_StreamAction_MAX = RequestControlStream_StreamAction_STREAM_SEEK;
const int RequestControlStream_StreamAction_StreamAction_ARRAYSIZE = RequestControlStream_StreamAction_StreamAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestControlStream_StreamAction_descriptor();
inline const ::std::string& RequestControlStream_StreamAction_Name(RequestControlStream_StreamAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestControlStream_StreamAction_descriptor(), value);
}
inline bool RequestControlStream_StreamAction_Parse(
    const ::std::string& name, RequestControlStream_StreamAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestControlStream_StreamAction>(
    RequestControlStream_StreamAction_descriptor(), name, value);
}
enum RequestMsgIds {
  MsgId_RequestStartFileStream = 1,
  MsgId_RequestControlStream = 2,
  MsgId_RequestListStreams = 3
};
bool RequestMsgIds_IsValid(int value);
const RequestMsgIds RequestMsgIds_MIN = MsgId_RequestStartFileStream;
const RequestMsgIds RequestMsgIds_MAX = MsgId_RequestListStreams;
const int RequestMsgIds_ARRAYSIZE = RequestMsgIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor();
inline const ::std::string& RequestMsgIds_Name(RequestMsgIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestMsgIds_descriptor(), value);
}
inline bool RequestMsgIds_Parse(
    const ::std::string& name, RequestMsgIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestMsgIds>(
    RequestMsgIds_descriptor(), name, value);
}
enum ResponseMsgIds {
  MsgId_ResponseStreamDetail = 1,
  MsgId_ResponseStreamData = 101
};
bool ResponseMsgIds_IsValid(int value);
const ResponseMsgIds ResponseMsgIds_MIN = MsgId_ResponseStreamDetail;
const ResponseMsgIds ResponseMsgIds_MAX = MsgId_ResponseStreamData;
const int ResponseMsgIds_ARRAYSIZE = ResponseMsgIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor();
inline const ::std::string& ResponseMsgIds_Name(ResponseMsgIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseMsgIds_descriptor(), value);
}
inline bool ResponseMsgIds_Parse(
    const ::std::string& name, ResponseMsgIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseMsgIds>(
    ResponseMsgIds_descriptor(), name, value);
}
enum StreamType {
  STREAM_TYPE_ALL = 1,
  STREAM_TYPE_FILES = 2,
  STREAM_TYPE_VOIP = 3,
  STREAM_TYPE_OTHER = 4
};
bool StreamType_IsValid(int value);
const StreamType StreamType_MIN = STREAM_TYPE_ALL;
const StreamType StreamType_MAX = STREAM_TYPE_OTHER;
const int StreamType_ARRAYSIZE = StreamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamType_descriptor();
inline const ::std::string& StreamType_Name(StreamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamType_descriptor(), value);
}
inline bool StreamType_Parse(
    const ::std::string& name, StreamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamType>(
    StreamType_descriptor(), name, value);
}
enum StreamState {
  STREAM_STATE_ERROR = 0,
  STREAM_STATE_RUN = 1,
  STREAM_STATE_PAUSED = 2,
  STREAM_STATE_FINISHED = 3
};
bool StreamState_IsValid(int value);
const StreamState StreamState_MIN = STREAM_STATE_ERROR;
const StreamState StreamState_MAX = STREAM_STATE_FINISHED;
const int StreamState_ARRAYSIZE = StreamState_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamState_descriptor();
inline const ::std::string& StreamState_Name(StreamState value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamState_descriptor(), value);
}
inline bool StreamState_Parse(
    const ::std::string& name, StreamState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamState>(
    StreamState_descriptor(), name, value);
}
// ===================================================================

class StreamFileDetail : public ::google::protobuf::Message {
 public:
  StreamFileDetail();
  virtual ~StreamFileDetail();
  
  StreamFileDetail(const StreamFileDetail& from);
  
  inline StreamFileDetail& operator=(const StreamFileDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamFileDetail& default_instance();
  
  void Swap(StreamFileDetail* other);
  
  // implements Message ----------------------------------------------
  
  StreamFileDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamFileDetail& from);
  void MergeFrom(const StreamFileDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.File file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::rsctrl::core::File& file() const;
  inline ::rsctrl::core::File* mutable_file();
  inline ::rsctrl::core::File* release_file();
  
  // required uint64 offset = 5;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 5;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.StreamFileDetail)
 private:
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_offset();
  inline void clear_has_offset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::File* file_;
  ::google::protobuf::uint64 offset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static StreamFileDetail* default_instance_;
};
// -------------------------------------------------------------------

class StreamVoipDetail : public ::google::protobuf::Message {
 public:
  StreamVoipDetail();
  virtual ~StreamVoipDetail();
  
  StreamVoipDetail(const StreamVoipDetail& from);
  
  inline StreamVoipDetail& operator=(const StreamVoipDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamVoipDetail& default_instance();
  
  void Swap(StreamVoipDetail* other);
  
  // implements Message ----------------------------------------------
  
  StreamVoipDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamVoipDetail& from);
  void MergeFrom(const StreamVoipDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string peer_id = 1;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 1;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // required uint64 duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::google::protobuf::uint64 duration() const;
  inline void set_duration(::google::protobuf::uint64 value);
  
  // required uint64 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.StreamVoipDetail)
 private:
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_offset();
  inline void clear_has_offset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* peer_id_;
  ::google::protobuf::uint64 duration_;
  ::google::protobuf::uint64 offset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static StreamVoipDetail* default_instance_;
};
// -------------------------------------------------------------------

class StreamDesc : public ::google::protobuf::Message {
 public:
  StreamDesc();
  virtual ~StreamDesc();
  
  StreamDesc(const StreamDesc& from);
  
  inline StreamDesc& operator=(const StreamDesc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamDesc& default_instance();
  
  void Swap(StreamDesc* other);
  
  // implements Message ----------------------------------------------
  
  StreamDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamDesc& from);
  void MergeFrom(const StreamDesc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint32 value);
  
  // required .rsctrl.stream.StreamType stream_type = 2;
  inline bool has_stream_type() const;
  inline void clear_stream_type();
  static const int kStreamTypeFieldNumber = 2;
  inline rsctrl::stream::StreamType stream_type() const;
  inline void set_stream_type(rsctrl::stream::StreamType value);
  
  // required .rsctrl.stream.StreamState stream_state = 3;
  inline bool has_stream_state() const;
  inline void clear_stream_state();
  static const int kStreamStateFieldNumber = 3;
  inline rsctrl::stream::StreamState stream_state() const;
  inline void set_stream_state(rsctrl::stream::StreamState value);
  
  // required float rate_kbs = 4;
  inline bool has_rate_kbs() const;
  inline void clear_rate_kbs();
  static const int kRateKbsFieldNumber = 4;
  inline float rate_kbs() const;
  inline void set_rate_kbs(float value);
  
  // optional .rsctrl.stream.StreamFileDetail file = 5;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 5;
  inline const ::rsctrl::stream::StreamFileDetail& file() const;
  inline ::rsctrl::stream::StreamFileDetail* mutable_file();
  inline ::rsctrl::stream::StreamFileDetail* release_file();
  
  // optional .rsctrl.stream.StreamVoipDetail voip = 6;
  inline bool has_voip() const;
  inline void clear_voip();
  static const int kVoipFieldNumber = 6;
  inline const ::rsctrl::stream::StreamVoipDetail& voip() const;
  inline ::rsctrl::stream::StreamVoipDetail* mutable_voip();
  inline ::rsctrl::stream::StreamVoipDetail* release_voip();
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.StreamDesc)
 private:
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_stream_type();
  inline void clear_has_stream_type();
  inline void set_has_stream_state();
  inline void clear_has_stream_state();
  inline void set_has_rate_kbs();
  inline void clear_has_rate_kbs();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_voip();
  inline void clear_has_voip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 stream_id_;
  int stream_type_;
  int stream_state_;
  float rate_kbs_;
  ::rsctrl::stream::StreamFileDetail* file_;
  ::rsctrl::stream::StreamVoipDetail* voip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static StreamDesc* default_instance_;
};
// -------------------------------------------------------------------

class StreamData : public ::google::protobuf::Message {
 public:
  StreamData();
  virtual ~StreamData();
  
  StreamData(const StreamData& from);
  
  inline StreamData& operator=(const StreamData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamData& default_instance();
  
  void Swap(StreamData* other);
  
  // implements Message ----------------------------------------------
  
  StreamData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamData& from);
  void MergeFrom(const StreamData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint32 value);
  
  // required .rsctrl.stream.StreamState stream_state = 2;
  inline bool has_stream_state() const;
  inline void clear_stream_state();
  static const int kStreamStateFieldNumber = 2;
  inline rsctrl::stream::StreamState stream_state() const;
  inline void set_stream_state(rsctrl::stream::StreamState value);
  
  // required .rsctrl.core.Timestamp send_time = 3;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 3;
  inline const ::rsctrl::core::Timestamp& send_time() const;
  inline ::rsctrl::core::Timestamp* mutable_send_time();
  inline ::rsctrl::core::Timestamp* release_send_time();
  
  // required uint64 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);
  
  // required uint32 size = 5;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);
  
  // required bytes stream_data = 6;
  inline bool has_stream_data() const;
  inline void clear_stream_data();
  static const int kStreamDataFieldNumber = 6;
  inline const ::std::string& stream_data() const;
  inline void set_stream_data(const ::std::string& value);
  inline void set_stream_data(const char* value);
  inline void set_stream_data(const void* value, size_t size);
  inline ::std::string* mutable_stream_data();
  inline ::std::string* release_stream_data();
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.StreamData)
 private:
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_stream_state();
  inline void clear_has_stream_state();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_stream_data();
  inline void clear_has_stream_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 stream_id_;
  int stream_state_;
  ::rsctrl::core::Timestamp* send_time_;
  ::google::protobuf::uint64 offset_;
  ::std::string* stream_data_;
  ::google::protobuf::uint32 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static StreamData* default_instance_;
};
// -------------------------------------------------------------------

class RequestStartFileStream : public ::google::protobuf::Message {
 public:
  RequestStartFileStream();
  virtual ~RequestStartFileStream();
  
  RequestStartFileStream(const RequestStartFileStream& from);
  
  inline RequestStartFileStream& operator=(const RequestStartFileStream& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestStartFileStream& default_instance();
  
  void Swap(RequestStartFileStream* other);
  
  // implements Message ----------------------------------------------
  
  RequestStartFileStream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestStartFileStream& from);
  void MergeFrom(const RequestStartFileStream& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.File file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::rsctrl::core::File& file() const;
  inline ::rsctrl::core::File* mutable_file();
  inline ::rsctrl::core::File* release_file();
  
  // required float rate_kbs = 2;
  inline bool has_rate_kbs() const;
  inline void clear_rate_kbs();
  static const int kRateKbsFieldNumber = 2;
  inline float rate_kbs() const;
  inline void set_rate_kbs(float value);
  
  // optional uint64 start_byte = 3;
  inline bool has_start_byte() const;
  inline void clear_start_byte();
  static const int kStartByteFieldNumber = 3;
  inline ::google::protobuf::uint64 start_byte() const;
  inline void set_start_byte(::google::protobuf::uint64 value);
  
  // optional uint64 end_byte = 4;
  inline bool has_end_byte() const;
  inline void clear_end_byte();
  static const int kEndByteFieldNumber = 4;
  inline ::google::protobuf::uint64 end_byte() const;
  inline void set_end_byte(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.RequestStartFileStream)
 private:
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_rate_kbs();
  inline void clear_has_rate_kbs();
  inline void set_has_start_byte();
  inline void clear_has_start_byte();
  inline void set_has_end_byte();
  inline void clear_has_end_byte();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::File* file_;
  ::google::protobuf::uint64 start_byte_;
  ::google::protobuf::uint64 end_byte_;
  float rate_kbs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static RequestStartFileStream* default_instance_;
};
// -------------------------------------------------------------------

class ResponseStreamDetail : public ::google::protobuf::Message {
 public:
  ResponseStreamDetail();
  virtual ~ResponseStreamDetail();
  
  ResponseStreamDetail(const ResponseStreamDetail& from);
  
  inline ResponseStreamDetail& operator=(const ResponseStreamDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseStreamDetail& default_instance();
  
  void Swap(ResponseStreamDetail* other);
  
  // implements Message ----------------------------------------------
  
  ResponseStreamDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseStreamDetail& from);
  void MergeFrom(const ResponseStreamDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // repeated .rsctrl.stream.StreamDesc streams = 2;
  inline int streams_size() const;
  inline void clear_streams();
  static const int kStreamsFieldNumber = 2;
  inline const ::rsctrl::stream::StreamDesc& streams(int index) const;
  inline ::rsctrl::stream::StreamDesc* mutable_streams(int index);
  inline ::rsctrl::stream::StreamDesc* add_streams();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::stream::StreamDesc >&
      streams() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::stream::StreamDesc >*
      mutable_streams();
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.ResponseStreamDetail)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::rsctrl::stream::StreamDesc > streams_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseStreamDetail* default_instance_;
};
// -------------------------------------------------------------------

class RequestControlStream : public ::google::protobuf::Message {
 public:
  RequestControlStream();
  virtual ~RequestControlStream();
  
  RequestControlStream(const RequestControlStream& from);
  
  inline RequestControlStream& operator=(const RequestControlStream& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestControlStream& default_instance();
  
  void Swap(RequestControlStream* other);
  
  // implements Message ----------------------------------------------
  
  RequestControlStream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestControlStream& from);
  void MergeFrom(const RequestControlStream& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RequestControlStream_StreamAction StreamAction;
  static const StreamAction STREAM_START = RequestControlStream_StreamAction_STREAM_START;
  static const StreamAction STREAM_STOP = RequestControlStream_StreamAction_STREAM_STOP;
  static const StreamAction STREAM_PAUSE = RequestControlStream_StreamAction_STREAM_PAUSE;
  static const StreamAction STREAM_CHANGE_RATE = RequestControlStream_StreamAction_STREAM_CHANGE_RATE;
  static const StreamAction STREAM_SEEK = RequestControlStream_StreamAction_STREAM_SEEK;
  static inline bool StreamAction_IsValid(int value) {
    return RequestControlStream_StreamAction_IsValid(value);
  }
  static const StreamAction StreamAction_MIN =
    RequestControlStream_StreamAction_StreamAction_MIN;
  static const StreamAction StreamAction_MAX =
    RequestControlStream_StreamAction_StreamAction_MAX;
  static const int StreamAction_ARRAYSIZE =
    RequestControlStream_StreamAction_StreamAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StreamAction_descriptor() {
    return RequestControlStream_StreamAction_descriptor();
  }
  static inline const ::std::string& StreamAction_Name(StreamAction value) {
    return RequestControlStream_StreamAction_Name(value);
  }
  static inline bool StreamAction_Parse(const ::std::string& name,
      StreamAction* value) {
    return RequestControlStream_StreamAction_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint32 value);
  
  // required .rsctrl.stream.RequestControlStream.StreamAction action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::rsctrl::stream::RequestControlStream_StreamAction action() const;
  inline void set_action(::rsctrl::stream::RequestControlStream_StreamAction value);
  
  // optional float rate_kbs = 3;
  inline bool has_rate_kbs() const;
  inline void clear_rate_kbs();
  static const int kRateKbsFieldNumber = 3;
  inline float rate_kbs() const;
  inline void set_rate_kbs(float value);
  
  // optional uint64 seek_byte = 4;
  inline bool has_seek_byte() const;
  inline void clear_seek_byte();
  static const int kSeekByteFieldNumber = 4;
  inline ::google::protobuf::uint64 seek_byte() const;
  inline void set_seek_byte(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.RequestControlStream)
 private:
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_rate_kbs();
  inline void clear_has_rate_kbs();
  inline void set_has_seek_byte();
  inline void clear_has_seek_byte();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 stream_id_;
  int action_;
  ::google::protobuf::uint64 seek_byte_;
  float rate_kbs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static RequestControlStream* default_instance_;
};
// -------------------------------------------------------------------

class RequestListStreams : public ::google::protobuf::Message {
 public:
  RequestListStreams();
  virtual ~RequestListStreams();
  
  RequestListStreams(const RequestListStreams& from);
  
  inline RequestListStreams& operator=(const RequestListStreams& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestListStreams& default_instance();
  
  void Swap(RequestListStreams* other);
  
  // implements Message ----------------------------------------------
  
  RequestListStreams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestListStreams& from);
  void MergeFrom(const RequestListStreams& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.stream.StreamType request_type = 1;
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 1;
  inline rsctrl::stream::StreamType request_type() const;
  inline void set_request_type(rsctrl::stream::StreamType value);
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.RequestListStreams)
 private:
  inline void set_has_request_type();
  inline void clear_has_request_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int request_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static RequestListStreams* default_instance_;
};
// -------------------------------------------------------------------

class ResponseStreamData : public ::google::protobuf::Message {
 public:
  ResponseStreamData();
  virtual ~ResponseStreamData();
  
  ResponseStreamData(const ResponseStreamData& from);
  
  inline ResponseStreamData& operator=(const ResponseStreamData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseStreamData& default_instance();
  
  void Swap(ResponseStreamData* other);
  
  // implements Message ----------------------------------------------
  
  ResponseStreamData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseStreamData& from);
  void MergeFrom(const ResponseStreamData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // required .rsctrl.stream.StreamData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::rsctrl::stream::StreamData& data() const;
  inline ::rsctrl::stream::StreamData* mutable_data();
  inline ::rsctrl::stream::StreamData* release_data();
  
  // @@protoc_insertion_point(class_scope:rsctrl.stream.ResponseStreamData)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::rsctrl::stream::StreamData* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseStreamData* default_instance_;
};
// ===================================================================


// ===================================================================

// StreamFileDetail

// required .rsctrl.core.File file = 1;
inline bool StreamFileDetail::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamFileDetail::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamFileDetail::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamFileDetail::clear_file() {
  if (file_ != NULL) file_->::rsctrl::core::File::Clear();
  clear_has_file();
}
inline const ::rsctrl::core::File& StreamFileDetail::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::rsctrl::core::File* StreamFileDetail::mutable_file() {
  set_has_file();
  if (file_ == NULL) file_ = new ::rsctrl::core::File;
  return file_;
}
inline ::rsctrl::core::File* StreamFileDetail::release_file() {
  clear_has_file();
  ::rsctrl::core::File* temp = file_;
  file_ = NULL;
  return temp;
}

// required uint64 offset = 5;
inline bool StreamFileDetail::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamFileDetail::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamFileDetail::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamFileDetail::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 StreamFileDetail::offset() const {
  return offset_;
}
inline void StreamFileDetail::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// StreamVoipDetail

// required string peer_id = 1;
inline bool StreamVoipDetail::has_peer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamVoipDetail::set_has_peer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamVoipDetail::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamVoipDetail::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& StreamVoipDetail::peer_id() const {
  return *peer_id_;
}
inline void StreamVoipDetail::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void StreamVoipDetail::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void StreamVoipDetail::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamVoipDetail::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* StreamVoipDetail::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 duration = 2;
inline bool StreamVoipDetail::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamVoipDetail::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamVoipDetail::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamVoipDetail::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::uint64 StreamVoipDetail::duration() const {
  return duration_;
}
inline void StreamVoipDetail::set_duration(::google::protobuf::uint64 value) {
  set_has_duration();
  duration_ = value;
}

// required uint64 offset = 3;
inline bool StreamVoipDetail::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamVoipDetail::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamVoipDetail::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamVoipDetail::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 StreamVoipDetail::offset() const {
  return offset_;
}
inline void StreamVoipDetail::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// StreamDesc

// required uint32 stream_id = 1;
inline bool StreamDesc::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamDesc::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamDesc::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamDesc::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 StreamDesc::stream_id() const {
  return stream_id_;
}
inline void StreamDesc::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
}

// required .rsctrl.stream.StreamType stream_type = 2;
inline bool StreamDesc::has_stream_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamDesc::set_has_stream_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamDesc::clear_has_stream_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamDesc::clear_stream_type() {
  stream_type_ = 1;
  clear_has_stream_type();
}
inline rsctrl::stream::StreamType StreamDesc::stream_type() const {
  return static_cast< rsctrl::stream::StreamType >(stream_type_);
}
inline void StreamDesc::set_stream_type(rsctrl::stream::StreamType value) {
  GOOGLE_DCHECK(rsctrl::stream::StreamType_IsValid(value));
  set_has_stream_type();
  stream_type_ = value;
}

// required .rsctrl.stream.StreamState stream_state = 3;
inline bool StreamDesc::has_stream_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamDesc::set_has_stream_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamDesc::clear_has_stream_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamDesc::clear_stream_state() {
  stream_state_ = 0;
  clear_has_stream_state();
}
inline rsctrl::stream::StreamState StreamDesc::stream_state() const {
  return static_cast< rsctrl::stream::StreamState >(stream_state_);
}
inline void StreamDesc::set_stream_state(rsctrl::stream::StreamState value) {
  GOOGLE_DCHECK(rsctrl::stream::StreamState_IsValid(value));
  set_has_stream_state();
  stream_state_ = value;
}

// required float rate_kbs = 4;
inline bool StreamDesc::has_rate_kbs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamDesc::set_has_rate_kbs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamDesc::clear_has_rate_kbs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamDesc::clear_rate_kbs() {
  rate_kbs_ = 0;
  clear_has_rate_kbs();
}
inline float StreamDesc::rate_kbs() const {
  return rate_kbs_;
}
inline void StreamDesc::set_rate_kbs(float value) {
  set_has_rate_kbs();
  rate_kbs_ = value;
}

// optional .rsctrl.stream.StreamFileDetail file = 5;
inline bool StreamDesc::has_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamDesc::set_has_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamDesc::clear_has_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamDesc::clear_file() {
  if (file_ != NULL) file_->::rsctrl::stream::StreamFileDetail::Clear();
  clear_has_file();
}
inline const ::rsctrl::stream::StreamFileDetail& StreamDesc::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::rsctrl::stream::StreamFileDetail* StreamDesc::mutable_file() {
  set_has_file();
  if (file_ == NULL) file_ = new ::rsctrl::stream::StreamFileDetail;
  return file_;
}
inline ::rsctrl::stream::StreamFileDetail* StreamDesc::release_file() {
  clear_has_file();
  ::rsctrl::stream::StreamFileDetail* temp = file_;
  file_ = NULL;
  return temp;
}

// optional .rsctrl.stream.StreamVoipDetail voip = 6;
inline bool StreamDesc::has_voip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StreamDesc::set_has_voip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StreamDesc::clear_has_voip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StreamDesc::clear_voip() {
  if (voip_ != NULL) voip_->::rsctrl::stream::StreamVoipDetail::Clear();
  clear_has_voip();
}
inline const ::rsctrl::stream::StreamVoipDetail& StreamDesc::voip() const {
  return voip_ != NULL ? *voip_ : *default_instance_->voip_;
}
inline ::rsctrl::stream::StreamVoipDetail* StreamDesc::mutable_voip() {
  set_has_voip();
  if (voip_ == NULL) voip_ = new ::rsctrl::stream::StreamVoipDetail;
  return voip_;
}
inline ::rsctrl::stream::StreamVoipDetail* StreamDesc::release_voip() {
  clear_has_voip();
  ::rsctrl::stream::StreamVoipDetail* temp = voip_;
  voip_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// StreamData

// required uint32 stream_id = 1;
inline bool StreamData::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamData::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamData::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamData::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 StreamData::stream_id() const {
  return stream_id_;
}
inline void StreamData::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
}

// required .rsctrl.stream.StreamState stream_state = 2;
inline bool StreamData::has_stream_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamData::set_has_stream_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamData::clear_has_stream_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamData::clear_stream_state() {
  stream_state_ = 0;
  clear_has_stream_state();
}
inline rsctrl::stream::StreamState StreamData::stream_state() const {
  return static_cast< rsctrl::stream::StreamState >(stream_state_);
}
inline void StreamData::set_stream_state(rsctrl::stream::StreamState value) {
  GOOGLE_DCHECK(rsctrl::stream::StreamState_IsValid(value));
  set_has_stream_state();
  stream_state_ = value;
}

// required .rsctrl.core.Timestamp send_time = 3;
inline bool StreamData::has_send_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamData::set_has_send_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamData::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamData::clear_send_time() {
  if (send_time_ != NULL) send_time_->::rsctrl::core::Timestamp::Clear();
  clear_has_send_time();
}
inline const ::rsctrl::core::Timestamp& StreamData::send_time() const {
  return send_time_ != NULL ? *send_time_ : *default_instance_->send_time_;
}
inline ::rsctrl::core::Timestamp* StreamData::mutable_send_time() {
  set_has_send_time();
  if (send_time_ == NULL) send_time_ = new ::rsctrl::core::Timestamp;
  return send_time_;
}
inline ::rsctrl::core::Timestamp* StreamData::release_send_time() {
  clear_has_send_time();
  ::rsctrl::core::Timestamp* temp = send_time_;
  send_time_ = NULL;
  return temp;
}

// required uint64 offset = 4;
inline bool StreamData::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamData::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamData::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamData::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 StreamData::offset() const {
  return offset_;
}
inline void StreamData::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
}

// required uint32 size = 5;
inline bool StreamData::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamData::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamData::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamData::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 StreamData::size() const {
  return size_;
}
inline void StreamData::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// required bytes stream_data = 6;
inline bool StreamData::has_stream_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StreamData::set_has_stream_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StreamData::clear_has_stream_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StreamData::clear_stream_data() {
  if (stream_data_ != &::google::protobuf::internal::kEmptyString) {
    stream_data_->clear();
  }
  clear_has_stream_data();
}
inline const ::std::string& StreamData::stream_data() const {
  return *stream_data_;
}
inline void StreamData::set_stream_data(const ::std::string& value) {
  set_has_stream_data();
  if (stream_data_ == &::google::protobuf::internal::kEmptyString) {
    stream_data_ = new ::std::string;
  }
  stream_data_->assign(value);
}
inline void StreamData::set_stream_data(const char* value) {
  set_has_stream_data();
  if (stream_data_ == &::google::protobuf::internal::kEmptyString) {
    stream_data_ = new ::std::string;
  }
  stream_data_->assign(value);
}
inline void StreamData::set_stream_data(const void* value, size_t size) {
  set_has_stream_data();
  if (stream_data_ == &::google::protobuf::internal::kEmptyString) {
    stream_data_ = new ::std::string;
  }
  stream_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamData::mutable_stream_data() {
  set_has_stream_data();
  if (stream_data_ == &::google::protobuf::internal::kEmptyString) {
    stream_data_ = new ::std::string;
  }
  return stream_data_;
}
inline ::std::string* StreamData::release_stream_data() {
  clear_has_stream_data();
  if (stream_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_data_;
    stream_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RequestStartFileStream

// required .rsctrl.core.File file = 1;
inline bool RequestStartFileStream::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestStartFileStream::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestStartFileStream::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestStartFileStream::clear_file() {
  if (file_ != NULL) file_->::rsctrl::core::File::Clear();
  clear_has_file();
}
inline const ::rsctrl::core::File& RequestStartFileStream::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::rsctrl::core::File* RequestStartFileStream::mutable_file() {
  set_has_file();
  if (file_ == NULL) file_ = new ::rsctrl::core::File;
  return file_;
}
inline ::rsctrl::core::File* RequestStartFileStream::release_file() {
  clear_has_file();
  ::rsctrl::core::File* temp = file_;
  file_ = NULL;
  return temp;
}

// required float rate_kbs = 2;
inline bool RequestStartFileStream::has_rate_kbs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestStartFileStream::set_has_rate_kbs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestStartFileStream::clear_has_rate_kbs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestStartFileStream::clear_rate_kbs() {
  rate_kbs_ = 0;
  clear_has_rate_kbs();
}
inline float RequestStartFileStream::rate_kbs() const {
  return rate_kbs_;
}
inline void RequestStartFileStream::set_rate_kbs(float value) {
  set_has_rate_kbs();
  rate_kbs_ = value;
}

// optional uint64 start_byte = 3;
inline bool RequestStartFileStream::has_start_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestStartFileStream::set_has_start_byte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestStartFileStream::clear_has_start_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestStartFileStream::clear_start_byte() {
  start_byte_ = GOOGLE_ULONGLONG(0);
  clear_has_start_byte();
}
inline ::google::protobuf::uint64 RequestStartFileStream::start_byte() const {
  return start_byte_;
}
inline void RequestStartFileStream::set_start_byte(::google::protobuf::uint64 value) {
  set_has_start_byte();
  start_byte_ = value;
}

// optional uint64 end_byte = 4;
inline bool RequestStartFileStream::has_end_byte() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestStartFileStream::set_has_end_byte() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestStartFileStream::clear_has_end_byte() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestStartFileStream::clear_end_byte() {
  end_byte_ = GOOGLE_ULONGLONG(0);
  clear_has_end_byte();
}
inline ::google::protobuf::uint64 RequestStartFileStream::end_byte() const {
  return end_byte_;
}
inline void RequestStartFileStream::set_end_byte(::google::protobuf::uint64 value) {
  set_has_end_byte();
  end_byte_ = value;
}

// -------------------------------------------------------------------

// ResponseStreamDetail

// required .rsctrl.core.Status status = 1;
inline bool ResponseStreamDetail::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseStreamDetail::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseStreamDetail::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseStreamDetail::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseStreamDetail::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseStreamDetail::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseStreamDetail::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// repeated .rsctrl.stream.StreamDesc streams = 2;
inline int ResponseStreamDetail::streams_size() const {
  return streams_.size();
}
inline void ResponseStreamDetail::clear_streams() {
  streams_.Clear();
}
inline const ::rsctrl::stream::StreamDesc& ResponseStreamDetail::streams(int index) const {
  return streams_.Get(index);
}
inline ::rsctrl::stream::StreamDesc* ResponseStreamDetail::mutable_streams(int index) {
  return streams_.Mutable(index);
}
inline ::rsctrl::stream::StreamDesc* ResponseStreamDetail::add_streams() {
  return streams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::stream::StreamDesc >&
ResponseStreamDetail::streams() const {
  return streams_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::stream::StreamDesc >*
ResponseStreamDetail::mutable_streams() {
  return &streams_;
}

// -------------------------------------------------------------------

// RequestControlStream

// required uint32 stream_id = 1;
inline bool RequestControlStream::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestControlStream::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestControlStream::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestControlStream::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 RequestControlStream::stream_id() const {
  return stream_id_;
}
inline void RequestControlStream::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
}

// required .rsctrl.stream.RequestControlStream.StreamAction action = 2;
inline bool RequestControlStream::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestControlStream::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestControlStream::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestControlStream::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::rsctrl::stream::RequestControlStream_StreamAction RequestControlStream::action() const {
  return static_cast< ::rsctrl::stream::RequestControlStream_StreamAction >(action_);
}
inline void RequestControlStream::set_action(::rsctrl::stream::RequestControlStream_StreamAction value) {
  GOOGLE_DCHECK(::rsctrl::stream::RequestControlStream_StreamAction_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional float rate_kbs = 3;
inline bool RequestControlStream::has_rate_kbs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestControlStream::set_has_rate_kbs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestControlStream::clear_has_rate_kbs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestControlStream::clear_rate_kbs() {
  rate_kbs_ = 0;
  clear_has_rate_kbs();
}
inline float RequestControlStream::rate_kbs() const {
  return rate_kbs_;
}
inline void RequestControlStream::set_rate_kbs(float value) {
  set_has_rate_kbs();
  rate_kbs_ = value;
}

// optional uint64 seek_byte = 4;
inline bool RequestControlStream::has_seek_byte() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestControlStream::set_has_seek_byte() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestControlStream::clear_has_seek_byte() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestControlStream::clear_seek_byte() {
  seek_byte_ = GOOGLE_ULONGLONG(0);
  clear_has_seek_byte();
}
inline ::google::protobuf::uint64 RequestControlStream::seek_byte() const {
  return seek_byte_;
}
inline void RequestControlStream::set_seek_byte(::google::protobuf::uint64 value) {
  set_has_seek_byte();
  seek_byte_ = value;
}

// -------------------------------------------------------------------

// RequestListStreams

// required .rsctrl.stream.StreamType request_type = 1;
inline bool RequestListStreams::has_request_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestListStreams::set_has_request_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestListStreams::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestListStreams::clear_request_type() {
  request_type_ = 1;
  clear_has_request_type();
}
inline rsctrl::stream::StreamType RequestListStreams::request_type() const {
  return static_cast< rsctrl::stream::StreamType >(request_type_);
}
inline void RequestListStreams::set_request_type(rsctrl::stream::StreamType value) {
  GOOGLE_DCHECK(rsctrl::stream::StreamType_IsValid(value));
  set_has_request_type();
  request_type_ = value;
}

// -------------------------------------------------------------------

// ResponseStreamData

// required .rsctrl.core.Status status = 1;
inline bool ResponseStreamData::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseStreamData::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseStreamData::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseStreamData::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseStreamData::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseStreamData::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseStreamData::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// required .rsctrl.stream.StreamData data = 2;
inline bool ResponseStreamData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseStreamData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseStreamData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseStreamData::clear_data() {
  if (data_ != NULL) data_->::rsctrl::stream::StreamData::Clear();
  clear_has_data();
}
inline const ::rsctrl::stream::StreamData& ResponseStreamData::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::rsctrl::stream::StreamData* ResponseStreamData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::rsctrl::stream::StreamData;
  return data_;
}
inline ::rsctrl::stream::StreamData* ResponseStreamData::release_data() {
  clear_has_data();
  ::rsctrl::stream::StreamData* temp = data_;
  data_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace rsctrl

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::stream::RequestControlStream_StreamAction>() {
  return ::rsctrl::stream::RequestControlStream_StreamAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::stream::RequestMsgIds>() {
  return rsctrl::stream::RequestMsgIds_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::stream::ResponseMsgIds>() {
  return rsctrl::stream::ResponseMsgIds_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::stream::StreamType>() {
  return rsctrl::stream::StreamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::stream::StreamState>() {
  return rsctrl::stream::StreamState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stream_2eproto__INCLUDED
