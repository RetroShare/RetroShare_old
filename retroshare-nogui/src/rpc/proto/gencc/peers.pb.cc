// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "peers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace peers {

namespace {

const ::google::protobuf::Descriptor* RequestPeers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPeers_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestPeers_SetOption_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestPeers_InfoOption_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResponsePeerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponsePeerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAddPeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAddPeer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestAddPeer_AddCmd_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestExaminePeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestExaminePeer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestExaminePeer_ExamineCmd_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestModifyPeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestModifyPeer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestModifyPeer_ModCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_peers_2eproto() {
  protobuf_AddDesc_peers_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "peers.proto");
  GOOGLE_CHECK(file != NULL);
  RequestPeers_descriptor_ = file->message_type(0);
  static const int RequestPeers_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPeers, set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPeers, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPeers, pgp_ids_),
  };
  RequestPeers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPeers_descriptor_,
      RequestPeers::default_instance_,
      RequestPeers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPeers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPeers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPeers));
  RequestPeers_SetOption_descriptor_ = RequestPeers_descriptor_->enum_type(0);
  RequestPeers_InfoOption_descriptor_ = RequestPeers_descriptor_->enum_type(1);
  ResponsePeerList_descriptor_ = file->message_type(1);
  static const int ResponsePeerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePeerList, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePeerList, peers_),
  };
  ResponsePeerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponsePeerList_descriptor_,
      ResponsePeerList::default_instance_,
      ResponsePeerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePeerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePeerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponsePeerList));
  RequestAddPeer_descriptor_ = file->message_type(2);
  static const int RequestAddPeer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddPeer, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddPeer, pgp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddPeer, ssl_id_),
  };
  RequestAddPeer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAddPeer_descriptor_,
      RequestAddPeer::default_instance_,
      RequestAddPeer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddPeer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddPeer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAddPeer));
  RequestAddPeer_AddCmd_descriptor_ = RequestAddPeer_descriptor_->enum_type(0);
  RequestExaminePeer_descriptor_ = file->message_type(3);
  static const int RequestExaminePeer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExaminePeer, pgp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExaminePeer, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExaminePeer, cert_),
  };
  RequestExaminePeer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestExaminePeer_descriptor_,
      RequestExaminePeer::default_instance_,
      RequestExaminePeer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExaminePeer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExaminePeer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestExaminePeer));
  RequestExaminePeer_ExamineCmd_descriptor_ = RequestExaminePeer_descriptor_->enum_type(0);
  RequestModifyPeer_descriptor_ = file->message_type(4);
  static const int RequestModifyPeer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPeer, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPeer, peers_),
  };
  RequestModifyPeer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestModifyPeer_descriptor_,
      RequestModifyPeer::default_instance_,
      RequestModifyPeer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPeer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPeer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestModifyPeer));
  RequestModifyPeer_ModCmd_descriptor_ = RequestModifyPeer_descriptor_->enum_type(0);
  RequestMsgIds_descriptor_ = file->enum_type(0);
  ResponseMsgIds_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_peers_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPeers_descriptor_, &RequestPeers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponsePeerList_descriptor_, &ResponsePeerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAddPeer_descriptor_, &RequestAddPeer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestExaminePeer_descriptor_, &RequestExaminePeer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestModifyPeer_descriptor_, &RequestModifyPeer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_peers_2eproto() {
  delete RequestPeers::default_instance_;
  delete RequestPeers_reflection_;
  delete ResponsePeerList::default_instance_;
  delete ResponsePeerList_reflection_;
  delete RequestAddPeer::default_instance_;
  delete RequestAddPeer_reflection_;
  delete RequestExaminePeer::default_instance_;
  delete RequestExaminePeer_reflection_;
  delete RequestModifyPeer::default_instance_;
  delete RequestModifyPeer_reflection_;
}

void protobuf_AddDesc_peers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rsctrl::core::protobuf_AddDesc_core_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013peers.proto\022\014rsctrl.peers\032\ncore.proto\""
    "\251\002\n\014RequestPeers\0221\n\003set\030\001 \002(\0162$.rsctrl.p"
    "eers.RequestPeers.SetOption\0223\n\004info\030\002 \002("
    "\0162%.rsctrl.peers.RequestPeers.InfoOption"
    "\022\017\n\007pgp_ids\030\003 \003(\t\"^\n\tSetOption\022\t\n\005OWNID\020"
    "\001\022\n\n\006LISTED\020\002\022\r\n\tCONNECTED\020\003\022\013\n\007FRIENDS\020"
    "\004\022\t\n\005VALID\020\005\022\n\n\006SIGNED\020\006\022\007\n\003ALL\020\007\"@\n\nInf"
    "oOption\022\014\n\010NAMEONLY\020\001\022\t\n\005BASIC\020\002\022\014\n\010LOCA"
    "TION\020\003\022\013\n\007ALLINFO\020\004\"[\n\020ResponsePeerList\022"
    "#\n\006status\030\001 \002(\0132\023.rsctrl.core.Status\022\"\n\005"
    "peers\030\002 \003(\0132\023.rsctrl.core.Person\"\201\001\n\016Req"
    "uestAddPeer\0220\n\003cmd\030\001 \002(\0162#.rsctrl.peers."
    "RequestAddPeer.AddCmd\022\016\n\006pgp_id\030\002 \002(\t\022\016\n"
    "\006ssl_id\030\003 \001(\t\"\035\n\006AddCmd\022\007\n\003ADD\020\001\022\n\n\006REMO"
    "VE\020\002\"\223\001\n\022RequestExaminePeer\022\016\n\006pgp_id\030\001 "
    "\002(\t\0228\n\003cmd\030\002 \002(\0162+.rsctrl.peers.RequestE"
    "xaminePeer.ExamineCmd\022\014\n\004cert\030\003 \002(\t\"%\n\nE"
    "xamineCmd\022\n\n\006IMPORT\020\003\022\013\n\007EXAMINE\020\004\"\231\001\n\021R"
    "equestModifyPeer\0223\n\003cmd\030\001 \002(\0162&.rsctrl.p"
    "eers.RequestModifyPeer.ModCmd\022\"\n\005peers\030\002"
    " \003(\0132\023.rsctrl.core.Person\"+\n\006ModCmd\022\010\n\004N"
    "OOP\020\000\022\013\n\007ADDRESS\020\001\022\n\n\006DYNDNS\020\002*|\n\rReques"
    "tMsgIds\022\026\n\022MsgId_RequestPeers\020\001\022\030\n\024MsgId"
    "_RequestAddPeer\020\002\022\034\n\030MsgId_RequestExamin"
    "ePeer\020\003\022\033\n\027MsgId_RequestModifyPeer\020\004*,\n\016"
    "ResponseMsgIds\022\032\n\026MsgId_ResponsePeerList"
    "\020\001", 1042);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "peers.proto", &protobuf_RegisterTypes);
  RequestPeers::default_instance_ = new RequestPeers();
  ResponsePeerList::default_instance_ = new ResponsePeerList();
  RequestAddPeer::default_instance_ = new RequestAddPeer();
  RequestExaminePeer::default_instance_ = new RequestExaminePeer();
  RequestModifyPeer::default_instance_ = new RequestModifyPeer();
  RequestPeers::default_instance_->InitAsDefaultInstance();
  ResponsePeerList::default_instance_->InitAsDefaultInstance();
  RequestAddPeer::default_instance_->InitAsDefaultInstance();
  RequestExaminePeer::default_instance_->InitAsDefaultInstance();
  RequestModifyPeer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_peers_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_peers_2eproto {
  StaticDescriptorInitializer_peers_2eproto() {
    protobuf_AddDesc_peers_2eproto();
  }
} static_descriptor_initializer_peers_2eproto_;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMsgIds_descriptor_;
}
bool RequestMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseMsgIds_descriptor_;
}
bool ResponseMsgIds_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestPeers_SetOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPeers_SetOption_descriptor_;
}
bool RequestPeers_SetOption_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestPeers_SetOption RequestPeers::OWNID;
const RequestPeers_SetOption RequestPeers::LISTED;
const RequestPeers_SetOption RequestPeers::CONNECTED;
const RequestPeers_SetOption RequestPeers::FRIENDS;
const RequestPeers_SetOption RequestPeers::VALID;
const RequestPeers_SetOption RequestPeers::SIGNED;
const RequestPeers_SetOption RequestPeers::ALL;
const RequestPeers_SetOption RequestPeers::SetOption_MIN;
const RequestPeers_SetOption RequestPeers::SetOption_MAX;
const int RequestPeers::SetOption_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RequestPeers_InfoOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPeers_InfoOption_descriptor_;
}
bool RequestPeers_InfoOption_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestPeers_InfoOption RequestPeers::NAMEONLY;
const RequestPeers_InfoOption RequestPeers::BASIC;
const RequestPeers_InfoOption RequestPeers::LOCATION;
const RequestPeers_InfoOption RequestPeers::ALLINFO;
const RequestPeers_InfoOption RequestPeers::InfoOption_MIN;
const RequestPeers_InfoOption RequestPeers::InfoOption_MAX;
const int RequestPeers::InfoOption_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestPeers::kSetFieldNumber;
const int RequestPeers::kInfoFieldNumber;
const int RequestPeers::kPgpIdsFieldNumber;
#endif  // !_MSC_VER

RequestPeers::RequestPeers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPeers::InitAsDefaultInstance() {
}

RequestPeers::RequestPeers(const RequestPeers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPeers::SharedCtor() {
  _cached_size_ = 0;
  set_ = 1;
  info_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPeers::~RequestPeers() {
  SharedDtor();
}

void RequestPeers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPeers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPeers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPeers_descriptor_;
}

const RequestPeers& RequestPeers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peers_2eproto();  return *default_instance_;
}

RequestPeers* RequestPeers::default_instance_ = NULL;

RequestPeers* RequestPeers::New() const {
  return new RequestPeers;
}

void RequestPeers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    set_ = 1;
    info_ = 1;
  }
  pgp_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPeers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.peers.RequestPeers.SetOption set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::peers::RequestPeers_SetOption_IsValid(value)) {
            set_set(static_cast< ::rsctrl::peers::RequestPeers_SetOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info;
        break;
      }
      
      // required .rsctrl.peers.RequestPeers.InfoOption info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::peers::RequestPeers_InfoOption_IsValid(value)) {
            set_info(static_cast< ::rsctrl::peers::RequestPeers_InfoOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pgp_ids;
        break;
      }
      
      // repeated string pgp_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pgp_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pgp_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pgp_ids(0).data(), this->pgp_ids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pgp_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPeers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.peers.RequestPeers.SetOption set = 1;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->set(), output);
  }
  
  // required .rsctrl.peers.RequestPeers.InfoOption info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->info(), output);
  }
  
  // repeated string pgp_ids = 3;
  for (int i = 0; i < this->pgp_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pgp_ids(i).data(), this->pgp_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pgp_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPeers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.peers.RequestPeers.SetOption set = 1;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->set(), target);
  }
  
  // required .rsctrl.peers.RequestPeers.InfoOption info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->info(), target);
  }
  
  // repeated string pgp_ids = 3;
  for (int i = 0; i < this->pgp_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pgp_ids(i).data(), this->pgp_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->pgp_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPeers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.peers.RequestPeers.SetOption set = 1;
    if (has_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->set());
    }
    
    // required .rsctrl.peers.RequestPeers.InfoOption info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->info());
    }
    
  }
  // repeated string pgp_ids = 3;
  total_size += 1 * this->pgp_ids_size();
  for (int i = 0; i < this->pgp_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pgp_ids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPeers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPeers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPeers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPeers::MergeFrom(const RequestPeers& from) {
  GOOGLE_CHECK_NE(&from, this);
  pgp_ids_.MergeFrom(from.pgp_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set()) {
      set_set(from.set());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPeers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPeers::CopyFrom(const RequestPeers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPeers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestPeers::Swap(RequestPeers* other) {
  if (other != this) {
    std::swap(set_, other->set_);
    std::swap(info_, other->info_);
    pgp_ids_.Swap(&other->pgp_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPeers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPeers_descriptor_;
  metadata.reflection = RequestPeers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponsePeerList::kStatusFieldNumber;
const int ResponsePeerList::kPeersFieldNumber;
#endif  // !_MSC_VER

ResponsePeerList::ResponsePeerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponsePeerList::InitAsDefaultInstance() {
  status_ = const_cast< ::rsctrl::core::Status*>(&::rsctrl::core::Status::default_instance());
}

ResponsePeerList::ResponsePeerList(const ResponsePeerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponsePeerList::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponsePeerList::~ResponsePeerList() {
  SharedDtor();
}

void ResponsePeerList::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ResponsePeerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponsePeerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponsePeerList_descriptor_;
}

const ResponsePeerList& ResponsePeerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peers_2eproto();  return *default_instance_;
}

ResponsePeerList* ResponsePeerList::default_instance_ = NULL;

ResponsePeerList* ResponsePeerList::New() const {
  return new ResponsePeerList;
}

void ResponsePeerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
    }
  }
  peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponsePeerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.core.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peers;
        break;
      }
      
      // repeated .rsctrl.core.Person peers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponsePeerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // repeated .rsctrl.core.Person peers = 2;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponsePeerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.core.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // repeated .rsctrl.core.Person peers = 2;
  for (int i = 0; i < this->peers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponsePeerList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.core.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  // repeated .rsctrl.core.Person peers = 2;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponsePeerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponsePeerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponsePeerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponsePeerList::MergeFrom(const ResponsePeerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rsctrl::core::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponsePeerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePeerList::CopyFrom(const ResponsePeerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePeerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < peers_size(); i++) {
    if (!this->peers(i).IsInitialized()) return false;
  }
  return true;
}

void ResponsePeerList::Swap(ResponsePeerList* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    peers_.Swap(&other->peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponsePeerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponsePeerList_descriptor_;
  metadata.reflection = ResponsePeerList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestAddPeer_AddCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAddPeer_AddCmd_descriptor_;
}
bool RequestAddPeer_AddCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestAddPeer_AddCmd RequestAddPeer::ADD;
const RequestAddPeer_AddCmd RequestAddPeer::REMOVE;
const RequestAddPeer_AddCmd RequestAddPeer::AddCmd_MIN;
const RequestAddPeer_AddCmd RequestAddPeer::AddCmd_MAX;
const int RequestAddPeer::AddCmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestAddPeer::kCmdFieldNumber;
const int RequestAddPeer::kPgpIdFieldNumber;
const int RequestAddPeer::kSslIdFieldNumber;
#endif  // !_MSC_VER

RequestAddPeer::RequestAddPeer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestAddPeer::InitAsDefaultInstance() {
}

RequestAddPeer::RequestAddPeer(const RequestAddPeer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestAddPeer::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  pgp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ssl_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAddPeer::~RequestAddPeer() {
  SharedDtor();
}

void RequestAddPeer::SharedDtor() {
  if (pgp_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pgp_id_;
  }
  if (ssl_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ssl_id_;
  }
  if (this != default_instance_) {
  }
}

void RequestAddPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAddPeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAddPeer_descriptor_;
}

const RequestAddPeer& RequestAddPeer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peers_2eproto();  return *default_instance_;
}

RequestAddPeer* RequestAddPeer::default_instance_ = NULL;

RequestAddPeer* RequestAddPeer::New() const {
  return new RequestAddPeer;
}

void RequestAddPeer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_pgp_id()) {
      if (pgp_id_ != &::google::protobuf::internal::kEmptyString) {
        pgp_id_->clear();
      }
    }
    if (has_ssl_id()) {
      if (ssl_id_ != &::google::protobuf::internal::kEmptyString) {
        ssl_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAddPeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.peers.RequestAddPeer.AddCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::peers::RequestAddPeer_AddCmd_IsValid(value)) {
            set_cmd(static_cast< ::rsctrl::peers::RequestAddPeer_AddCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pgp_id;
        break;
      }
      
      // required string pgp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pgp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pgp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pgp_id().data(), this->pgp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ssl_id;
        break;
      }
      
      // optional string ssl_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssl_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssl_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ssl_id().data(), this->ssl_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestAddPeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.peers.RequestAddPeer.AddCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }
  
  // required string pgp_id = 2;
  if (has_pgp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pgp_id().data(), this->pgp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pgp_id(), output);
  }
  
  // optional string ssl_id = 3;
  if (has_ssl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ssl_id().data(), this->ssl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ssl_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestAddPeer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.peers.RequestAddPeer.AddCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }
  
  // required string pgp_id = 2;
  if (has_pgp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pgp_id().data(), this->pgp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pgp_id(), target);
  }
  
  // optional string ssl_id = 3;
  if (has_ssl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ssl_id().data(), this->ssl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ssl_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestAddPeer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.peers.RequestAddPeer.AddCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
    // required string pgp_id = 2;
    if (has_pgp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pgp_id());
    }
    
    // optional string ssl_id = 3;
    if (has_ssl_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ssl_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAddPeer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAddPeer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAddPeer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAddPeer::MergeFrom(const RequestAddPeer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_pgp_id()) {
      set_pgp_id(from.pgp_id());
    }
    if (from.has_ssl_id()) {
      set_ssl_id(from.ssl_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAddPeer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAddPeer::CopyFrom(const RequestAddPeer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddPeer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestAddPeer::Swap(RequestAddPeer* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(pgp_id_, other->pgp_id_);
    std::swap(ssl_id_, other->ssl_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAddPeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAddPeer_descriptor_;
  metadata.reflection = RequestAddPeer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestExaminePeer_ExamineCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestExaminePeer_ExamineCmd_descriptor_;
}
bool RequestExaminePeer_ExamineCmd_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestExaminePeer_ExamineCmd RequestExaminePeer::IMPORT;
const RequestExaminePeer_ExamineCmd RequestExaminePeer::EXAMINE;
const RequestExaminePeer_ExamineCmd RequestExaminePeer::ExamineCmd_MIN;
const RequestExaminePeer_ExamineCmd RequestExaminePeer::ExamineCmd_MAX;
const int RequestExaminePeer::ExamineCmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestExaminePeer::kPgpIdFieldNumber;
const int RequestExaminePeer::kCmdFieldNumber;
const int RequestExaminePeer::kCertFieldNumber;
#endif  // !_MSC_VER

RequestExaminePeer::RequestExaminePeer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestExaminePeer::InitAsDefaultInstance() {
}

RequestExaminePeer::RequestExaminePeer(const RequestExaminePeer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestExaminePeer::SharedCtor() {
  _cached_size_ = 0;
  pgp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = 3;
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestExaminePeer::~RequestExaminePeer() {
  SharedDtor();
}

void RequestExaminePeer::SharedDtor() {
  if (pgp_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pgp_id_;
  }
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (this != default_instance_) {
  }
}

void RequestExaminePeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestExaminePeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestExaminePeer_descriptor_;
}

const RequestExaminePeer& RequestExaminePeer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peers_2eproto();  return *default_instance_;
}

RequestExaminePeer* RequestExaminePeer::default_instance_ = NULL;

RequestExaminePeer* RequestExaminePeer::New() const {
  return new RequestExaminePeer;
}

void RequestExaminePeer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pgp_id()) {
      if (pgp_id_ != &::google::protobuf::internal::kEmptyString) {
        pgp_id_->clear();
      }
    }
    cmd_ = 3;
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestExaminePeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pgp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pgp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pgp_id().data(), this->pgp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }
      
      // required .rsctrl.peers.RequestExaminePeer.ExamineCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::peers::RequestExaminePeer_ExamineCmd_IsValid(value)) {
            set_cmd(static_cast< ::rsctrl::peers::RequestExaminePeer_ExamineCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cert;
        break;
      }
      
      // required string cert = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cert()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cert().data(), this->cert().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestExaminePeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pgp_id = 1;
  if (has_pgp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pgp_id().data(), this->pgp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pgp_id(), output);
  }
  
  // required .rsctrl.peers.RequestExaminePeer.ExamineCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }
  
  // required string cert = 3;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cert().data(), this->cert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cert(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestExaminePeer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pgp_id = 1;
  if (has_pgp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pgp_id().data(), this->pgp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pgp_id(), target);
  }
  
  // required .rsctrl.peers.RequestExaminePeer.ExamineCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }
  
  // required string cert = 3;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cert().data(), this->cert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cert(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestExaminePeer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pgp_id = 1;
    if (has_pgp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pgp_id());
    }
    
    // required .rsctrl.peers.RequestExaminePeer.ExamineCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
    // required string cert = 3;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cert());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestExaminePeer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestExaminePeer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestExaminePeer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestExaminePeer::MergeFrom(const RequestExaminePeer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pgp_id()) {
      set_pgp_id(from.pgp_id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestExaminePeer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestExaminePeer::CopyFrom(const RequestExaminePeer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestExaminePeer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RequestExaminePeer::Swap(RequestExaminePeer* other) {
  if (other != this) {
    std::swap(pgp_id_, other->pgp_id_);
    std::swap(cmd_, other->cmd_);
    std::swap(cert_, other->cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestExaminePeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestExaminePeer_descriptor_;
  metadata.reflection = RequestExaminePeer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestModifyPeer_ModCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestModifyPeer_ModCmd_descriptor_;
}
bool RequestModifyPeer_ModCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestModifyPeer_ModCmd RequestModifyPeer::NOOP;
const RequestModifyPeer_ModCmd RequestModifyPeer::ADDRESS;
const RequestModifyPeer_ModCmd RequestModifyPeer::DYNDNS;
const RequestModifyPeer_ModCmd RequestModifyPeer::ModCmd_MIN;
const RequestModifyPeer_ModCmd RequestModifyPeer::ModCmd_MAX;
const int RequestModifyPeer::ModCmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestModifyPeer::kCmdFieldNumber;
const int RequestModifyPeer::kPeersFieldNumber;
#endif  // !_MSC_VER

RequestModifyPeer::RequestModifyPeer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestModifyPeer::InitAsDefaultInstance() {
}

RequestModifyPeer::RequestModifyPeer(const RequestModifyPeer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestModifyPeer::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestModifyPeer::~RequestModifyPeer() {
  SharedDtor();
}

void RequestModifyPeer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestModifyPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestModifyPeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestModifyPeer_descriptor_;
}

const RequestModifyPeer& RequestModifyPeer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peers_2eproto();  return *default_instance_;
}

RequestModifyPeer* RequestModifyPeer::default_instance_ = NULL;

RequestModifyPeer* RequestModifyPeer::New() const {
  return new RequestModifyPeer;
}

void RequestModifyPeer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestModifyPeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rsctrl.peers.RequestModifyPeer.ModCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rsctrl::peers::RequestModifyPeer_ModCmd_IsValid(value)) {
            set_cmd(static_cast< ::rsctrl::peers::RequestModifyPeer_ModCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peers;
        break;
      }
      
      // repeated .rsctrl.core.Person peers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestModifyPeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rsctrl.peers.RequestModifyPeer.ModCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }
  
  // repeated .rsctrl.core.Person peers = 2;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestModifyPeer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rsctrl.peers.RequestModifyPeer.ModCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }
  
  // repeated .rsctrl.core.Person peers = 2;
  for (int i = 0; i < this->peers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestModifyPeer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rsctrl.peers.RequestModifyPeer.ModCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
  }
  // repeated .rsctrl.core.Person peers = 2;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestModifyPeer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestModifyPeer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestModifyPeer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestModifyPeer::MergeFrom(const RequestModifyPeer& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestModifyPeer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestModifyPeer::CopyFrom(const RequestModifyPeer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestModifyPeer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < peers_size(); i++) {
    if (!this->peers(i).IsInitialized()) return false;
  }
  return true;
}

void RequestModifyPeer::Swap(RequestModifyPeer* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    peers_.Swap(&other->peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestModifyPeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestModifyPeer_descriptor_;
  metadata.reflection = RequestModifyPeer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace peers
}  // namespace rsctrl

// @@protoc_insertion_point(global_scope)
