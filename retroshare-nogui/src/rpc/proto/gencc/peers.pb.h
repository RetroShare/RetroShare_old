// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peers.proto

#ifndef PROTOBUF_peers_2eproto__INCLUDED
#define PROTOBUF_peers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "core.pb.h"
// @@protoc_insertion_point(includes)

namespace rsctrl {
namespace peers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_peers_2eproto();
void protobuf_AssignDesc_peers_2eproto();
void protobuf_ShutdownFile_peers_2eproto();

class RequestPeers;
class ResponsePeerList;
class RequestAddPeer;
class ResponseAddPeer;
class RequestModifyPeer;
class ResponseModifyPeer;

enum RequestPeers_SetOption {
  RequestPeers_SetOption_OWNID = 1,
  RequestPeers_SetOption_LISTED = 2,
  RequestPeers_SetOption_CONNECTED = 3,
  RequestPeers_SetOption_FRIENDS = 4,
  RequestPeers_SetOption_VALID = 5,
  RequestPeers_SetOption_SIGNED = 6,
  RequestPeers_SetOption_ALL = 7
};
bool RequestPeers_SetOption_IsValid(int value);
const RequestPeers_SetOption RequestPeers_SetOption_SetOption_MIN = RequestPeers_SetOption_OWNID;
const RequestPeers_SetOption RequestPeers_SetOption_SetOption_MAX = RequestPeers_SetOption_ALL;
const int RequestPeers_SetOption_SetOption_ARRAYSIZE = RequestPeers_SetOption_SetOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestPeers_SetOption_descriptor();
inline const ::std::string& RequestPeers_SetOption_Name(RequestPeers_SetOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestPeers_SetOption_descriptor(), value);
}
inline bool RequestPeers_SetOption_Parse(
    const ::std::string& name, RequestPeers_SetOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestPeers_SetOption>(
    RequestPeers_SetOption_descriptor(), name, value);
}
enum RequestPeers_InfoOption {
  RequestPeers_InfoOption_NAMEONLY = 1,
  RequestPeers_InfoOption_BASIC = 2,
  RequestPeers_InfoOption_LOCATION = 3,
  RequestPeers_InfoOption_ALLINFO = 4
};
bool RequestPeers_InfoOption_IsValid(int value);
const RequestPeers_InfoOption RequestPeers_InfoOption_InfoOption_MIN = RequestPeers_InfoOption_NAMEONLY;
const RequestPeers_InfoOption RequestPeers_InfoOption_InfoOption_MAX = RequestPeers_InfoOption_ALLINFO;
const int RequestPeers_InfoOption_InfoOption_ARRAYSIZE = RequestPeers_InfoOption_InfoOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestPeers_InfoOption_descriptor();
inline const ::std::string& RequestPeers_InfoOption_Name(RequestPeers_InfoOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestPeers_InfoOption_descriptor(), value);
}
inline bool RequestPeers_InfoOption_Parse(
    const ::std::string& name, RequestPeers_InfoOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestPeers_InfoOption>(
    RequestPeers_InfoOption_descriptor(), name, value);
}
enum RequestAddPeer_AddCmd {
  RequestAddPeer_AddCmd_NOOP = 0,
  RequestAddPeer_AddCmd_ADD = 1,
  RequestAddPeer_AddCmd_REMOVE = 2,
  RequestAddPeer_AddCmd_IMPORT = 3,
  RequestAddPeer_AddCmd_EXAMINE = 4
};
bool RequestAddPeer_AddCmd_IsValid(int value);
const RequestAddPeer_AddCmd RequestAddPeer_AddCmd_AddCmd_MIN = RequestAddPeer_AddCmd_NOOP;
const RequestAddPeer_AddCmd RequestAddPeer_AddCmd_AddCmd_MAX = RequestAddPeer_AddCmd_EXAMINE;
const int RequestAddPeer_AddCmd_AddCmd_ARRAYSIZE = RequestAddPeer_AddCmd_AddCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestAddPeer_AddCmd_descriptor();
inline const ::std::string& RequestAddPeer_AddCmd_Name(RequestAddPeer_AddCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestAddPeer_AddCmd_descriptor(), value);
}
inline bool RequestAddPeer_AddCmd_Parse(
    const ::std::string& name, RequestAddPeer_AddCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestAddPeer_AddCmd>(
    RequestAddPeer_AddCmd_descriptor(), name, value);
}
enum RequestModifyPeer_ModCmd {
  RequestModifyPeer_ModCmd_NOOP = 0,
  RequestModifyPeer_ModCmd_ADDRESS = 1,
  RequestModifyPeer_ModCmd_DYNDNS = 2
};
bool RequestModifyPeer_ModCmd_IsValid(int value);
const RequestModifyPeer_ModCmd RequestModifyPeer_ModCmd_ModCmd_MIN = RequestModifyPeer_ModCmd_NOOP;
const RequestModifyPeer_ModCmd RequestModifyPeer_ModCmd_ModCmd_MAX = RequestModifyPeer_ModCmd_DYNDNS;
const int RequestModifyPeer_ModCmd_ModCmd_ARRAYSIZE = RequestModifyPeer_ModCmd_ModCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestModifyPeer_ModCmd_descriptor();
inline const ::std::string& RequestModifyPeer_ModCmd_Name(RequestModifyPeer_ModCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestModifyPeer_ModCmd_descriptor(), value);
}
inline bool RequestModifyPeer_ModCmd_Parse(
    const ::std::string& name, RequestModifyPeer_ModCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestModifyPeer_ModCmd>(
    RequestModifyPeer_ModCmd_descriptor(), name, value);
}
enum RequestMsgIds {
  MsgId_RequestPeers = 1,
  MsgId_RequestAddPeer = 2,
  MsgId_RequestModifyPeer = 3
};
bool RequestMsgIds_IsValid(int value);
const RequestMsgIds RequestMsgIds_MIN = MsgId_RequestPeers;
const RequestMsgIds RequestMsgIds_MAX = MsgId_RequestModifyPeer;
const int RequestMsgIds_ARRAYSIZE = RequestMsgIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestMsgIds_descriptor();
inline const ::std::string& RequestMsgIds_Name(RequestMsgIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestMsgIds_descriptor(), value);
}
inline bool RequestMsgIds_Parse(
    const ::std::string& name, RequestMsgIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestMsgIds>(
    RequestMsgIds_descriptor(), name, value);
}
enum ResponseMsgIds {
  MsgId_ResponsePeerList = 1,
  MsgId_ResponseAddPeer = 2,
  MsgId_ResponseModifyPeer = 3
};
bool ResponseMsgIds_IsValid(int value);
const ResponseMsgIds ResponseMsgIds_MIN = MsgId_ResponsePeerList;
const ResponseMsgIds ResponseMsgIds_MAX = MsgId_ResponseModifyPeer;
const int ResponseMsgIds_ARRAYSIZE = ResponseMsgIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseMsgIds_descriptor();
inline const ::std::string& ResponseMsgIds_Name(ResponseMsgIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseMsgIds_descriptor(), value);
}
inline bool ResponseMsgIds_Parse(
    const ::std::string& name, ResponseMsgIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseMsgIds>(
    ResponseMsgIds_descriptor(), name, value);
}
// ===================================================================

class RequestPeers : public ::google::protobuf::Message {
 public:
  RequestPeers();
  virtual ~RequestPeers();
  
  RequestPeers(const RequestPeers& from);
  
  inline RequestPeers& operator=(const RequestPeers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPeers& default_instance();
  
  void Swap(RequestPeers* other);
  
  // implements Message ----------------------------------------------
  
  RequestPeers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPeers& from);
  void MergeFrom(const RequestPeers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RequestPeers_SetOption SetOption;
  static const SetOption OWNID = RequestPeers_SetOption_OWNID;
  static const SetOption LISTED = RequestPeers_SetOption_LISTED;
  static const SetOption CONNECTED = RequestPeers_SetOption_CONNECTED;
  static const SetOption FRIENDS = RequestPeers_SetOption_FRIENDS;
  static const SetOption VALID = RequestPeers_SetOption_VALID;
  static const SetOption SIGNED = RequestPeers_SetOption_SIGNED;
  static const SetOption ALL = RequestPeers_SetOption_ALL;
  static inline bool SetOption_IsValid(int value) {
    return RequestPeers_SetOption_IsValid(value);
  }
  static const SetOption SetOption_MIN =
    RequestPeers_SetOption_SetOption_MIN;
  static const SetOption SetOption_MAX =
    RequestPeers_SetOption_SetOption_MAX;
  static const int SetOption_ARRAYSIZE =
    RequestPeers_SetOption_SetOption_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SetOption_descriptor() {
    return RequestPeers_SetOption_descriptor();
  }
  static inline const ::std::string& SetOption_Name(SetOption value) {
    return RequestPeers_SetOption_Name(value);
  }
  static inline bool SetOption_Parse(const ::std::string& name,
      SetOption* value) {
    return RequestPeers_SetOption_Parse(name, value);
  }
  
  typedef RequestPeers_InfoOption InfoOption;
  static const InfoOption NAMEONLY = RequestPeers_InfoOption_NAMEONLY;
  static const InfoOption BASIC = RequestPeers_InfoOption_BASIC;
  static const InfoOption LOCATION = RequestPeers_InfoOption_LOCATION;
  static const InfoOption ALLINFO = RequestPeers_InfoOption_ALLINFO;
  static inline bool InfoOption_IsValid(int value) {
    return RequestPeers_InfoOption_IsValid(value);
  }
  static const InfoOption InfoOption_MIN =
    RequestPeers_InfoOption_InfoOption_MIN;
  static const InfoOption InfoOption_MAX =
    RequestPeers_InfoOption_InfoOption_MAX;
  static const int InfoOption_ARRAYSIZE =
    RequestPeers_InfoOption_InfoOption_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InfoOption_descriptor() {
    return RequestPeers_InfoOption_descriptor();
  }
  static inline const ::std::string& InfoOption_Name(InfoOption value) {
    return RequestPeers_InfoOption_Name(value);
  }
  static inline bool InfoOption_Parse(const ::std::string& name,
      InfoOption* value) {
    return RequestPeers_InfoOption_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.peers.RequestPeers.SetOption set = 1;
  inline bool has_set() const;
  inline void clear_set();
  static const int kSetFieldNumber = 1;
  inline ::rsctrl::peers::RequestPeers_SetOption set() const;
  inline void set_set(::rsctrl::peers::RequestPeers_SetOption value);
  
  // required .rsctrl.peers.RequestPeers.InfoOption info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline ::rsctrl::peers::RequestPeers_InfoOption info() const;
  inline void set_info(::rsctrl::peers::RequestPeers_InfoOption value);
  
  // repeated string gpg_ids = 3;
  inline int gpg_ids_size() const;
  inline void clear_gpg_ids();
  static const int kGpgIdsFieldNumber = 3;
  inline const ::std::string& gpg_ids(int index) const;
  inline ::std::string* mutable_gpg_ids(int index);
  inline void set_gpg_ids(int index, const ::std::string& value);
  inline void set_gpg_ids(int index, const char* value);
  inline void set_gpg_ids(int index, const char* value, size_t size);
  inline ::std::string* add_gpg_ids();
  inline void add_gpg_ids(const ::std::string& value);
  inline void add_gpg_ids(const char* value);
  inline void add_gpg_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& gpg_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gpg_ids();
  
  // @@protoc_insertion_point(class_scope:rsctrl.peers.RequestPeers)
 private:
  inline void set_has_set();
  inline void clear_has_set();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int set_;
  int info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gpg_ids_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_peers_2eproto();
  friend void protobuf_AssignDesc_peers_2eproto();
  friend void protobuf_ShutdownFile_peers_2eproto();
  
  void InitAsDefaultInstance();
  static RequestPeers* default_instance_;
};
// -------------------------------------------------------------------

class ResponsePeerList : public ::google::protobuf::Message {
 public:
  ResponsePeerList();
  virtual ~ResponsePeerList();
  
  ResponsePeerList(const ResponsePeerList& from);
  
  inline ResponsePeerList& operator=(const ResponsePeerList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponsePeerList& default_instance();
  
  void Swap(ResponsePeerList* other);
  
  // implements Message ----------------------------------------------
  
  ResponsePeerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponsePeerList& from);
  void MergeFrom(const ResponsePeerList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // repeated .rsctrl.core.Person peers = 2;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 2;
  inline const ::rsctrl::core::Person& peers(int index) const;
  inline ::rsctrl::core::Person* mutable_peers(int index);
  inline ::rsctrl::core::Person* add_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >&
      peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >*
      mutable_peers();
  
  // @@protoc_insertion_point(class_scope:rsctrl.peers.ResponsePeerList)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person > peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_peers_2eproto();
  friend void protobuf_AssignDesc_peers_2eproto();
  friend void protobuf_ShutdownFile_peers_2eproto();
  
  void InitAsDefaultInstance();
  static ResponsePeerList* default_instance_;
};
// -------------------------------------------------------------------

class RequestAddPeer : public ::google::protobuf::Message {
 public:
  RequestAddPeer();
  virtual ~RequestAddPeer();
  
  RequestAddPeer(const RequestAddPeer& from);
  
  inline RequestAddPeer& operator=(const RequestAddPeer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestAddPeer& default_instance();
  
  void Swap(RequestAddPeer* other);
  
  // implements Message ----------------------------------------------
  
  RequestAddPeer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestAddPeer& from);
  void MergeFrom(const RequestAddPeer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RequestAddPeer_AddCmd AddCmd;
  static const AddCmd NOOP = RequestAddPeer_AddCmd_NOOP;
  static const AddCmd ADD = RequestAddPeer_AddCmd_ADD;
  static const AddCmd REMOVE = RequestAddPeer_AddCmd_REMOVE;
  static const AddCmd IMPORT = RequestAddPeer_AddCmd_IMPORT;
  static const AddCmd EXAMINE = RequestAddPeer_AddCmd_EXAMINE;
  static inline bool AddCmd_IsValid(int value) {
    return RequestAddPeer_AddCmd_IsValid(value);
  }
  static const AddCmd AddCmd_MIN =
    RequestAddPeer_AddCmd_AddCmd_MIN;
  static const AddCmd AddCmd_MAX =
    RequestAddPeer_AddCmd_AddCmd_MAX;
  static const int AddCmd_ARRAYSIZE =
    RequestAddPeer_AddCmd_AddCmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AddCmd_descriptor() {
    return RequestAddPeer_AddCmd_descriptor();
  }
  static inline const ::std::string& AddCmd_Name(AddCmd value) {
    return RequestAddPeer_AddCmd_Name(value);
  }
  static inline bool AddCmd_Parse(const ::std::string& name,
      AddCmd* value) {
    return RequestAddPeer_AddCmd_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string gpg_id = 1;
  inline bool has_gpg_id() const;
  inline void clear_gpg_id();
  static const int kGpgIdFieldNumber = 1;
  inline const ::std::string& gpg_id() const;
  inline void set_gpg_id(const ::std::string& value);
  inline void set_gpg_id(const char* value);
  inline void set_gpg_id(const char* value, size_t size);
  inline ::std::string* mutable_gpg_id();
  inline ::std::string* release_gpg_id();
  
  // required .rsctrl.peers.RequestAddPeer.AddCmd cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::rsctrl::peers::RequestAddPeer_AddCmd cmd() const;
  inline void set_cmd(::rsctrl::peers::RequestAddPeer_AddCmd value);
  
  // optional string cert = 3;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 3;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const char* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  
  // @@protoc_insertion_point(class_scope:rsctrl.peers.RequestAddPeer)
 private:
  inline void set_has_gpg_id();
  inline void clear_has_gpg_id();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_cert();
  inline void clear_has_cert();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* gpg_id_;
  ::std::string* cert_;
  int cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_peers_2eproto();
  friend void protobuf_AssignDesc_peers_2eproto();
  friend void protobuf_ShutdownFile_peers_2eproto();
  
  void InitAsDefaultInstance();
  static RequestAddPeer* default_instance_;
};
// -------------------------------------------------------------------

class ResponseAddPeer : public ::google::protobuf::Message {
 public:
  ResponseAddPeer();
  virtual ~ResponseAddPeer();
  
  ResponseAddPeer(const ResponseAddPeer& from);
  
  inline ResponseAddPeer& operator=(const ResponseAddPeer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseAddPeer& default_instance();
  
  void Swap(ResponseAddPeer* other);
  
  // implements Message ----------------------------------------------
  
  ResponseAddPeer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseAddPeer& from);
  void MergeFrom(const ResponseAddPeer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // repeated .rsctrl.core.Person peers = 2;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 2;
  inline const ::rsctrl::core::Person& peers(int index) const;
  inline ::rsctrl::core::Person* mutable_peers(int index);
  inline ::rsctrl::core::Person* add_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >&
      peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >*
      mutable_peers();
  
  // @@protoc_insertion_point(class_scope:rsctrl.peers.ResponseAddPeer)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person > peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_peers_2eproto();
  friend void protobuf_AssignDesc_peers_2eproto();
  friend void protobuf_ShutdownFile_peers_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseAddPeer* default_instance_;
};
// -------------------------------------------------------------------

class RequestModifyPeer : public ::google::protobuf::Message {
 public:
  RequestModifyPeer();
  virtual ~RequestModifyPeer();
  
  RequestModifyPeer(const RequestModifyPeer& from);
  
  inline RequestModifyPeer& operator=(const RequestModifyPeer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestModifyPeer& default_instance();
  
  void Swap(RequestModifyPeer* other);
  
  // implements Message ----------------------------------------------
  
  RequestModifyPeer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestModifyPeer& from);
  void MergeFrom(const RequestModifyPeer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RequestModifyPeer_ModCmd ModCmd;
  static const ModCmd NOOP = RequestModifyPeer_ModCmd_NOOP;
  static const ModCmd ADDRESS = RequestModifyPeer_ModCmd_ADDRESS;
  static const ModCmd DYNDNS = RequestModifyPeer_ModCmd_DYNDNS;
  static inline bool ModCmd_IsValid(int value) {
    return RequestModifyPeer_ModCmd_IsValid(value);
  }
  static const ModCmd ModCmd_MIN =
    RequestModifyPeer_ModCmd_ModCmd_MIN;
  static const ModCmd ModCmd_MAX =
    RequestModifyPeer_ModCmd_ModCmd_MAX;
  static const int ModCmd_ARRAYSIZE =
    RequestModifyPeer_ModCmd_ModCmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModCmd_descriptor() {
    return RequestModifyPeer_ModCmd_descriptor();
  }
  static inline const ::std::string& ModCmd_Name(ModCmd value) {
    return RequestModifyPeer_ModCmd_Name(value);
  }
  static inline bool ModCmd_Parse(const ::std::string& name,
      ModCmd* value) {
    return RequestModifyPeer_ModCmd_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.peers.RequestModifyPeer.ModCmd cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::rsctrl::peers::RequestModifyPeer_ModCmd cmd() const;
  inline void set_cmd(::rsctrl::peers::RequestModifyPeer_ModCmd value);
  
  // repeated .rsctrl.core.Person peers = 2;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 2;
  inline const ::rsctrl::core::Person& peers(int index) const;
  inline ::rsctrl::core::Person* mutable_peers(int index);
  inline ::rsctrl::core::Person* add_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >&
      peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >*
      mutable_peers();
  
  // @@protoc_insertion_point(class_scope:rsctrl.peers.RequestModifyPeer)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person > peers_;
  int cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_peers_2eproto();
  friend void protobuf_AssignDesc_peers_2eproto();
  friend void protobuf_ShutdownFile_peers_2eproto();
  
  void InitAsDefaultInstance();
  static RequestModifyPeer* default_instance_;
};
// -------------------------------------------------------------------

class ResponseModifyPeer : public ::google::protobuf::Message {
 public:
  ResponseModifyPeer();
  virtual ~ResponseModifyPeer();
  
  ResponseModifyPeer(const ResponseModifyPeer& from);
  
  inline ResponseModifyPeer& operator=(const ResponseModifyPeer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseModifyPeer& default_instance();
  
  void Swap(ResponseModifyPeer* other);
  
  // implements Message ----------------------------------------------
  
  ResponseModifyPeer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseModifyPeer& from);
  void MergeFrom(const ResponseModifyPeer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rsctrl.core.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rsctrl::core::Status& status() const;
  inline ::rsctrl::core::Status* mutable_status();
  inline ::rsctrl::core::Status* release_status();
  
  // repeated .rsctrl.core.Person peers = 2;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 2;
  inline const ::rsctrl::core::Person& peers(int index) const;
  inline ::rsctrl::core::Person* mutable_peers(int index);
  inline ::rsctrl::core::Person* add_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >&
      peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >*
      mutable_peers();
  
  // @@protoc_insertion_point(class_scope:rsctrl.peers.ResponseModifyPeer)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rsctrl::core::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person > peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_peers_2eproto();
  friend void protobuf_AssignDesc_peers_2eproto();
  friend void protobuf_ShutdownFile_peers_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseModifyPeer* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestPeers

// required .rsctrl.peers.RequestPeers.SetOption set = 1;
inline bool RequestPeers::has_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPeers::set_has_set() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPeers::clear_has_set() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPeers::clear_set() {
  set_ = 1;
  clear_has_set();
}
inline ::rsctrl::peers::RequestPeers_SetOption RequestPeers::set() const {
  return static_cast< ::rsctrl::peers::RequestPeers_SetOption >(set_);
}
inline void RequestPeers::set_set(::rsctrl::peers::RequestPeers_SetOption value) {
  GOOGLE_DCHECK(::rsctrl::peers::RequestPeers_SetOption_IsValid(value));
  set_has_set();
  set_ = value;
}

// required .rsctrl.peers.RequestPeers.InfoOption info = 2;
inline bool RequestPeers::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestPeers::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestPeers::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestPeers::clear_info() {
  info_ = 1;
  clear_has_info();
}
inline ::rsctrl::peers::RequestPeers_InfoOption RequestPeers::info() const {
  return static_cast< ::rsctrl::peers::RequestPeers_InfoOption >(info_);
}
inline void RequestPeers::set_info(::rsctrl::peers::RequestPeers_InfoOption value) {
  GOOGLE_DCHECK(::rsctrl::peers::RequestPeers_InfoOption_IsValid(value));
  set_has_info();
  info_ = value;
}

// repeated string gpg_ids = 3;
inline int RequestPeers::gpg_ids_size() const {
  return gpg_ids_.size();
}
inline void RequestPeers::clear_gpg_ids() {
  gpg_ids_.Clear();
}
inline const ::std::string& RequestPeers::gpg_ids(int index) const {
  return gpg_ids_.Get(index);
}
inline ::std::string* RequestPeers::mutable_gpg_ids(int index) {
  return gpg_ids_.Mutable(index);
}
inline void RequestPeers::set_gpg_ids(int index, const ::std::string& value) {
  gpg_ids_.Mutable(index)->assign(value);
}
inline void RequestPeers::set_gpg_ids(int index, const char* value) {
  gpg_ids_.Mutable(index)->assign(value);
}
inline void RequestPeers::set_gpg_ids(int index, const char* value, size_t size) {
  gpg_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPeers::add_gpg_ids() {
  return gpg_ids_.Add();
}
inline void RequestPeers::add_gpg_ids(const ::std::string& value) {
  gpg_ids_.Add()->assign(value);
}
inline void RequestPeers::add_gpg_ids(const char* value) {
  gpg_ids_.Add()->assign(value);
}
inline void RequestPeers::add_gpg_ids(const char* value, size_t size) {
  gpg_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestPeers::gpg_ids() const {
  return gpg_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestPeers::mutable_gpg_ids() {
  return &gpg_ids_;
}

// -------------------------------------------------------------------

// ResponsePeerList

// required .rsctrl.core.Status status = 1;
inline bool ResponsePeerList::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponsePeerList::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponsePeerList::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponsePeerList::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponsePeerList::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponsePeerList::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponsePeerList::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// repeated .rsctrl.core.Person peers = 2;
inline int ResponsePeerList::peers_size() const {
  return peers_.size();
}
inline void ResponsePeerList::clear_peers() {
  peers_.Clear();
}
inline const ::rsctrl::core::Person& ResponsePeerList::peers(int index) const {
  return peers_.Get(index);
}
inline ::rsctrl::core::Person* ResponsePeerList::mutable_peers(int index) {
  return peers_.Mutable(index);
}
inline ::rsctrl::core::Person* ResponsePeerList::add_peers() {
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >&
ResponsePeerList::peers() const {
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >*
ResponsePeerList::mutable_peers() {
  return &peers_;
}

// -------------------------------------------------------------------

// RequestAddPeer

// required string gpg_id = 1;
inline bool RequestAddPeer::has_gpg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAddPeer::set_has_gpg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestAddPeer::clear_has_gpg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestAddPeer::clear_gpg_id() {
  if (gpg_id_ != &::google::protobuf::internal::kEmptyString) {
    gpg_id_->clear();
  }
  clear_has_gpg_id();
}
inline const ::std::string& RequestAddPeer::gpg_id() const {
  return *gpg_id_;
}
inline void RequestAddPeer::set_gpg_id(const ::std::string& value) {
  set_has_gpg_id();
  if (gpg_id_ == &::google::protobuf::internal::kEmptyString) {
    gpg_id_ = new ::std::string;
  }
  gpg_id_->assign(value);
}
inline void RequestAddPeer::set_gpg_id(const char* value) {
  set_has_gpg_id();
  if (gpg_id_ == &::google::protobuf::internal::kEmptyString) {
    gpg_id_ = new ::std::string;
  }
  gpg_id_->assign(value);
}
inline void RequestAddPeer::set_gpg_id(const char* value, size_t size) {
  set_has_gpg_id();
  if (gpg_id_ == &::google::protobuf::internal::kEmptyString) {
    gpg_id_ = new ::std::string;
  }
  gpg_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestAddPeer::mutable_gpg_id() {
  set_has_gpg_id();
  if (gpg_id_ == &::google::protobuf::internal::kEmptyString) {
    gpg_id_ = new ::std::string;
  }
  return gpg_id_;
}
inline ::std::string* RequestAddPeer::release_gpg_id() {
  clear_has_gpg_id();
  if (gpg_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gpg_id_;
    gpg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .rsctrl.peers.RequestAddPeer.AddCmd cmd = 2;
inline bool RequestAddPeer::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestAddPeer::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestAddPeer::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestAddPeer::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::rsctrl::peers::RequestAddPeer_AddCmd RequestAddPeer::cmd() const {
  return static_cast< ::rsctrl::peers::RequestAddPeer_AddCmd >(cmd_);
}
inline void RequestAddPeer::set_cmd(::rsctrl::peers::RequestAddPeer_AddCmd value) {
  GOOGLE_DCHECK(::rsctrl::peers::RequestAddPeer_AddCmd_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional string cert = 3;
inline bool RequestAddPeer::has_cert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestAddPeer::set_has_cert() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestAddPeer::clear_has_cert() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestAddPeer::clear_cert() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& RequestAddPeer::cert() const {
  return *cert_;
}
inline void RequestAddPeer::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void RequestAddPeer::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void RequestAddPeer::set_cert(const char* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestAddPeer::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  return cert_;
}
inline ::std::string* RequestAddPeer::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResponseAddPeer

// required .rsctrl.core.Status status = 1;
inline bool ResponseAddPeer::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseAddPeer::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseAddPeer::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseAddPeer::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseAddPeer::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseAddPeer::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseAddPeer::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// repeated .rsctrl.core.Person peers = 2;
inline int ResponseAddPeer::peers_size() const {
  return peers_.size();
}
inline void ResponseAddPeer::clear_peers() {
  peers_.Clear();
}
inline const ::rsctrl::core::Person& ResponseAddPeer::peers(int index) const {
  return peers_.Get(index);
}
inline ::rsctrl::core::Person* ResponseAddPeer::mutable_peers(int index) {
  return peers_.Mutable(index);
}
inline ::rsctrl::core::Person* ResponseAddPeer::add_peers() {
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >&
ResponseAddPeer::peers() const {
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >*
ResponseAddPeer::mutable_peers() {
  return &peers_;
}

// -------------------------------------------------------------------

// RequestModifyPeer

// required .rsctrl.peers.RequestModifyPeer.ModCmd cmd = 1;
inline bool RequestModifyPeer::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestModifyPeer::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestModifyPeer::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestModifyPeer::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::rsctrl::peers::RequestModifyPeer_ModCmd RequestModifyPeer::cmd() const {
  return static_cast< ::rsctrl::peers::RequestModifyPeer_ModCmd >(cmd_);
}
inline void RequestModifyPeer::set_cmd(::rsctrl::peers::RequestModifyPeer_ModCmd value) {
  GOOGLE_DCHECK(::rsctrl::peers::RequestModifyPeer_ModCmd_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// repeated .rsctrl.core.Person peers = 2;
inline int RequestModifyPeer::peers_size() const {
  return peers_.size();
}
inline void RequestModifyPeer::clear_peers() {
  peers_.Clear();
}
inline const ::rsctrl::core::Person& RequestModifyPeer::peers(int index) const {
  return peers_.Get(index);
}
inline ::rsctrl::core::Person* RequestModifyPeer::mutable_peers(int index) {
  return peers_.Mutable(index);
}
inline ::rsctrl::core::Person* RequestModifyPeer::add_peers() {
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >&
RequestModifyPeer::peers() const {
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >*
RequestModifyPeer::mutable_peers() {
  return &peers_;
}

// -------------------------------------------------------------------

// ResponseModifyPeer

// required .rsctrl.core.Status status = 1;
inline bool ResponseModifyPeer::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseModifyPeer::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseModifyPeer::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseModifyPeer::clear_status() {
  if (status_ != NULL) status_->::rsctrl::core::Status::Clear();
  clear_has_status();
}
inline const ::rsctrl::core::Status& ResponseModifyPeer::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rsctrl::core::Status* ResponseModifyPeer::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rsctrl::core::Status;
  return status_;
}
inline ::rsctrl::core::Status* ResponseModifyPeer::release_status() {
  clear_has_status();
  ::rsctrl::core::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// repeated .rsctrl.core.Person peers = 2;
inline int ResponseModifyPeer::peers_size() const {
  return peers_.size();
}
inline void ResponseModifyPeer::clear_peers() {
  peers_.Clear();
}
inline const ::rsctrl::core::Person& ResponseModifyPeer::peers(int index) const {
  return peers_.Get(index);
}
inline ::rsctrl::core::Person* ResponseModifyPeer::mutable_peers(int index) {
  return peers_.Mutable(index);
}
inline ::rsctrl::core::Person* ResponseModifyPeer::add_peers() {
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >&
ResponseModifyPeer::peers() const {
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsctrl::core::Person >*
ResponseModifyPeer::mutable_peers() {
  return &peers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace peers
}  // namespace rsctrl

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::peers::RequestPeers_SetOption>() {
  return ::rsctrl::peers::RequestPeers_SetOption_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::peers::RequestPeers_InfoOption>() {
  return ::rsctrl::peers::RequestPeers_InfoOption_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::peers::RequestAddPeer_AddCmd>() {
  return ::rsctrl::peers::RequestAddPeer_AddCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rsctrl::peers::RequestModifyPeer_ModCmd>() {
  return ::rsctrl::peers::RequestModifyPeer_ModCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::peers::RequestMsgIds>() {
  return rsctrl::peers::RequestMsgIds_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rsctrl::peers::ResponseMsgIds>() {
  return rsctrl::peers::ResponseMsgIds_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_peers_2eproto__INCLUDED
